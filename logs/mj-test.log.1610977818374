INFO  20:24:52,135 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  20:24:52,252 - #2 program
INFO  20:24:52,252 - #44 p
INFO  20:24:52,252 - #44 int
INFO  20:24:52,254 - #44 buffer
INFO  20:24:52,256 - #39 [
INFO  20:24:52,256 - #40 ]
INFO  20:24:52,257 - #33 ;
INFO  20:24:52,257 - #44 int
INFO  20:24:52,259 - #44 niz
INFO  20:24:52,259 - #39 [
INFO  20:24:52,259 - #40 ]
INFO  20:24:52,259 - #33 ;
INFO  20:24:52,260 - #35 {
INFO  20:24:52,260 - #5 void
INFO  20:24:52,264 - #44 main
INFO  20:24:52,265 - #37 (
INFO  20:24:52,266 - #38 )
INFO  20:24:52,267 - #44 int
INFO  20:24:52,269 - #44 index
INFO  20:24:52,269 - #33 ;
INFO  20:24:52,269 - #44 int
INFO  20:24:52,278 - #44 sum
INFO  20:24:52,279 - #33 ;
INFO  20:24:52,279 - #44 int
INFO  20:24:52,279 - #44 buffer_Fake
INFO  20:24:52,279 - #39 [
INFO  20:24:52,279 - #40 ]
INFO  20:24:52,280 - #33 ;
INFO  20:24:52,280 - #44 int
INFO  20:24:52,280 - #44 aaa
INFO  20:24:52,280 - #39 [
INFO  20:24:52,280 - #40 ]
INFO  20:24:52,280 - #33 ;
INFO  20:24:52,280 - #44 int
INFO  20:24:52,281 - #44 niz
INFO  20:24:52,281 - #39 [
INFO  20:24:52,281 - #40 ]
INFO  20:24:52,281 - #33 ;
INFO  20:24:52,281 - #44 int
INFO  20:24:52,281 - #44 modif_one
INFO  20:24:52,281 - #33 ;
INFO  20:24:52,281 - #44 char
INFO  20:24:52,281 - #44 modif_two
INFO  20:24:52,281 - #39 [
INFO  20:24:52,282 - #40 ]
INFO  20:24:52,282 - #33 ;
INFO  20:24:52,282 - #44 char
INFO  20:24:52,282 - #44 modif_three
INFO  20:24:52,282 - #33 ;
INFO  20:24:52,282 - #44 char
INFO  20:24:52,282 - #44 modif_three_array
INFO  20:24:52,282 - #39 [
INFO  20:24:52,282 - #40 ]
INFO  20:24:52,283 - #33 ;
INFO  20:24:52,283 - #44 int
INFO  20:24:52,283 - #44 i
INFO  20:24:52,283 - #33 ;
INFO  20:24:52,283 - #35 {
INFO  20:24:52,283 - #44 niz
INFO  20:24:52,287 - #19 =
INFO  20:24:52,289 - #16 new
INFO  20:24:52,291 - #44 int
INFO  20:24:52,291 - #39 [
INFO  20:24:52,291 - #43 5
INFO  20:24:52,291 - #40 ]
INFO  20:24:52,293 - #33 ;
INFO  20:24:52,294 - #44 niz
INFO  20:24:52,294 - #39 [
INFO  20:24:52,295 - #43 0
INFO  20:24:52,299 - #40 ]
INFO  20:24:52,300 - #19 =
INFO  20:24:52,300 - #43 1
INFO  20:24:52,301 - #33 ;
INFO  20:24:52,301 - #44 niz
INFO  20:24:52,301 - #39 [
INFO  20:24:52,301 - #43 1
INFO  20:24:52,301 - #40 ]
INFO  20:24:52,301 - #19 =
INFO  20:24:52,302 - #43 3
INFO  20:24:52,302 - #33 ;
INFO  20:24:52,302 - #44 niz
INFO  20:24:52,302 - #39 [
INFO  20:24:52,303 - #43 2
INFO  20:24:52,303 - #40 ]
INFO  20:24:52,303 - #19 =
INFO  20:24:52,303 - #43 5
INFO  20:24:52,303 - #33 ;
INFO  20:24:52,304 - #8 enum
INFO  20:24:52,304 - #44 labela
INFO  20:24:52,304 - #33 ;
INFO  20:24:52,304 - #44 niz
INFO  20:24:52,304 - #39 [
INFO  20:24:52,304 - #43 3
INFO  20:24:52,304 - #40 ]
INFO  20:24:52,305 - #19 =
INFO  20:24:52,305 - #43 7
INFO  20:24:52,305 - #33 ;
INFO  20:24:52,305 - #44 niz
INFO  20:24:52,305 - #39 [
INFO  20:24:52,305 - #43 4
INFO  20:24:52,305 - #40 ]
INFO  20:24:52,305 - #19 =
INFO  20:24:52,306 - #43 9
INFO  20:24:52,306 - #33 ;
INFO  20:24:52,306 - #44 labela
INFO  20:24:52,306 - #32 :
INFO  20:24:52,306 - #18 print
INFO  20:24:52,306 - #37 (
INFO  20:24:52,306 - #44 niz
INFO  20:24:52,306 - #39 [
INFO  20:24:52,307 - #43 0
INFO  20:24:52,307 - #40 ]
INFO  20:24:52,307 - #38 )
INFO  20:24:52,309 - #33 ;
INFO  20:24:52,310 - #18 print
INFO  20:24:52,310 - #37 (
INFO  20:24:52,310 - #44 niz
INFO  20:24:52,310 - #39 [
INFO  20:24:52,310 - #43 1
INFO  20:24:52,310 - #40 ]
INFO  20:24:52,311 - #38 )
INFO  20:24:52,311 - #33 ;
INFO  20:24:52,311 - #18 print
INFO  20:24:52,311 - #37 (
INFO  20:24:52,311 - #44 niz
INFO  20:24:52,311 - #39 [
INFO  20:24:52,311 - #43 2
INFO  20:24:52,311 - #40 ]
INFO  20:24:52,312 - #38 )
INFO  20:24:52,312 - #33 ;
INFO  20:24:52,312 - #18 print
INFO  20:24:52,312 - #37 (
INFO  20:24:52,312 - #44 niz
INFO  20:24:52,312 - #39 [
INFO  20:24:52,312 - #43 3
INFO  20:24:52,312 - #40 ]
INFO  20:24:52,312 - #38 )
INFO  20:24:52,314 - #33 ;
INFO  20:24:52,378 - #18 print
INFO  20:24:52,379 - #37 (
INFO  20:24:52,379 - #44 niz
INFO  20:24:52,379 - #39 [
INFO  20:24:52,379 - #43 4
INFO  20:24:52,379 - #40 ]
INFO  20:24:52,379 - #38 )
INFO  20:24:52,380 - #33 ;
INFO  20:24:52,380 - #36 }
INFO  20:24:52,380 - #36 }
INFO  20:24:52,404 - Program(
  ProgramName(
   p
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             buffer
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationVars(
      VarDeclClass(
        Type(
         int
        ) [Type]
        VarListSingle(
          VarClassArray(
           niz
          ) [VarClassArray]
        ) [VarListSingle]
      ) [VarDeclClass]
    ) [GroupDeclarationVars]
  ) [GroupDeclarations]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          NoVarDeclList(
                          ) [NoVarDeclList]
                          VarDeclClass(
                            Type(
                             int
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               index
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           int
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             sum
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassArray(
                           buffer_Fake
                          ) [VarClassArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         aaa
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassArray(
                       niz
                      ) [VarClassArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     modif_one
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListSingle(
                  VarClassArray(
                   modif_two
                  ) [VarClassArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 modif_three
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassArray(
               modif_three_array
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             i
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              Assignment(
                                DesignatorStatementOptionsClassAssignExpression(
                                  Designator(
                                    DesigIdent(
                                     niz
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NewFactorClass(
                                            Type(
                                             int
                                            ) [Type]
                                            FactorOptionalSecondClass(
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      NumberConst(
                                                       5
                                                      ) [NumberConst]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [FactorOptionalSecondClass]
                                          ) [NewFactorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [Assignment]
                            ) [Statements]
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                  DesigIdent(
                                   niz
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         1
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [Statements]
                          Assignment(
                            DesignatorStatementOptionsClassAssignExpression(
                              Designator(
                                DesigIdent(
                                 niz
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           1
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                              AssignOpClass(
                                AssignOperationClass(
                                ) [AssignOperationClass]
                              ) [AssignOpClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       3
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [DesignatorStatementOptionsClassAssignExpression]
                          ) [Assignment]
                        ) [Statements]
                        Assignment(
                          DesignatorStatementOptionsClassAssignExpression(
                            Designator(
                              DesigIdent(
                               niz
                              ) [DesigIdent]
                              OptionalDesignatorArray(
                                HelperClass(
                                ) [HelperClass]
                                LSquareClass(
                                ) [LSquareClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         2
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [OptionalDesignatorArray]
                            ) [Designator]
                            AssignOpClass(
                              AssignOperationClass(
                              ) [AssignOperationClass]
                            ) [AssignOpClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     5
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [DesignatorStatementOptionsClassAssignExpression]
                        ) [Assignment]
                      ) [Statements]
                      GoToStmt(
                       labela
                      ) [GoToStmt]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           niz
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     3
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 7
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         niz
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   4
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               9
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Ooof(
                 labela
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 niz
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           0
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Ooof]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             niz
                            ) [DesigIdent]
                            OptionalDesignatorArray(
                              HelperClass(
                              ) [HelperClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       1
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           niz
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     2
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         niz
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   3
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       niz
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 4
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  20:24:53,406 - ===================================
INFO  20:24:53,411 - PROGRAM NAME DETECTED => p ON LINE 1
INFO  20:24:53,412 - ARRAY VARIABLE buffer IS BEING DEFINED! ON LINE 3
INFO  20:24:53,412 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 3
INFO  20:24:53,412 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 4
INFO  20:24:53,412 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 4
INFO  20:24:53,412 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 8
INFO  20:24:53,412 - VARIABLE index IS BEING DEFINED! ON LINE 9
INFO  20:24:53,412 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 9
INFO  20:24:53,412 - VARIABLE sum IS BEING DEFINED! ON LINE 10
INFO  20:24:53,412 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 10
INFO  20:24:53,412 - ARRAY VARIABLE buffer_Fake IS BEING DEFINED! ON LINE 11
INFO  20:24:53,412 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 11
INFO  20:24:53,412 - ARRAY VARIABLE aaa IS BEING DEFINED! ON LINE 12
INFO  20:24:53,413 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  20:24:53,414 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 13
INFO  20:24:53,414 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 13
INFO  20:24:53,414 - VARIABLE modif_one IS BEING DEFINED! ON LINE 14
INFO  20:24:53,414 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 14
INFO  20:24:53,414 - ARRAY VARIABLE modif_two IS BEING DEFINED! ON LINE 15
INFO  20:24:53,414 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  20:24:53,414 - VARIABLE modif_three IS BEING DEFINED! ON LINE 16
INFO  20:24:53,414 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 16
INFO  20:24:53,414 - ARRAY VARIABLE modif_three_array IS BEING DEFINED! ON LINE 17
INFO  20:24:53,414 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 17
INFO  20:24:53,414 - VARIABLE i IS BEING DEFINED! ON LINE 18
INFO  20:24:53,414 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 18
INFO  20:24:53,414 - METHOD BODY STARTING!
INFO  20:24:53,415 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,415 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  20:24:53,415 - CONST NUMBER 5 ON LINE 52
INFO  20:24:53,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  20:24:53,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  20:24:53,415 - USAGE OF KEYWORD NEW! ON LINE 52
INFO  20:24:53,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  20:24:53,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  20:24:53,415 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  20:24:53,415 - CONST NUMBER 0 ON LINE 53
INFO  20:24:53,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  20:24:53,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  20:24:53,415 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,416 - BEGINNING OF AN ASSIGNEMENT! ON LINE 53
INFO  20:24:53,416 - CONST NUMBER 1 ON LINE 53
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  20:24:53,416 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 53
INFO  20:24:53,416 - CONST NUMBER 1 ON LINE 54
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  20:24:53,416 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,416 - BEGINNING OF AN ASSIGNEMENT! ON LINE 54
INFO  20:24:53,416 - CONST NUMBER 3 ON LINE 54
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  20:24:53,416 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 54
INFO  20:24:53,416 - CONST NUMBER 2 ON LINE 55
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  20:24:53,416 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,416 - BEGINNING OF AN ASSIGNEMENT! ON LINE 55
INFO  20:24:53,416 - CONST NUMBER 5 ON LINE 55
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  20:24:53,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  20:24:53,417 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 55
INFO  20:24:53,417 - CONST NUMBER 3 ON LINE 57
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  20:24:53,417 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,417 - BEGINNING OF AN ASSIGNEMENT! ON LINE 57
INFO  20:24:53,417 - CONST NUMBER 7 ON LINE 57
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  20:24:53,417 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 57
INFO  20:24:53,417 - CONST NUMBER 4 ON LINE 58
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  20:24:53,417 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,417 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  20:24:53,417 - CONST NUMBER 9 ON LINE 58
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  20:24:53,417 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 58
INFO  20:24:53,417 - CONST NUMBER 0 ON LINE 60
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  20:24:53,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  20:24:53,418 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,418 - WE ARE USING AN ARRAY OF TYPE int ON LINE 60
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  20:24:53,418 - PRINT FUNCTION CALL IN USE! ON LINE 60
INFO  20:24:53,418 - CONST NUMBER 1 ON LINE 61
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  20:24:53,418 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,418 - WE ARE USING AN ARRAY OF TYPE int ON LINE 61
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  20:24:53,418 - PRINT FUNCTION CALL IN USE! ON LINE 61
INFO  20:24:53,418 - CONST NUMBER 2 ON LINE 62
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  20:24:53,418 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,418 - WE ARE USING AN ARRAY OF TYPE int ON LINE 62
INFO  20:24:53,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  20:24:53,419 - PRINT FUNCTION CALL IN USE! ON LINE 62
INFO  20:24:53,419 - CONST NUMBER 3 ON LINE 63
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  20:24:53,419 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,419 - WE ARE USING AN ARRAY OF TYPE int ON LINE 63
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  20:24:53,419 - PRINT FUNCTION CALL IN USE! ON LINE 63
INFO  20:24:53,419 - CONST NUMBER 4 ON LINE 64
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  20:24:53,419 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  20:24:53,419 - WE ARE USING AN ARRAY OF TYPE int ON LINE 64
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  20:24:53,419 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  20:24:53,419 - PRINT FUNCTION CALL IN USE! ON LINE 64
INFO  20:24:53,419 - METHOD BODY ENDING!
INFO  20:24:53,420 - END OF DEFINING FUNCTION main
INFO  20:24:53,420 - PROGRAM ENDED => p ON LINE 1
INFO  20:24:53,420 -  Deklarisanih promenljivih ima = 12
INFO  20:24:53,420 - ===================================
INFO  20:24:53,425 - Parsiranje uspesno zavrseno!
