INFO  18:15:50,194 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:15:50,290 - #2 program
INFO  18:15:50,290 - #43 MJProgram
INFO  18:15:50,290 - #43 int
INFO  18:15:50,293 - #43 a
INFO  18:15:50,295 - #31 ,
INFO  18:15:50,295 - #43 b
INFO  18:15:50,296 - #31 ,
INFO  18:15:50,296 - #43 c
INFO  18:15:50,296 - #31 ,
INFO  18:15:50,296 - #43 d
INFO  18:15:50,297 - #33 ;
INFO  18:15:50,297 - #9 const
INFO  18:15:50,297 - #43 int
INFO  18:15:50,298 - #43 y
INFO  18:15:50,298 - #19 =
INFO  18:15:50,299 - #42 3
INFO  18:15:50,299 - #33 ;
INFO  18:15:50,299 - #35 {
INFO  18:15:50,300 - #43 int
INFO  18:15:50,301 - #43 k
INFO  18:15:50,301 - #37 (
INFO  18:15:50,310 - #43 int
INFO  18:15:50,310 - #43 a
INFO  18:15:50,311 - #31 ,
INFO  18:15:50,311 - #43 int
INFO  18:15:50,312 - #43 b
INFO  18:15:50,312 - #38 )
INFO  18:15:50,312 - #35 {
INFO  18:15:50,314 - #41 return
INFO  18:15:50,316 - #43 b
INFO  18:15:50,317 - #33 ;
INFO  18:15:50,321 - #36 }
INFO  18:15:50,321 - #5 void
INFO  18:15:50,326 - #43 main
INFO  18:15:50,326 - #37 (
INFO  18:15:50,326 - #38 )
INFO  18:15:50,327 - #43 int
INFO  18:15:50,327 - #43 x
INFO  18:15:50,327 - #33 ;
INFO  18:15:50,327 - #43 int
INFO  18:15:50,327 - #43 xx
INFO  18:15:50,327 - #39 [
INFO  18:15:50,327 - #40 ]
INFO  18:15:50,327 - #33 ;
INFO  18:15:50,327 - #35 {
INFO  18:15:50,327 - #43 x
INFO  18:15:50,328 - #19 =
INFO  18:15:50,328 - #42 2
INFO  18:15:50,329 - #49 +
INFO  18:15:50,329 - #42 3
INFO  18:15:50,329 - #46 *
INFO  18:15:50,329 - #37 (
INFO  18:15:50,329 - #42 4
INFO  18:15:50,330 - #49 +
INFO  18:15:50,330 - #42 5
INFO  18:15:50,330 - #38 )
INFO  18:15:50,330 - #49 +
INFO  18:15:50,330 - #43 k
INFO  18:15:50,330 - #37 (
INFO  18:15:50,330 - #42 0
INFO  18:15:50,330 - #31 ,
INFO  18:15:50,330 - #42 1
INFO  18:15:50,331 - #38 )
INFO  18:15:50,331 - #33 ;
INFO  18:15:50,331 - #18 print
INFO  18:15:50,331 - #37 (
INFO  18:15:50,331 - #43 x
INFO  18:15:50,331 - #38 )
INFO  18:15:50,332 - #33 ;
INFO  18:15:50,332 - #43 xx
INFO  18:15:50,332 - #19 =
INFO  18:15:50,332 - #16 new
INFO  18:15:50,332 - #43 int
INFO  18:15:50,333 - #39 [
INFO  18:15:50,333 - #42 7
INFO  18:15:50,333 - #40 ]
INFO  18:15:50,333 - #33 ;
INFO  18:15:50,333 - #43 xx
INFO  18:15:50,333 - #39 [
INFO  18:15:50,334 - #42 0
INFO  18:15:50,335 - #40 ]
INFO  18:15:50,336 - #19 =
INFO  18:15:50,336 - #42 3
INFO  18:15:50,336 - #33 ;
INFO  18:15:50,336 - #43 x
INFO  18:15:50,336 - #19 =
INFO  18:15:50,336 - #43 xx
INFO  18:15:50,336 - #39 [
INFO  18:15:50,336 - #42 0
INFO  18:15:50,336 - #40 ]
INFO  18:15:50,336 - #33 ;
INFO  18:15:50,337 - #18 print
INFO  18:15:50,337 - #37 (
INFO  18:15:50,337 - #43 x
INFO  18:15:50,337 - #38 )
INFO  18:15:50,337 - #33 ;
INFO  18:15:50,337 - #36 }
INFO  18:15:50,337 - #36 }
INFO  18:15:50,346 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               x
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             xx
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         x
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               2
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            ExprOptionalListClass(
                              ExprOptionalListClass(
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  NumberConst(
                                   3
                                  ) [NumberConst]
                                  TermOptionalListClass(
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                    MultiplyOperationClass(
                                     *
                                    ) [MultiplyOperationClass]
                                    ParenFactorClass(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               4
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            ExprOptionalListClass(
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                              PlusOperation(
                                               +
                                              ) [PlusOperation]
                                              TermClass(
                                                NumberConst(
                                                 5
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                            ) [ExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ParenFactorClass]
                                  ) [TermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                              PlusOperation(
                               +
                              ) [PlusOperation]
                              TermClass(
                                FactorOptionalParams(
                                  Designator(
                                    DesigIdent(
                                     k
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  Actuals(
                                    ActualParams(
                                      ActualParam(
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 0
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [ActualParam]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               1
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ActualParams]
                                  ) [Actuals]
                                ) [FactorOptionalParams]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                            ) [ExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               x
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     xx
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NewFactorClass(
                            Type(
                             int
                            ) [Type]
                            FactorOptionalSecondClass(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       7
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [FactorOptionalSecondClass]
                          ) [NewFactorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   xx
                  ) [DesigIdent]
                  OptionalDesignatorArray(
                    HelperClass(
                    ) [HelperClass]
                    LSquareClass(
                    ) [LSquareClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [OptionalDesignatorArray]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         3
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           xx
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       x
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:15:50,348 - ===================================
INFO  18:15:50,355 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:15:50,355 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:15:50,355 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:15:50,355 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:15:50,355 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:15:50,355 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:15:50,355 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  18:15:50,356 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  18:15:50,356 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  18:15:50,356 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:15:50,356 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:15:50,356 - METHOD BODY STARTING!
INFO  18:15:50,356 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  18:15:50,356 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  18:15:50,356 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:15:50,356 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:15:50,356 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  18:15:50,356 - METHOD BODY ENDING!
INFO  18:15:50,356 - END OF DEFINING FUNCTION k
INFO  18:15:50,356 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:15:50,357 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  18:15:50,357 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  18:15:50,357 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  18:15:50,357 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 15
INFO  18:15:50,357 - METHOD BODY STARTING!
INFO  18:15:50,357 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:15:50,357 - BEGINNING OF AN ASSIGNEMENT! ON LINE 20
INFO  18:15:50,357 - CONST NUMBER 2 ON LINE 20
INFO  18:15:50,357 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,357 - CONST NUMBER 3 ON LINE 20
INFO  18:15:50,357 - CONST NUMBER 4 ON LINE 20
INFO  18:15:50,357 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,357 - CONST NUMBER 5 ON LINE 20
INFO  18:15:50,357 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,357 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  18:15:50,357 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:15:50,358 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  18:15:50,358 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:15:50,358 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  18:15:50,358 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  18:15:50,358 - CONST NUMBER 0 ON LINE 20
INFO  18:15:50,358 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,358 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,358 - CONST NUMBER 1 ON LINE 20
INFO  18:15:50,358 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,358 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,358 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:15:50,358 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:15:50,358 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:15:50,358 - USING INTEGERS IN TERM! ON LINE 6
INFO  18:15:50,358 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:15:50,358 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 20
INFO  18:15:50,358 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:15:50,358 - WE ARE USING A VARIABLE OF TYPE int ON LINE 21
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:15:50,359 - PRINT FUNCTION CALL IN USE! ON LINE 21
INFO  18:15:50,359 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:15:50,359 - BEGINNING OF AN ASSIGNEMENT! ON LINE 24
INFO  18:15:50,359 - CONST NUMBER 7 ON LINE 24
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:15:50,359 - USAGE OF KEYWORD NEW! ON LINE 24
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:15:50,359 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 24
INFO  18:15:50,359 - CONST NUMBER 0 ON LINE 25
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:15:50,359 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:15:50,359 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:15:50,359 - BEGINNING OF AN ASSIGNEMENT! ON LINE 25
INFO  18:15:50,359 - CONST NUMBER 3 ON LINE 25
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:15:50,360 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 25
INFO  18:15:50,360 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:15:50,360 - BEGINNING OF AN ASSIGNEMENT! ON LINE 27
INFO  18:15:50,360 - CONST NUMBER 0 ON LINE 27
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:15:50,360 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:15:50,360 - WE ARE USING AN ARRAY OF TYPE int ON LINE 27
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:15:50,360 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 27
INFO  18:15:50,360 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:15:50,360 - WE ARE USING A VARIABLE OF TYPE int ON LINE 28
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:15:50,360 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:15:50,360 - PRINT FUNCTION CALL IN USE! ON LINE 28
INFO  18:15:50,361 - METHOD BODY ENDING!
INFO  18:15:50,361 - END OF DEFINING FUNCTION main
INFO  18:15:50,361 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:15:50,361 -  Deklarisanih promenljivih ima = 6
INFO  18:15:50,361 - ===================================
INFO  18:15:50,369 - Parsiranje uspesno zavrseno!
