INFO  22:08:50,206 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  22:08:50,289 - #2 program
INFO  22:08:50,289 - #43 MJProgram
INFO  22:08:50,289 - #43 int
INFO  22:08:50,290 - #43 a
INFO  22:08:50,291 - #31 ,
INFO  22:08:50,291 - #43 b
INFO  22:08:50,291 - #31 ,
INFO  22:08:50,292 - #43 c
INFO  22:08:50,292 - #31 ,
INFO  22:08:50,292 - #43 d
INFO  22:08:50,292 - #33 ;
INFO  22:08:50,292 - #9 const
INFO  22:08:50,292 - #43 int
INFO  22:08:50,292 - #43 term
INFO  22:08:50,292 - #19 =
INFO  22:08:50,293 - #42 0
INFO  22:08:50,293 - #33 ;
INFO  22:08:50,293 - #9 const
INFO  22:08:50,293 - #43 int
INFO  22:08:50,293 - #43 y
INFO  22:08:50,293 - #19 =
INFO  22:08:50,304 - #42 3
INFO  22:08:50,304 - #33 ;
INFO  22:08:50,304 - #35 {
INFO  22:08:50,305 - #43 int
INFO  22:08:50,308 - #43 k
INFO  22:08:50,308 - #37 (
INFO  22:08:50,309 - #43 int
INFO  22:08:50,309 - #43 a
INFO  22:08:50,309 - #39 [
INFO  22:08:50,309 - #40 ]
INFO  22:08:50,309 - #31 ,
INFO  22:08:50,310 - #43 int
INFO  22:08:50,310 - #43 b
INFO  22:08:50,310 - #38 )
INFO  22:08:50,311 - #35 {
INFO  22:08:50,313 - #41 return
INFO  22:08:50,319 - #43 a
INFO  22:08:50,321 - #39 [
INFO  22:08:50,322 - #43 b
INFO  22:08:50,323 - #40 ]
INFO  22:08:50,327 - #33 ;
INFO  22:08:50,327 - #36 }
INFO  22:08:50,327 - #43 int
INFO  22:08:50,329 - #43 func_check
INFO  22:08:50,330 - #37 (
INFO  22:08:50,330 - #43 int
INFO  22:08:50,330 - #43 a
INFO  22:08:50,330 - #39 [
INFO  22:08:50,330 - #40 ]
INFO  22:08:50,330 - #31 ,
INFO  22:08:50,330 - #43 char
INFO  22:08:50,330 - #43 b
INFO  22:08:50,330 - #39 [
INFO  22:08:50,330 - #40 ]
INFO  22:08:50,330 - #31 ,
INFO  22:08:50,330 - #43 bool
INFO  22:08:50,330 - #43 c
INFO  22:08:50,330 - #38 )
INFO  22:08:50,330 - #43 int
INFO  22:08:50,330 - #43 local
INFO  22:08:50,331 - #33 ;
INFO  22:08:50,331 - #35 {
INFO  22:08:50,331 - #43 local
INFO  22:08:50,331 - #19 =
INFO  22:08:50,331 - #43 a
INFO  22:08:50,333 - #39 [
INFO  22:08:50,333 - #42 0
INFO  22:08:50,333 - #40 ]
INFO  22:08:50,333 - #33 ;
INFO  22:08:50,333 - #18 print
INFO  22:08:50,334 - #37 (
INFO  22:08:50,334 - #43 local
INFO  22:08:50,334 - #38 )
INFO  22:08:50,335 - #33 ;
INFO  22:08:50,336 - #43 local
INFO  22:08:50,336 - #19 =
INFO  22:08:50,336 - #43 local
INFO  22:08:50,336 - #46 *
INFO  22:08:50,337 - #42 2
INFO  22:08:50,337 - #49 +
INFO  22:08:50,337 - #43 local
INFO  22:08:50,337 - #50 -
INFO  22:08:50,338 - #43 a
INFO  22:08:50,338 - #39 [
INFO  22:08:50,338 - #42 1
INFO  22:08:50,338 - #40 ]
INFO  22:08:50,338 - #33 ;
INFO  22:08:50,338 - #18 print
INFO  22:08:50,338 - #37 (
INFO  22:08:50,339 - #43 local
INFO  22:08:50,339 - #38 )
INFO  22:08:50,339 - #33 ;
INFO  22:08:50,339 - #41 return
INFO  22:08:50,339 - #43 local
INFO  22:08:50,339 - #33 ;
INFO  22:08:50,339 - #36 }
INFO  22:08:50,339 - #5 void
INFO  22:08:50,339 - #43 main
INFO  22:08:50,339 - #37 (
INFO  22:08:50,340 - #38 )
INFO  22:08:50,341 - #43 int
INFO  22:08:50,341 - #43 x
INFO  22:08:50,341 - #33 ;
INFO  22:08:50,341 - #43 bool
INFO  22:08:50,341 - #43 p
INFO  22:08:50,342 - #33 ;
INFO  22:08:50,342 - #43 bool
INFO  22:08:50,342 - #43 r
INFO  22:08:50,342 - #33 ;
INFO  22:08:50,342 - #43 bool
INFO  22:08:50,342 - #43 q
INFO  22:08:50,342 - #33 ;
INFO  22:08:50,342 - #43 int
INFO  22:08:50,342 - #43 br
INFO  22:08:50,342 - #39 [
INFO  22:08:50,342 - #40 ]
INFO  22:08:50,342 - #33 ;
INFO  22:08:50,342 - #43 int
INFO  22:08:50,343 - #43 indexes
INFO  22:08:50,343 - #39 [
INFO  22:08:50,343 - #40 ]
INFO  22:08:50,343 - #33 ;
INFO  22:08:50,343 - #43 int
INFO  22:08:50,343 - #43 dd
INFO  22:08:50,343 - #33 ;
INFO  22:08:50,343 - #43 int
INFO  22:08:50,343 - #43 ee
INFO  22:08:50,343 - #33 ;
INFO  22:08:50,344 - #43 int
INFO  22:08:50,344 - #43 ff
INFO  22:08:50,344 - #33 ;
INFO  22:08:50,344 - #43 int
INFO  22:08:50,344 - #43 gg
INFO  22:08:50,344 - #33 ;
INFO  22:08:50,344 - #43 char
INFO  22:08:50,344 - #43 hh
INFO  22:08:50,345 - #33 ;
INFO  22:08:50,345 - #43 int
INFO  22:08:50,345 - #43 ii
INFO  22:08:50,345 - #33 ;
INFO  22:08:50,345 - #35 {
INFO  22:08:50,346 - #43 r
INFO  22:08:50,346 - #19 =
INFO  22:08:50,346 - #45 true
INFO  22:08:50,346 - #33 ;
INFO  22:08:50,347 - #12 do
INFO  22:08:50,347 - #35 {
INFO  22:08:50,352 - #18 print
INFO  22:08:50,352 - #37 (
INFO  22:08:50,353 - #42 1
INFO  22:08:50,353 - #38 )
INFO  22:08:50,353 - #33 ;
INFO  22:08:50,353 - #12 do
INFO  22:08:50,353 - #35 {
INFO  22:08:50,353 - #18 print
INFO  22:08:50,354 - #37 (
INFO  22:08:50,354 - #42 2
INFO  22:08:50,354 - #38 )
INFO  22:08:50,354 - #33 ;
INFO  22:08:50,355 - #43 r
INFO  22:08:50,355 - #19 =
INFO  22:08:50,355 - #45 false
INFO  22:08:50,355 - #33 ;
INFO  22:08:50,357 - #36 }
INFO  22:08:50,357 - #13 while
INFO  22:08:50,357 - #37 (
INFO  22:08:50,357 - #43 r
INFO  22:08:50,360 - #38 )
INFO  22:08:50,362 - #33 ;
INFO  22:08:50,362 - #3 break
INFO  22:08:50,363 - #33 ;
INFO  22:08:50,364 - #36 }
INFO  22:08:50,364 - #13 while
INFO  22:08:50,364 - #37 (
INFO  22:08:50,364 - #43 r
INFO  22:08:50,364 - #38 )
INFO  22:08:50,364 - #33 ;
INFO  22:08:50,364 - #43 x
INFO  22:08:50,364 - #19 =
INFO  22:08:50,364 - #42 2
INFO  22:08:50,364 - #33 ;
INFO  22:08:50,364 - #18 print
INFO  22:08:50,364 - #37 (
INFO  22:08:50,364 - #42 3
INFO  22:08:50,364 - #38 )
INFO  22:08:50,364 - #33 ;
INFO  22:08:50,364 - #43 br
INFO  22:08:50,364 - #19 =
INFO  22:08:50,365 - #16 new
INFO  22:08:50,365 - #43 int
INFO  22:08:50,365 - #39 [
INFO  22:08:50,365 - #42 10
INFO  22:08:50,365 - #40 ]
INFO  22:08:50,365 - #33 ;
INFO  22:08:50,365 - #43 br
INFO  22:08:50,365 - #39 [
INFO  22:08:50,365 - #42 0
INFO  22:08:50,365 - #40 ]
INFO  22:08:50,366 - #19 =
INFO  22:08:50,366 - #42 10
INFO  22:08:50,366 - #33 ;
INFO  22:08:50,366 - #43 br
INFO  22:08:50,366 - #39 [
INFO  22:08:50,366 - #42 1
INFO  22:08:50,366 - #40 ]
INFO  22:08:50,366 - #19 =
INFO  22:08:50,366 - #42 2
INFO  22:08:50,366 - #33 ;
INFO  22:08:50,366 - #43 br
INFO  22:08:50,366 - #39 [
INFO  22:08:50,366 - #42 2
INFO  22:08:50,366 - #40 ]
INFO  22:08:50,366 - #19 =
INFO  22:08:50,366 - #42 100
INFO  22:08:50,366 - #33 ;
INFO  22:08:50,366 - #43 x
INFO  22:08:50,366 - #19 =
INFO  22:08:50,366 - #43 func_check
INFO  22:08:50,366 - #37 (
INFO  22:08:50,367 - #43 br
INFO  22:08:50,367 - #31 ,
INFO  22:08:50,367 - #43 xx
INFO  22:08:50,367 - #31 ,
INFO  22:08:50,368 - #43 p
INFO  22:08:50,368 - #38 )
INFO  22:08:50,369 - #33 ;
INFO  22:08:50,369 - #18 print
INFO  22:08:50,369 - #37 (
INFO  22:08:50,369 - #43 x
INFO  22:08:50,369 - #38 )
INFO  22:08:50,369 - #33 ;
INFO  22:08:50,369 - #18 print
INFO  22:08:50,369 - #37 (
INFO  22:08:50,369 - #43 br
INFO  22:08:50,369 - #39 [
INFO  22:08:50,369 - #43 br
INFO  22:08:50,369 - #39 [
INFO  22:08:50,369 - #42 1
INFO  22:08:50,369 - #40 ]
INFO  22:08:50,370 - #40 ]
INFO  22:08:50,370 - #38 )
INFO  22:08:50,370 - #33 ;
INFO  22:08:50,370 - #18 print
INFO  22:08:50,370 - #37 (
INFO  22:08:50,370 - #43 br
INFO  22:08:50,370 - #39 [
INFO  22:08:50,370 - #42 0
INFO  22:08:50,370 - #40 ]
INFO  22:08:50,370 - #38 )
INFO  22:08:50,370 - #33 ;
INFO  22:08:50,370 - #43 br
INFO  22:08:50,370 - #39 [
INFO  22:08:50,370 - #42 0
INFO  22:08:50,370 - #40 ]
INFO  22:08:50,371 - #28 ++
INFO  22:08:50,371 - #33 ;
INFO  22:08:50,371 - #18 print
INFO  22:08:50,371 - #37 (
INFO  22:08:50,371 - #43 br
INFO  22:08:50,371 - #39 [
INFO  22:08:50,371 - #42 0
INFO  22:08:50,371 - #40 ]
INFO  22:08:50,371 - #38 )
INFO  22:08:50,371 - #33 ;
INFO  22:08:50,371 - #43 x
INFO  22:08:50,371 - #19 =
INFO  22:08:50,371 - #43 br
INFO  22:08:50,371 - #39 [
INFO  22:08:50,371 - #42 0
INFO  22:08:50,371 - #40 ]
INFO  22:08:50,371 - #49 +
INFO  22:08:50,372 - #43 br
INFO  22:08:50,372 - #39 [
INFO  22:08:50,372 - #42 1
INFO  22:08:50,372 - #40 ]
INFO  22:08:50,372 - #33 ;
INFO  22:08:50,372 - #43 a
INFO  22:08:50,372 - #19 =
INFO  22:08:50,372 - #42 2
INFO  22:08:50,372 - #49 +
INFO  22:08:50,372 - #43 br
INFO  22:08:50,372 - #39 [
INFO  22:08:50,372 - #42 0
INFO  22:08:50,372 - #40 ]
INFO  22:08:50,372 - #46 *
INFO  22:08:50,372 - #43 br
INFO  22:08:50,372 - #39 [
INFO  22:08:50,372 - #42 2
INFO  22:08:50,372 - #40 ]
INFO  22:08:50,372 - #33 ;
INFO  22:08:50,372 - #43 b
INFO  22:08:50,373 - #19 =
INFO  22:08:50,373 - #50 -
INFO  22:08:50,373 - #43 br
INFO  22:08:50,373 - #39 [
INFO  22:08:50,373 - #42 1
INFO  22:08:50,373 - #40 ]
INFO  22:08:50,373 - #46 *
INFO  22:08:50,373 - #43 br
INFO  22:08:50,373 - #39 [
INFO  22:08:50,373 - #42 2
INFO  22:08:50,373 - #40 ]
INFO  22:08:50,373 - #33 ;
INFO  22:08:50,373 - #43 c
INFO  22:08:50,373 - #19 =
INFO  22:08:50,373 - #50 -
INFO  22:08:50,373 - #43 br
INFO  22:08:50,373 - #39 [
INFO  22:08:50,373 - #42 2
INFO  22:08:50,373 - #40 ]
INFO  22:08:50,373 - #47 /
INFO  22:08:50,373 - #43 br
INFO  22:08:50,374 - #39 [
INFO  22:08:50,374 - #42 1
INFO  22:08:50,374 - #40 ]
INFO  22:08:50,374 - #33 ;
INFO  22:08:50,374 - #18 print
INFO  22:08:50,374 - #37 (
INFO  22:08:50,374 - #43 x
INFO  22:08:50,374 - #38 )
INFO  22:08:50,374 - #33 ;
INFO  22:08:50,374 - #18 print
INFO  22:08:50,374 - #37 (
INFO  22:08:50,374 - #43 a
INFO  22:08:50,374 - #38 )
INFO  22:08:50,374 - #33 ;
INFO  22:08:50,374 - #18 print
INFO  22:08:50,374 - #37 (
INFO  22:08:50,374 - #43 b
INFO  22:08:50,374 - #38 )
INFO  22:08:50,374 - #33 ;
INFO  22:08:50,374 - #18 print
INFO  22:08:50,374 - #37 (
INFO  22:08:50,374 - #43 c
INFO  22:08:50,374 - #38 )
INFO  22:08:50,374 - #33 ;
INFO  22:08:50,375 - #36 }
INFO  22:08:50,375 - #36 }
INFO  22:08:50,390 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           k
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           a
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         b
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         func_check
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               b
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             c
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               local
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         local
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   a
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               local
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     local
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               local
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          TermOptionalListClass(
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                            MultiplyOperationClass(
                             *
                            ) [MultiplyOperationClass]
                            NumberConst(
                             2
                            ) [NumberConst]
                          ) [TermOptionalListClass]
                        ) [TermClass]
                        ExprOptionalListClass(
                          ExprOptionalListClass(
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                            PlusOperation(
                             +
                            ) [PlusOperation]
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   local
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                          ) [ExprOptionalListClass]
                          MinusOperation(
                           -
                          ) [MinusOperation]
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 a
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           1
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                        ) [ExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           local
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         local
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          VarDeclListClass(
                            VarDeclListClass(
                              NoVarDeclList(
                              ) [NoVarDeclList]
                              VarDeclClass(
                                Type(
                                 int
                                ) [Type]
                                VarListSingle(
                                  VarClassNoArray(
                                   x
                                  ) [VarClassNoArray]
                                ) [VarListSingle]
                              ) [VarDeclClass]
                            ) [VarDeclListClass]
                            VarDeclClass(
                              Type(
                               bool
                              ) [Type]
                              VarListSingle(
                                VarClassNoArray(
                                 p
                                ) [VarClassNoArray]
                              ) [VarListSingle]
                            ) [VarDeclClass]
                          ) [VarDeclListClass]
                          VarDeclClass(
                            Type(
                             bool
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               r
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             q
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassArray(
                           br
                          ) [VarClassArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         indexes
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                Statements(
                                  Statements(
                                    Statements(
                                      Statements(
                                        Statements(
                                          Statements(
                                            Statements(
                                              Statements(
                                                Statements(
                                                  NoStmt(
                                                  ) [NoStmt]
                                                  Assignment(
                                                    DesignatorStatementOptionsClassAssignExpression(
                                                      Designator(
                                                        DesigIdent(
                                                         r
                                                        ) [DesigIdent]
                                                        NoOptionalDesignatorClass(
                                                        ) [NoOptionalDesignatorClass]
                                                      ) [Designator]
                                                      AssignOpClass(
                                                        AssignOperationClass(
                                                        ) [AssignOperationClass]
                                                      ) [AssignOpClass]
                                                      ClassOneClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              BooleanClassConstFactor(
                                                               true
                                                              ) [BooleanClassConstFactor]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [ClassOneClass]
                                                    ) [DesignatorStatementOptionsClassAssignExpression]
                                                  ) [Assignment]
                                                ) [Statements]
                                                DoWhileStatement(
                                                  DoClass(
                                                  ) [DoClass]
                                                  StatementStatement(
                                                    Statements(
                                                      Statements(
                                                        Statements(
                                                          NoStmt(
                                                          ) [NoStmt]
                                                          PrintStmt(
                                                            ClassOneClass(
                                                              NormalExpressionClass(
                                                                ExprFirstOptionClassWithMinus(
                                                                  TermClass(
                                                                    NumberConst(
                                                                     1
                                                                    ) [NumberConst]
                                                                    NoTermOptionalListClass(
                                                                    ) [NoTermOptionalListClass]
                                                                  ) [TermClass]
                                                                  NoExprOptionalListClass(
                                                                  ) [NoExprOptionalListClass]
                                                                ) [ExprFirstOptionClassWithMinus]
                                                              ) [NormalExpressionClass]
                                                            ) [ClassOneClass]
                                                            NoCommaNumberClass(
                                                            ) [NoCommaNumberClass]
                                                          ) [PrintStmt]
                                                        ) [Statements]
                                                        DoWhileStatement(
                                                          DoClass(
                                                          ) [DoClass]
                                                          StatementStatement(
                                                            Statements(
                                                              Statements(
                                                                NoStmt(
                                                                ) [NoStmt]
                                                                PrintStmt(
                                                                  ClassOneClass(
                                                                    NormalExpressionClass(
                                                                      ExprFirstOptionClassWithMinus(
                                                                        TermClass(
                                                                          NumberConst(
                                                                           2
                                                                          ) [NumberConst]
                                                                          NoTermOptionalListClass(
                                                                          ) [NoTermOptionalListClass]
                                                                        ) [TermClass]
                                                                        NoExprOptionalListClass(
                                                                        ) [NoExprOptionalListClass]
                                                                      ) [ExprFirstOptionClassWithMinus]
                                                                    ) [NormalExpressionClass]
                                                                  ) [ClassOneClass]
                                                                  NoCommaNumberClass(
                                                                  ) [NoCommaNumberClass]
                                                                ) [PrintStmt]
                                                              ) [Statements]
                                                              Assignment(
                                                                DesignatorStatementOptionsClassAssignExpression(
                                                                  Designator(
                                                                    DesigIdent(
                                                                     r
                                                                    ) [DesigIdent]
                                                                    NoOptionalDesignatorClass(
                                                                    ) [NoOptionalDesignatorClass]
                                                                  ) [Designator]
                                                                  AssignOpClass(
                                                                    AssignOperationClass(
                                                                    ) [AssignOperationClass]
                                                                  ) [AssignOpClass]
                                                                  ClassOneClass(
                                                                    NormalExpressionClass(
                                                                      ExprFirstOptionClassWithMinus(
                                                                        TermClass(
                                                                          BooleanClassConstFactor(
                                                                           false
                                                                          ) [BooleanClassConstFactor]
                                                                          NoTermOptionalListClass(
                                                                          ) [NoTermOptionalListClass]
                                                                        ) [TermClass]
                                                                        NoExprOptionalListClass(
                                                                        ) [NoExprOptionalListClass]
                                                                      ) [ExprFirstOptionClassWithMinus]
                                                                    ) [NormalExpressionClass]
                                                                  ) [ClassOneClass]
                                                                ) [DesignatorStatementOptionsClassAssignExpression]
                                                              ) [Assignment]
                                                            ) [Statements]
                                                          ) [StatementStatement]
                                                          LParenClass(
                                                          ) [LParenClass]
                                                          ConditionClass(
                                                            CondTermClass(
                                                              CondFactClass(
                                                                NormalExpressionClass(
                                                                  ExprFirstOptionClassWithMinus(
                                                                    TermClass(
                                                                      DesignatorClass(
                                                                        Designator(
                                                                          DesigIdent(
                                                                           r
                                                                          ) [DesigIdent]
                                                                          NoOptionalDesignatorClass(
                                                                          ) [NoOptionalDesignatorClass]
                                                                        ) [Designator]
                                                                      ) [DesignatorClass]
                                                                      NoTermOptionalListClass(
                                                                      ) [NoTermOptionalListClass]
                                                                    ) [TermClass]
                                                                    NoExprOptionalListClass(
                                                                    ) [NoExprOptionalListClass]
                                                                  ) [ExprFirstOptionClassWithMinus]
                                                                ) [NormalExpressionClass]
                                                                NoCondFactOptionalClass(
                                                                ) [NoCondFactOptionalClass]
                                                              ) [CondFactClass]
                                                              NoCondTermOptionalClass(
                                                              ) [NoCondTermOptionalClass]
                                                            ) [CondTermClass]
                                                            NoConditionOptionalClass(
                                                            ) [NoConditionOptionalClass]
                                                          ) [ConditionClass]
                                                          RParenClass(
                                                          ) [RParenClass]
                                                        ) [DoWhileStatement]
                                                      ) [Statements]
                                                      BreakClass(
                                                        BreakKeyWordClass(
                                                        ) [BreakKeyWordClass]
                                                      ) [BreakClass]
                                                    ) [Statements]
                                                  ) [StatementStatement]
                                                  LParenClass(
                                                  ) [LParenClass]
                                                  ConditionClass(
                                                    CondTermClass(
                                                      CondFactClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              DesignatorClass(
                                                                Designator(
                                                                  DesigIdent(
                                                                   r
                                                                  ) [DesigIdent]
                                                                  NoOptionalDesignatorClass(
                                                                  ) [NoOptionalDesignatorClass]
                                                                ) [Designator]
                                                              ) [DesignatorClass]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                        NoCondFactOptionalClass(
                                                        ) [NoCondFactOptionalClass]
                                                      ) [CondFactClass]
                                                      NoCondTermOptionalClass(
                                                      ) [NoCondTermOptionalClass]
                                                    ) [CondTermClass]
                                                    NoConditionOptionalClass(
                                                    ) [NoConditionOptionalClass]
                                                  ) [ConditionClass]
                                                  RParenClass(
                                                  ) [RParenClass]
                                                ) [DoWhileStatement]
                                              ) [Statements]
                                              Assignment(
                                                DesignatorStatementOptionsClassAssignExpression(
                                                  Designator(
                                                    DesigIdent(
                                                     x
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                  AssignOpClass(
                                                    AssignOperationClass(
                                                    ) [AssignOperationClass]
                                                  ) [AssignOpClass]
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          NumberConst(
                                                           2
                                                          ) [NumberConst]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [DesignatorStatementOptionsClassAssignExpression]
                                              ) [Assignment]
                                            ) [Statements]
                                            PrintStmt(
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      NumberConst(
                                                       3
                                                      ) [NumberConst]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                              NoCommaNumberClass(
                                              ) [NoCommaNumberClass]
                                            ) [PrintStmt]
                                          ) [Statements]
                                          Assignment(
                                            DesignatorStatementOptionsClassAssignExpression(
                                              Designator(
                                                DesigIdent(
                                                 br
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                              AssignOpClass(
                                                AssignOperationClass(
                                                ) [AssignOperationClass]
                                              ) [AssignOpClass]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      NewFactorClass(
                                                        Type(
                                                         int
                                                        ) [Type]
                                                        FactorOptionalSecondClass(
                                                          ClassOneClass(
                                                            NormalExpressionClass(
                                                              ExprFirstOptionClassWithMinus(
                                                                TermClass(
                                                                  NumberConst(
                                                                   10
                                                                  ) [NumberConst]
                                                                  NoTermOptionalListClass(
                                                                  ) [NoTermOptionalListClass]
                                                                ) [TermClass]
                                                                NoExprOptionalListClass(
                                                                ) [NoExprOptionalListClass]
                                                              ) [ExprFirstOptionClassWithMinus]
                                                            ) [NormalExpressionClass]
                                                          ) [ClassOneClass]
                                                        ) [FactorOptionalSecondClass]
                                                      ) [NewFactorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [DesignatorStatementOptionsClassAssignExpression]
                                          ) [Assignment]
                                        ) [Statements]
                                        Assignment(
                                          DesignatorStatementOptionsClassAssignExpression(
                                            Designator(
                                              DesigIdent(
                                               br
                                              ) [DesigIdent]
                                              OptionalDesignatorArray(
                                                HelperClass(
                                                ) [HelperClass]
                                                LSquareClass(
                                                ) [LSquareClass]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         0
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [OptionalDesignatorArray]
                                            ) [Designator]
                                            AssignOpClass(
                                              AssignOperationClass(
                                              ) [AssignOperationClass]
                                            ) [AssignOpClass]
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     10
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [DesignatorStatementOptionsClassAssignExpression]
                                        ) [Assignment]
                                      ) [Statements]
                                      Assignment(
                                        DesignatorStatementOptionsClassAssignExpression(
                                          Designator(
                                            DesigIdent(
                                             br
                                            ) [DesigIdent]
                                            OptionalDesignatorArray(
                                              HelperClass(
                                              ) [HelperClass]
                                              LSquareClass(
                                              ) [LSquareClass]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      NumberConst(
                                                       1
                                                      ) [NumberConst]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [OptionalDesignatorArray]
                                          ) [Designator]
                                          AssignOpClass(
                                            AssignOperationClass(
                                            ) [AssignOperationClass]
                                          ) [AssignOpClass]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   2
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [DesignatorStatementOptionsClassAssignExpression]
                                      ) [Assignment]
                                    ) [Statements]
                                    Assignment(
                                      DesignatorStatementOptionsClassAssignExpression(
                                        Designator(
                                          DesigIdent(
                                           br
                                          ) [DesigIdent]
                                          OptionalDesignatorArray(
                                            HelperClass(
                                            ) [HelperClass]
                                            LSquareClass(
                                            ) [LSquareClass]
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     2
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [OptionalDesignatorArray]
                                        ) [Designator]
                                        AssignOpClass(
                                          AssignOperationClass(
                                          ) [AssignOperationClass]
                                        ) [AssignOpClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 100
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [DesignatorStatementOptionsClassAssignExpression]
                                    ) [Assignment]
                                  ) [Statements]
                                  Assignment(
                                    DesignatorStatementOptionsClassAssignExpression(
                                      Designator(
                                        DesigIdent(
                                         x
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                      AssignOpClass(
                                        AssignOperationClass(
                                        ) [AssignOperationClass]
                                      ) [AssignOpClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              FactorOptionalParams(
                                                Designator(
                                                  DesigIdent(
                                                   func_check
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                                Actuals(
                                                  ActualParams(
                                                    ActualParams(
                                                      ActualParam(
                                                        ClassOneClass(
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                DesignatorClass(
                                                                  Designator(
                                                                    DesigIdent(
                                                                     br
                                                                    ) [DesigIdent]
                                                                    NoOptionalDesignatorClass(
                                                                    ) [NoOptionalDesignatorClass]
                                                                  ) [Designator]
                                                                ) [DesignatorClass]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                        ) [ClassOneClass]
                                                      ) [ActualParam]
                                                      ClassOneClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              DesignatorClass(
                                                                Designator(
                                                                  DesigIdent(
                                                                   xx
                                                                  ) [DesigIdent]
                                                                  NoOptionalDesignatorClass(
                                                                  ) [NoOptionalDesignatorClass]
                                                                ) [Designator]
                                                              ) [DesignatorClass]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [ClassOneClass]
                                                    ) [ActualParams]
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            DesignatorClass(
                                                              Designator(
                                                                DesigIdent(
                                                                 p
                                                                ) [DesigIdent]
                                                                NoOptionalDesignatorClass(
                                                                ) [NoOptionalDesignatorClass]
                                                              ) [Designator]
                                                            ) [DesignatorClass]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                  ) [ActualParams]
                                                ) [Actuals]
                                              ) [FactorOptionalParams]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [DesignatorStatementOptionsClassAssignExpression]
                                  ) [Assignment]
                                ) [Statements]
                                PrintStmt(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               x
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                  NoCommaNumberClass(
                                  ) [NoCommaNumberClass]
                                ) [PrintStmt]
                              ) [Statements]
                              PrintStmt(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             br
                                            ) [DesigIdent]
                                            OptionalDesignatorArray(
                                              HelperClass(
                                              ) [HelperClass]
                                              LSquareClass(
                                              ) [LSquareClass]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           br
                                                          ) [DesigIdent]
                                                          OptionalDesignatorArray(
                                                            HelperClass(
                                                            ) [HelperClass]
                                                            LSquareClass(
                                                            ) [LSquareClass]
                                                            ClassOneClass(
                                                              NormalExpressionClass(
                                                                ExprFirstOptionClassWithMinus(
                                                                  TermClass(
                                                                    NumberConst(
                                                                     1
                                                                    ) [NumberConst]
                                                                    NoTermOptionalListClass(
                                                                    ) [NoTermOptionalListClass]
                                                                  ) [TermClass]
                                                                  NoExprOptionalListClass(
                                                                  ) [NoExprOptionalListClass]
                                                                ) [ExprFirstOptionClassWithMinus]
                                                              ) [NormalExpressionClass]
                                                            ) [ClassOneClass]
                                                          ) [OptionalDesignatorArray]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [OptionalDesignatorArray]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                                NoCommaNumberClass(
                                ) [NoCommaNumberClass]
                              ) [PrintStmt]
                            ) [Statements]
                            PrintStmt(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           br
                                          ) [DesigIdent]
                                          OptionalDesignatorArray(
                                            HelperClass(
                                            ) [HelperClass]
                                            LSquareClass(
                                            ) [LSquareClass]
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     0
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [OptionalDesignatorArray]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                              NoCommaNumberClass(
                              ) [NoCommaNumberClass]
                            ) [PrintStmt]
                          ) [Statements]
                          Assignment(
                            DesignatorStatementPlusPlus(
                              Designator(
                                DesigIdent(
                                 br
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           0
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                            ) [DesignatorStatementPlusPlus]
                          ) [Assignment]
                        ) [Statements]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       br
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 0
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       br
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 0
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                ExprOptionalListClass(
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                  PlusOperation(
                                   +
                                  ) [PlusOperation]
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         br
                                        ) [DesigIdent]
                                        OptionalDesignatorArray(
                                          HelperClass(
                                          ) [HelperClass]
                                          LSquareClass(
                                          ) [LSquareClass]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   1
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [OptionalDesignatorArray]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                ) [ExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           a
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 2
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              ExprOptionalListClass(
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       br
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 0
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  TermOptionalListClass(
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                    MultiplyOperationClass(
                                     *
                                    ) [MultiplyOperationClass]
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         br
                                        ) [DesigIdent]
                                        OptionalDesignatorArray(
                                          HelperClass(
                                          ) [HelperClass]
                                          LSquareClass(
                                          ) [LSquareClass]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   2
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [OptionalDesignatorArray]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                  ) [TermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        ExprSecondOptionClassMinus(
                          ExprNegativeClass(
                           -
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     br
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               1
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                ) [DesignatorClass]
                                TermOptionalListClass(
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                  MultiplyOperationClass(
                                   *
                                  ) [MultiplyOperationClass]
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       br
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 2
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                ) [TermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [ExprNegativeClass]
                        ) [ExprSecondOptionClassMinus]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       c
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      ExprSecondOptionClassMinus(
                        ExprNegativeClass(
                         -
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   br
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             2
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                              ) [DesignatorClass]
                              TermOptionalListClass(
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                                DivideOperationClass(
                                 /
                                ) [DivideOperationClass]
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     br
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               1
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                ) [DesignatorClass]
                              ) [TermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [ExprNegativeClass]
                      ) [ExprSecondOptionClassMinus]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           a
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       c
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  22:08:50,393 - ===================================
INFO  22:08:50,399 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  22:08:50,399 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  22:08:50,400 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  22:08:50,400 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  22:08:50,400 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  22:08:50,400 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:08:50,400 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  22:08:50,400 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  22:08:50,400 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  22:08:50,400 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  22:08:50,400 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  22:08:50,400 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  22:08:50,401 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  22:08:50,401 - METHOD BODY STARTING!
INFO  22:08:50,401 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:08:50,401 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  22:08:50,401 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:08:50,401 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:08:50,401 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  22:08:50,401 - WE ARE USING AN ARRAY OF TYPE int ON LINE 9
INFO  22:08:50,401 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:08:50,401 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:08:50,401 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  22:08:50,401 - METHOD BODY ENDING!
INFO  22:08:50,401 - END OF DEFINING FUNCTION k
INFO  22:08:50,401 - FUNCTION func_check WITH RETURN VALUE OF TYPE int ON LINE 11
INFO  22:08:50,402 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 11
INFO  22:08:50,402 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE char ON LINE 11
INFO  22:08:50,402 - FORMAL PARAMETER c DEFINED AND IT IS OF TYPE boolean ON LINE 11
INFO  22:08:50,402 - VARIABLE local IS BEING DEFINED! ON LINE 12
INFO  22:08:50,402 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  22:08:50,402 - METHOD BODY STARTING!
INFO  22:08:50,402 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:08:50,402 - BEGINNING OF AN ASSIGNEMENT! ON LINE 14
INFO  22:08:50,402 - CONST NUMBER 0 ON LINE 14
INFO  22:08:50,403 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  22:08:50,403 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  22:08:50,403 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  22:08:50,403 - WE ARE USING AN ARRAY OF TYPE int ON LINE 14
INFO  22:08:50,403 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  22:08:50,403 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  22:08:50,403 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 14
INFO  22:08:50,403 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:08:50,403 - WE ARE USING A VARIABLE OF TYPE int ON LINE 15
INFO  22:08:50,403 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:08:50,403 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:08:50,403 - PRINT FUNCTION CALL IN USE! ON LINE 15
INFO  22:08:50,403 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:08:50,403 - BEGINNING OF AN ASSIGNEMENT! ON LINE 16
INFO  22:08:50,403 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:08:50,404 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  22:08:50,404 - CONST NUMBER 2 ON LINE 16
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:08:50,404 - USING INTEGERS IN TERM! ON LINE 16
INFO  22:08:50,404 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:08:50,404 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:08:50,404 - CONST NUMBER 1 ON LINE 16
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:08:50,404 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  22:08:50,404 - WE ARE USING AN ARRAY OF TYPE int ON LINE 16
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:08:50,404 - USING INTEGERS IN TERM! ON LINE 18
INFO  22:08:50,404 - USING INTEGERS IN TERM! ON LINE 16
INFO  22:08:50,404 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 16
INFO  22:08:50,404 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:08:50,404 - WE ARE USING A VARIABLE OF TYPE int ON LINE 17
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:08:50,404 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:08:50,404 - PRINT FUNCTION CALL IN USE! ON LINE 17
INFO  22:08:50,404 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:08:50,405 - WE ARE USING A VARIABLE OF TYPE int ON LINE 18
INFO  22:08:50,406 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:08:50,406 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:08:50,406 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 18
INFO  22:08:50,406 - METHOD BODY ENDING!
INFO  22:08:50,406 - END OF DEFINING FUNCTION func_check
INFO  22:08:50,406 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  22:08:50,406 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  22:08:50,406 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  22:08:50,406 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  22:08:50,406 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  22:08:50,406 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  22:08:50,406 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  22:08:50,406 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  22:08:50,406 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  22:08:50,406 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 31
INFO  22:08:50,406 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 31
INFO  22:08:50,407 - ARRAY VARIABLE indexes IS BEING DEFINED! ON LINE 32
INFO  22:08:50,407 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  22:08:50,407 - VARIABLE dd IS BEING DEFINED! ON LINE 33
INFO  22:08:50,407 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  22:08:50,407 - VARIABLE ee IS BEING DEFINED! ON LINE 34
INFO  22:08:50,407 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  22:08:50,407 - VARIABLE ff IS BEING DEFINED! ON LINE 35
INFO  22:08:50,407 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  22:08:50,407 - VARIABLE gg IS BEING DEFINED! ON LINE 36
INFO  22:08:50,407 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 36
INFO  22:08:50,407 - VARIABLE hh IS BEING DEFINED! ON LINE 37
INFO  22:08:50,407 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 37
INFO  22:08:50,407 - VARIABLE ii IS BEING DEFINED! ON LINE 38
INFO  22:08:50,407 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 38
INFO  22:08:50,407 - METHOD BODY STARTING!
INFO  22:08:50,407 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  22:08:50,407 - BEGINNING OF AN ASSIGNEMENT! ON LINE 40
INFO  22:08:50,407 - CONST CHAR true ON LINE 40
INFO  22:08:50,407 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  22:08:50,407 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  22:08:50,407 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 40
INFO  22:08:50,408 - BEGINNING OF A DO...WHILE LOOP!
INFO  22:08:50,408 - CONST NUMBER 1 ON LINE 42
INFO  22:08:50,408 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:08:50,408 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:08:50,408 - PRINT FUNCTION CALL IN USE! ON LINE 42
INFO  22:08:50,408 - BEGINNING OF A DO...WHILE LOOP!
INFO  22:08:50,408 - CONST NUMBER 2 ON LINE 45
INFO  22:08:50,408 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  22:08:50,408 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  22:08:50,408 - PRINT FUNCTION CALL IN USE! ON LINE 45
INFO  22:08:50,408 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  22:08:50,408 - BEGINNING OF AN ASSIGNEMENT! ON LINE 46
INFO  22:08:50,408 - CONST CHAR false ON LINE 46
INFO  22:08:50,408 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  22:08:50,409 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  22:08:50,409 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 46
INFO  22:08:50,409 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  22:08:50,409 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 48
INFO  22:08:50,409 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 48
INFO  22:08:50,409 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 48
INFO  22:08:50,409 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 48
INFO  22:08:50,409 - ENDING OF A DO...WHILE LOOP! ON LINE 44
INFO  22:08:50,409 - USING BREAK KEYWORD!
INFO  22:08:50,409 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  22:08:50,409 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 51
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  22:08:50,410 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 51
INFO  22:08:50,410 - ENDING OF A DO...WHILE LOOP! ON LINE 41
INFO  22:08:50,410 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:08:50,410 - BEGINNING OF AN ASSIGNEMENT! ON LINE 53
INFO  22:08:50,410 - CONST NUMBER 2 ON LINE 53
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  22:08:50,410 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 53
INFO  22:08:50,410 - CONST NUMBER 3 ON LINE 54
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:08:50,410 - PRINT FUNCTION CALL IN USE! ON LINE 54
INFO  22:08:50,410 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,410 - BEGINNING OF AN ASSIGNEMENT! ON LINE 56
INFO  22:08:50,410 - CONST NUMBER 10 ON LINE 56
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:08:50,410 - USAGE OF KEYWORD NEW! ON LINE 56
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:08:50,410 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 56
INFO  22:08:50,410 - CONST NUMBER 0 ON LINE 57
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:08:50,410 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:08:50,410 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,410 - BEGINNING OF AN ASSIGNEMENT! ON LINE 57
INFO  22:08:50,410 - CONST NUMBER 10 ON LINE 57
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:08:50,411 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 57
INFO  22:08:50,411 - CONST NUMBER 1 ON LINE 58
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:08:50,411 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,411 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  22:08:50,411 - CONST NUMBER 2 ON LINE 58
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:08:50,411 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 58
INFO  22:08:50,411 - CONST NUMBER 2 ON LINE 59
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  22:08:50,411 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,411 - BEGINNING OF AN ASSIGNEMENT! ON LINE 59
INFO  22:08:50,411 - CONST NUMBER 100 ON LINE 59
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  22:08:50,411 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  22:08:50,411 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 59
INFO  22:08:50,411 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:08:50,411 - BEGINNING OF AN ASSIGNEMENT! ON LINE 61
INFO  22:08:50,411 - CURRENT VARIABLE IN USE IS func_check AND IT IS OF TYPE int
INFO  22:08:50,411 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,412 - WE ARE USING A VARIABLE OF TYPE array ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
ERROR 22:08:50,412 - VARIABLE OF NAME xx IS NOT DEFINED!
INFO  22:08:50,412 - WE ARE USING A VARIABLE OF TYPE void ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  22:08:50,412 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  22:08:50,412 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  22:08:50,412 - TYPE -> array <- AND -> array <- ON LINE 61
ERROR 22:08:50,412 - NOT THE SAME TYPE OF ARGUMENTS AT ARGUMENT (from Actuals) !2 ON LINE 61
INFO  22:08:50,412 - TYPE -> boolean <- AND -> boolean <- ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  22:08:50,412 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 61
INFO  22:08:50,412 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:08:50,412 - WE ARE USING A VARIABLE OF TYPE int ON LINE 62
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  22:08:50,412 - PRINT FUNCTION CALL IN USE! ON LINE 62
INFO  22:08:50,412 - CONST NUMBER 1 ON LINE 65
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:08:50,412 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:08:50,413 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,413 - WE ARE USING AN ARRAY OF TYPE int ON LINE 65
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:08:50,413 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,413 - WE ARE USING AN ARRAY OF TYPE int ON LINE 65
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:08:50,413 - PRINT FUNCTION CALL IN USE! ON LINE 65
INFO  22:08:50,413 - CONST NUMBER 0 ON LINE 66
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  22:08:50,413 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,413 - WE ARE USING AN ARRAY OF TYPE int ON LINE 66
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  22:08:50,413 - PRINT FUNCTION CALL IN USE! ON LINE 66
INFO  22:08:50,413 - CONST NUMBER 0 ON LINE 67
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:08:50,413 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,413 - USING ++ ON br ON LINE 67
INFO  22:08:50,413 - CONST NUMBER 0 ON LINE 68
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  22:08:50,413 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,413 - WE ARE USING AN ARRAY OF TYPE int ON LINE 68
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  22:08:50,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  22:08:50,413 - PRINT FUNCTION CALL IN USE! ON LINE 68
INFO  22:08:50,413 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:08:50,413 - BEGINNING OF AN ASSIGNEMENT! ON LINE 70
INFO  22:08:50,414 - CONST NUMBER 0 ON LINE 70
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:08:50,414 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,414 - WE ARE USING AN ARRAY OF TYPE int ON LINE 70
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:08:50,414 - CONST NUMBER 1 ON LINE 70
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:08:50,414 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,414 - WE ARE USING AN ARRAY OF TYPE int ON LINE 70
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:08:50,414 - USING INTEGERS IN TERM! ON LINE 70
INFO  22:08:50,414 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 70
INFO  22:08:50,414 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  22:08:50,414 - BEGINNING OF AN ASSIGNEMENT! ON LINE 71
INFO  22:08:50,414 - CONST NUMBER 2 ON LINE 71
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  22:08:50,414 - CONST NUMBER 0 ON LINE 71
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  22:08:50,414 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,414 - WE ARE USING AN ARRAY OF TYPE int ON LINE 71
INFO  22:08:50,414 - CONST NUMBER 2 ON LINE 71
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  22:08:50,414 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,414 - WE ARE USING AN ARRAY OF TYPE int ON LINE 71
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  22:08:50,414 - USING INTEGERS IN TERM! ON LINE 71
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  22:08:50,414 - USING INTEGERS IN TERM! ON LINE 71
INFO  22:08:50,414 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 71
INFO  22:08:50,414 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:08:50,414 - BEGINNING OF AN ASSIGNEMENT! ON LINE 72
INFO  22:08:50,414 - CONST NUMBER 1 ON LINE 72
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  22:08:50,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  22:08:50,414 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,414 - WE ARE USING AN ARRAY OF TYPE int ON LINE 72
INFO  22:08:50,415 - CONST NUMBER 2 ON LINE 72
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  22:08:50,415 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,415 - WE ARE USING AN ARRAY OF TYPE int ON LINE 72
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 12
INFO  22:08:50,415 - USING INTEGERS IN TERM! ON LINE 72
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  22:08:50,415 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 72
INFO  22:08:50,415 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:08:50,415 - BEGINNING OF AN ASSIGNEMENT! ON LINE 73
INFO  22:08:50,415 - CONST NUMBER 2 ON LINE 73
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  22:08:50,415 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,415 - WE ARE USING AN ARRAY OF TYPE int ON LINE 73
INFO  22:08:50,415 - CONST NUMBER 1 ON LINE 73
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  22:08:50,415 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:08:50,415 - WE ARE USING AN ARRAY OF TYPE int ON LINE 73
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 12
INFO  22:08:50,415 - USING INTEGERS IN TERM! ON LINE 73
INFO  22:08:50,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  22:08:50,415 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 73
INFO  22:08:50,415 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:08:50,415 - WE ARE USING A VARIABLE OF TYPE int ON LINE 75
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  22:08:50,416 - PRINT FUNCTION CALL IN USE! ON LINE 75
INFO  22:08:50,416 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  22:08:50,416 - WE ARE USING A VARIABLE OF TYPE int ON LINE 76
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 76
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 76
INFO  22:08:50,416 - PRINT FUNCTION CALL IN USE! ON LINE 76
INFO  22:08:50,416 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:08:50,416 - WE ARE USING A VARIABLE OF TYPE int ON LINE 76
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 76
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 76
INFO  22:08:50,416 - PRINT FUNCTION CALL IN USE! ON LINE 76
INFO  22:08:50,416 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:08:50,416 - WE ARE USING A VARIABLE OF TYPE int ON LINE 77
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  22:08:50,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  22:08:50,416 - PRINT FUNCTION CALL IN USE! ON LINE 77
INFO  22:08:50,416 - METHOD BODY ENDING!
INFO  22:08:50,416 - END OF DEFINING FUNCTION main
INFO  22:08:50,416 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  22:08:50,416 -  Deklarisanih promenljivih ima = 17
INFO  22:08:50,416 - ===================================
ERROR 22:08:50,417 - Parsiranje NIJE uspesno zavrseno!
