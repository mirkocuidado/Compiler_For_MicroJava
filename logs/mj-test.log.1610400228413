INFO  22:22:00,326 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  22:22:00,452 - #2 program
INFO  22:22:00,452 - #48 MJProgram
INFO  22:22:00,452 - #48 int
INFO  22:22:00,455 - #48 a
INFO  22:22:00,456 - #36 ,
INFO  22:22:00,457 - #48 b
INFO  22:22:00,457 - #36 ,
INFO  22:22:00,457 - #48 c
INFO  22:22:00,457 - #36 ,
INFO  22:22:00,458 - #48 d
INFO  22:22:00,458 - #38 ;
INFO  22:22:00,458 - #9 const
INFO  22:22:00,458 - #48 int
INFO  22:22:00,459 - #48 y
INFO  22:22:00,459 - #24 =
INFO  22:22:00,459 - #47 3
INFO  22:22:00,459 - #38 ;
INFO  22:22:00,460 - #40 {
INFO  22:22:00,460 - #48 int
INFO  22:22:00,461 - #48 k
INFO  22:22:00,461 - #42 (
INFO  22:22:00,470 - #48 int
INFO  22:22:00,470 - #48 a
INFO  22:22:00,472 - #36 ,
INFO  22:22:00,472 - #48 int
INFO  22:22:00,472 - #48 b
INFO  22:22:00,472 - #43 )
INFO  22:22:00,472 - #40 {
INFO  22:22:00,472 - #46 return
INFO  22:22:00,475 - #48 b
INFO  22:22:00,480 - #38 ;
INFO  22:22:00,483 - #41 }
INFO  22:22:00,483 - #48 char
INFO  22:22:00,485 - #48 s
INFO  22:22:00,487 - #42 (
INFO  22:22:00,487 - #43 )
INFO  22:22:00,487 - #40 {
INFO  22:22:00,487 - #46 return
INFO  22:22:00,487 - #49 c
INFO  22:22:00,487 - #38 ;
INFO  22:22:00,487 - #41 }
INFO  22:22:00,488 - #5 void
INFO  22:22:00,488 - #48 main
INFO  22:22:00,488 - #42 (
INFO  22:22:00,488 - #43 )
INFO  22:22:00,488 - #48 int
INFO  22:22:00,488 - #48 x
INFO  22:22:00,488 - #38 ;
INFO  22:22:00,488 - #48 char
INFO  22:22:00,490 - #48 z
INFO  22:22:00,490 - #38 ;
INFO  22:22:00,490 - #48 bool
INFO  22:22:00,490 - #48 p
INFO  22:22:00,490 - #38 ;
INFO  22:22:00,490 - #48 int
INFO  22:22:00,490 - #48 xx
INFO  22:22:00,490 - #44 [
INFO  22:22:00,490 - #45 ]
INFO  22:22:00,490 - #38 ;
INFO  22:22:00,490 - #40 {
INFO  22:22:00,490 - #18 print
INFO  22:22:00,490 - #42 (
INFO  22:22:00,490 - #47 2
INFO  22:22:00,490 - #43 )
INFO  22:22:00,491 - #38 ;
INFO  22:22:00,492 - #48 x
INFO  22:22:00,492 - #24 =
INFO  22:22:00,492 - #48 k
INFO  22:22:00,494 - #42 (
INFO  22:22:00,494 - #47 33
INFO  22:22:00,494 - #36 ,
INFO  22:22:00,494 - #48 k
INFO  22:22:00,496 - #42 (
INFO  22:22:00,496 - #47 12
INFO  22:22:00,496 - #36 ,
INFO  22:22:00,496 - #47 13
INFO  22:22:00,496 - #43 )
INFO  22:22:00,496 - #43 )
INFO  22:22:00,496 - #38 ;
INFO  22:22:00,497 - #18 print
INFO  22:22:00,497 - #42 (
INFO  22:22:00,497 - #48 x
INFO  22:22:00,497 - #43 )
INFO  22:22:00,497 - #38 ;
INFO  22:22:00,497 - #48 x
INFO  22:22:00,497 - #24 =
INFO  22:22:00,497 - #48 y
INFO  22:22:00,497 - #38 ;
INFO  22:22:00,497 - #18 print
INFO  22:22:00,497 - #42 (
INFO  22:22:00,497 - #48 x
INFO  22:22:00,497 - #43 )
INFO  22:22:00,497 - #38 ;
INFO  22:22:00,497 - #18 print
INFO  22:22:00,497 - #42 (
INFO  22:22:00,497 - #48 y
INFO  22:22:00,497 - #43 )
INFO  22:22:00,497 - #38 ;
INFO  22:22:00,497 - #48 b
INFO  22:22:00,497 - #24 =
INFO  22:22:00,498 - #47 4
INFO  22:22:00,498 - #38 ;
INFO  22:22:00,498 - #48 b
INFO  22:22:00,498 - #33 ++
INFO  22:22:00,498 - #38 ;
INFO  22:22:00,498 - #18 print
INFO  22:22:00,498 - #42 (
INFO  22:22:00,498 - #48 b
INFO  22:22:00,498 - #43 )
INFO  22:22:00,498 - #38 ;
INFO  22:22:00,499 - #48 z
INFO  22:22:00,499 - #24 =
INFO  22:22:00,499 - #49 m
INFO  22:22:00,499 - #38 ;
INFO  22:22:00,499 - #18 print
INFO  22:22:00,499 - #42 (
INFO  22:22:00,499 - #48 z
INFO  22:22:00,499 - #43 )
INFO  22:22:00,499 - #38 ;
INFO  22:22:00,499 - #48 z
INFO  22:22:00,499 - #24 =
INFO  22:22:00,499 - #48 s
INFO  22:22:00,500 - #42 (
INFO  22:22:00,500 - #43 )
INFO  22:22:00,501 - #38 ;
INFO  22:22:00,501 - #18 print
INFO  22:22:00,501 - #42 (
INFO  22:22:00,501 - #48 z
INFO  22:22:00,501 - #43 )
INFO  22:22:00,501 - #38 ;
INFO  22:22:00,501 - #46 return
INFO  22:22:00,501 - #38 ;
INFO  22:22:00,502 - #41 }
INFO  22:22:00,503 - #41 }
INFO  22:22:00,519 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           k
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassNoArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        HelperClass(
                        ) [HelperClass]
                        Designator(
                         b
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           char
          ) [Type]
         s
        ) [ReturnValueClassNoVoid]
        NoFormParam(
        ) [NoFormParam]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    CharConst(
                     c
                    ) [CharConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              NoVarDeclList(
              ) [NoVarDeclList]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   x
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 z
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             bool
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               p
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             xx
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                Statements(
                                  NoStmt(
                                  ) [NoStmt]
                                  PrintStmt(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             2
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                    NoCommaNumberClass(
                                    ) [NoCommaNumberClass]
                                  ) [PrintStmt]
                                ) [Statements]
                                Assignment(
                                  DesignatorStatementOptionsClassAssignExpression(
                                    Designator(
                                     x
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                    HelperClass(
                                    ) [HelperClass]
                                    AssignOpClass(
                                      AssignOperationClass(
                                      ) [AssignOperationClass]
                                    ) [AssignOpClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            FactorOptionalParams(
                                              HelperClass(
                                              ) [HelperClass]
                                              Designator(
                                               k
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                              Actuals(
                                                ActualParams(
                                                  ActualParam(
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            NumberConst(
                                                             33
                                                            ) [NumberConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                  ) [ActualParam]
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          FactorOptionalParams(
                                                            HelperClass(
                                                            ) [HelperClass]
                                                            Designator(
                                                             k
                                                              NoOptionalDesignatorClass(
                                                              ) [NoOptionalDesignatorClass]
                                                            ) [Designator]
                                                            Actuals(
                                                              ActualParams(
                                                                ActualParam(
                                                                  ClassOneClass(
                                                                    NormalExpressionClass(
                                                                      ExprFirstOptionClassWithMinus(
                                                                        TermClass(
                                                                          NumberConst(
                                                                           12
                                                                          ) [NumberConst]
                                                                          NoTermOptionalListClass(
                                                                          ) [NoTermOptionalListClass]
                                                                        ) [TermClass]
                                                                        NoExprOptionalListClass(
                                                                        ) [NoExprOptionalListClass]
                                                                      ) [ExprFirstOptionClassWithMinus]
                                                                    ) [NormalExpressionClass]
                                                                  ) [ClassOneClass]
                                                                ) [ActualParam]
                                                                ClassOneClass(
                                                                  NormalExpressionClass(
                                                                    ExprFirstOptionClassWithMinus(
                                                                      TermClass(
                                                                        NumberConst(
                                                                         13
                                                                        ) [NumberConst]
                                                                        NoTermOptionalListClass(
                                                                        ) [NoTermOptionalListClass]
                                                                      ) [TermClass]
                                                                      NoExprOptionalListClass(
                                                                      ) [NoExprOptionalListClass]
                                                                    ) [ExprFirstOptionClassWithMinus]
                                                                  ) [NormalExpressionClass]
                                                                ) [ClassOneClass]
                                                              ) [ActualParams]
                                                            ) [Actuals]
                                                          ) [FactorOptionalParams]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [ActualParams]
                                              ) [Actuals]
                                            ) [FactorOptionalParams]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [DesignatorStatementOptionsClassAssignExpression]
                                ) [Assignment]
                              ) [Statements]
                              PrintStmt(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          HelperClass(
                                          ) [HelperClass]
                                          Designator(
                                           x
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                                NoCommaNumberClass(
                                ) [NoCommaNumberClass]
                              ) [PrintStmt]
                            ) [Statements]
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                 x
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                HelperClass(
                                ) [HelperClass]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          HelperClass(
                                          ) [HelperClass]
                                          Designator(
                                           y
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [Statements]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      HelperClass(
                                      ) [HelperClass]
                                      Designator(
                                       x
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    HelperClass(
                                    ) [HelperClass]
                                    Designator(
                                     y
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                           b
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          HelperClass(
                          ) [HelperClass]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   4
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementPlusPlus(
                        Designator(
                         b
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorStatementPlusPlus]
                    ) [Assignment]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              HelperClass(
                              ) [HelperClass]
                              Designator(
                               b
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                     z
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    HelperClass(
                    ) [HelperClass]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            CharConst(
                             m
                            ) [CharConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          HelperClass(
                          ) [HelperClass]
                          Designator(
                           z
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                 z
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                HelperClass(
                ) [HelperClass]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          HelperClass(
                          ) [HelperClass]
                          Designator(
                           s
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          NoActuals(
                          ) [NoActuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      HelperClass(
                      ) [HelperClass]
                      Designator(
                       z
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        ReturnNoExpr(
        ) [ReturnNoExpr]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  22:22:00,521 - ===================================
INFO  22:22:00,534 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  22:22:00,534 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  22:22:00,534 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  22:22:00,534 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  22:22:00,534 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  22:22:00,535 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:22:00,535 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  22:22:00,535 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  22:22:00,536 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  22:22:00,536 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  22:22:00,536 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  22:22:00,536 - METHOD BODY STARTING!
INFO  22:22:00,536 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:22:00,536 - WE ARE USING A VARIABLE OF TYPE int ON LINE 23
INFO  22:22:00,537 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  22:22:00,537 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  22:22:00,537 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  22:22:00,537 - METHOD BODY ENDING!
INFO  22:22:00,537 - END OF DEFINING FUNCTION k
INFO  22:22:00,538 - FUNCTION s WITH RETURN VALUE OF TYPE char ON LINE 9
INFO  22:22:00,538 - METHOD BODY STARTING!
INFO  22:22:00,538 - CONST CHAR c ON LINE 9
INFO  22:22:00,538 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:22:00,538 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:22:00,538 - SUCCESSFUL RETURN! TYPES: char AND char ! ON LINE 9
INFO  22:22:00,538 - METHOD BODY ENDING!
INFO  22:22:00,539 - END OF DEFINING FUNCTION s
INFO  22:22:00,539 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  22:22:00,542 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  22:22:00,542 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  22:22:00,543 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  22:22:00,543 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  22:22:00,543 - VARIABLE p IS BEING DEFINED! ON LINE 14
INFO  22:22:00,543 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 14
INFO  22:22:00,543 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  22:22:00,544 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 15
INFO  22:22:00,544 - METHOD BODY STARTING!
INFO  22:22:00,544 - CONST NUMBER 2 ON LINE 19
INFO  22:22:00,544 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  22:22:00,544 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  22:22:00,544 - PRINT FUNCTION CALL IN USE! ON LINE 19
INFO  22:22:00,544 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:22:00,545 - BEGINNING OF AN ASSIGNEMENT! ON LINE 21
INFO  22:22:00,545 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  22:22:00,545 - CONST NUMBER 33 ON LINE 21
INFO  22:22:00,545 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:22:00,545 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:22:00,545 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  22:22:00,545 - CONST NUMBER 12 ON LINE 21
INFO  22:22:00,545 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:22:00,545 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:22:00,545 - CONST NUMBER 13 ON LINE 21
INFO  22:22:00,546 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:22:00,546 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:22:00,546 - TYPE -> int <- AND -> int <- ON LINE 21
INFO  22:22:00,546 - TYPE -> int <- AND -> int <- ON LINE 21
INFO  22:22:00,546 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:22:00,546 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:22:00,546 - TYPE -> int <- AND -> int <- ON LINE 21
INFO  22:22:00,546 - TYPE -> int <- AND -> int <- ON LINE 21
INFO  22:22:00,546 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  22:22:00,548 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  22:22:00,548 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 21
INFO  22:22:00,548 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:22:00,548 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:22:00,548 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,548 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,548 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:22:00,548 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:22:00,548 - BEGINNING OF AN ASSIGNEMENT! ON LINE 24
INFO  22:22:00,549 - CURRENT VARIABLE IN USE IS y AND IT IS OF TYPE int
INFO  22:22:00,549 - WE ARE USING A VARIABLE OF TYPE int ON LINE 4
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  22:22:00,549 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 24
INFO  22:22:00,549 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:22:00,549 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,549 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:22:00,549 - CURRENT VARIABLE IN USE IS y AND IT IS OF TYPE int
INFO  22:22:00,549 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,549 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:22:00,549 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:22:00,549 - BEGINNING OF AN ASSIGNEMENT! ON LINE 28
INFO  22:22:00,549 - CONST NUMBER 4 ON LINE 28
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  22:22:00,549 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 28
INFO  22:22:00,549 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:22:00,549 - USING ++ ON b ON LINE 29
INFO  22:22:00,549 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:22:00,549 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,549 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:22:00,549 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  22:22:00,549 - BEGINNING OF AN ASSIGNEMENT! ON LINE 32
INFO  22:22:00,549 - CONST CHAR m ON LINE 32
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:22:00,549 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:22:00,550 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 32
INFO  22:22:00,550 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  22:22:00,550 - WE ARE USING A VARIABLE OF TYPE char ON LINE 7
INFO  22:22:00,550 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,550 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,550 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:22:00,550 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  22:22:00,550 - BEGINNING OF AN ASSIGNEMENT! ON LINE 35
INFO  22:22:00,550 - CURRENT VARIABLE IN USE IS s AND IT IS OF TYPE char
INFO  22:22:00,550 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 3
INFO  22:22:00,550 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 3
INFO  22:22:00,550 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 35
INFO  22:22:00,550 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  22:22:00,550 - WE ARE USING A VARIABLE OF TYPE char ON LINE 7
INFO  22:22:00,551 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,551 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:22:00,551 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:22:00,551 - return; AND THE FUNCTION IS VOID!
INFO  22:22:00,551 - METHOD BODY ENDING!
INFO  22:22:00,551 - END OF DEFINING FUNCTION main
INFO  22:22:00,552 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  22:22:00,552 -  Deklarisanih promenljivih ima = 8
INFO  22:22:00,552 - ===================================
INFO  22:22:00,561 - Parsiranje uspesno zavrseno!
