INFO  22:00:56,445 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  22:00:56,518 - #2 program
INFO  22:00:56,518 - #43 MJProgram
INFO  22:00:56,519 - #43 int
INFO  22:00:56,520 - #43 a
INFO  22:00:56,520 - #31 ,
INFO  22:00:56,520 - #43 b
INFO  22:00:56,520 - #31 ,
INFO  22:00:56,521 - #43 c
INFO  22:00:56,521 - #31 ,
INFO  22:00:56,521 - #43 d
INFO  22:00:56,521 - #33 ;
INFO  22:00:56,521 - #9 const
INFO  22:00:56,521 - #43 int
INFO  22:00:56,521 - #43 term
INFO  22:00:56,522 - #19 =
INFO  22:00:56,522 - #42 0
INFO  22:00:56,522 - #33 ;
INFO  22:00:56,522 - #9 const
INFO  22:00:56,522 - #43 int
INFO  22:00:56,523 - #43 y
INFO  22:00:56,523 - #19 =
INFO  22:00:56,531 - #42 3
INFO  22:00:56,531 - #33 ;
INFO  22:00:56,531 - #35 {
INFO  22:00:56,531 - #43 int
INFO  22:00:56,532 - #43 k
INFO  22:00:56,532 - #37 (
INFO  22:00:56,532 - #43 int
INFO  22:00:56,532 - #43 a
INFO  22:00:56,532 - #39 [
INFO  22:00:56,532 - #40 ]
INFO  22:00:56,533 - #31 ,
INFO  22:00:56,533 - #43 int
INFO  22:00:56,533 - #43 b
INFO  22:00:56,533 - #38 )
INFO  22:00:56,533 - #35 {
INFO  22:00:56,534 - #41 return
INFO  22:00:56,535 - #43 a
INFO  22:00:56,536 - #39 [
INFO  22:00:56,537 - #43 b
INFO  22:00:56,538 - #40 ]
INFO  22:00:56,540 - #33 ;
INFO  22:00:56,541 - #36 }
INFO  22:00:56,541 - #5 void
INFO  22:00:56,542 - #43 main
INFO  22:00:56,543 - #37 (
INFO  22:00:56,543 - #38 )
INFO  22:00:56,543 - #43 int
INFO  22:00:56,544 - #43 x
INFO  22:00:56,544 - #33 ;
INFO  22:00:56,544 - #43 bool
INFO  22:00:56,544 - #43 p
INFO  22:00:56,544 - #33 ;
INFO  22:00:56,544 - #43 bool
INFO  22:00:56,544 - #43 r
INFO  22:00:56,544 - #33 ;
INFO  22:00:56,544 - #43 bool
INFO  22:00:56,544 - #43 q
INFO  22:00:56,544 - #33 ;
INFO  22:00:56,544 - #43 int
INFO  22:00:56,544 - #43 br
INFO  22:00:56,544 - #39 [
INFO  22:00:56,545 - #40 ]
INFO  22:00:56,545 - #33 ;
INFO  22:00:56,545 - #43 int
INFO  22:00:56,545 - #43 indexes
INFO  22:00:56,545 - #39 [
INFO  22:00:56,545 - #40 ]
INFO  22:00:56,545 - #33 ;
INFO  22:00:56,545 - #43 int
INFO  22:00:56,545 - #43 dd
INFO  22:00:56,545 - #33 ;
INFO  22:00:56,545 - #43 int
INFO  22:00:56,545 - #43 ee
INFO  22:00:56,545 - #33 ;
INFO  22:00:56,545 - #43 int
INFO  22:00:56,545 - #43 ff
INFO  22:00:56,545 - #33 ;
INFO  22:00:56,546 - #43 int
INFO  22:00:56,546 - #43 gg
INFO  22:00:56,546 - #33 ;
INFO  22:00:56,546 - #43 char
INFO  22:00:56,546 - #43 hh
INFO  22:00:56,546 - #33 ;
INFO  22:00:56,546 - #43 int
INFO  22:00:56,546 - #43 ii
INFO  22:00:56,546 - #33 ;
INFO  22:00:56,546 - #35 {
INFO  22:00:56,547 - #43 x
INFO  22:00:56,547 - #19 =
INFO  22:00:56,547 - #42 0
INFO  22:00:56,548 - #33 ;
INFO  22:00:56,548 - #43 br
INFO  22:00:56,548 - #19 =
INFO  22:00:56,549 - #16 new
INFO  22:00:56,549 - #43 int
INFO  22:00:56,549 - #39 [
INFO  22:00:56,549 - #42 10
INFO  22:00:56,549 - #40 ]
INFO  22:00:56,549 - #33 ;
INFO  22:00:56,549 - #43 br
INFO  22:00:56,549 - #39 [
INFO  22:00:56,549 - #43 x
INFO  22:00:56,549 - #40 ]
INFO  22:00:56,549 - #19 =
INFO  22:00:56,550 - #42 1
INFO  22:00:56,550 - #33 ;
INFO  22:00:56,550 - #43 x
INFO  22:00:56,550 - #28 ++
INFO  22:00:56,550 - #33 ;
INFO  22:00:56,550 - #43 br
INFO  22:00:56,550 - #39 [
INFO  22:00:56,550 - #43 x
INFO  22:00:56,550 - #40 ]
INFO  22:00:56,550 - #19 =
INFO  22:00:56,550 - #42 2
INFO  22:00:56,550 - #33 ;
INFO  22:00:56,551 - #43 x
INFO  22:00:56,551 - #28 ++
INFO  22:00:56,551 - #33 ;
INFO  22:00:56,551 - #43 br
INFO  22:00:56,551 - #39 [
INFO  22:00:56,551 - #43 x
INFO  22:00:56,552 - #40 ]
INFO  22:00:56,552 - #19 =
INFO  22:00:56,552 - #42 3
INFO  22:00:56,552 - #33 ;
INFO  22:00:56,552 - #18 print
INFO  22:00:56,552 - #37 (
INFO  22:00:56,552 - #43 br
INFO  22:00:56,552 - #39 [
INFO  22:00:56,552 - #42 0
INFO  22:00:56,552 - #40 ]
INFO  22:00:56,552 - #38 )
INFO  22:00:56,553 - #33 ;
INFO  22:00:56,554 - #18 print
INFO  22:00:56,554 - #37 (
INFO  22:00:56,554 - #43 br
INFO  22:00:56,554 - #39 [
INFO  22:00:56,554 - #42 1
INFO  22:00:56,554 - #40 ]
INFO  22:00:56,554 - #38 )
INFO  22:00:56,554 - #33 ;
INFO  22:00:56,554 - #18 print
INFO  22:00:56,554 - #37 (
INFO  22:00:56,554 - #43 br
INFO  22:00:56,554 - #39 [
INFO  22:00:56,555 - #42 2
INFO  22:00:56,555 - #40 ]
INFO  22:00:56,555 - #38 )
INFO  22:00:56,555 - #33 ;
INFO  22:00:56,555 - #43 ii
INFO  22:00:56,555 - #19 =
INFO  22:00:56,555 - #42 2
INFO  22:00:56,555 - #33 ;
INFO  22:00:56,555 - #14 if
INFO  22:00:56,555 - #37 (
INFO  22:00:56,555 - #43 x
INFO  22:00:56,555 - #20 ==
INFO  22:00:56,555 - #43 ii
INFO  22:00:56,557 - #38 )
INFO  22:00:56,559 - #43 p
INFO  22:00:56,559 - #19 =
INFO  22:00:56,559 - #45 false
INFO  22:00:56,560 - #33 ;
INFO  22:00:56,560 - #15 else
INFO  22:00:56,561 - #43 p
INFO  22:00:56,561 - #19 =
INFO  22:00:56,562 - #45 true
INFO  22:00:56,562 - #33 ;
INFO  22:00:56,562 - #43 x
INFO  22:00:56,562 - #19 =
INFO  22:00:56,562 - #43 p
INFO  22:00:56,562 - #34 ?
INFO  22:00:56,562 - #42 10
INFO  22:00:56,563 - #32 :
INFO  22:00:56,563 - #42 20
INFO  22:00:56,564 - #33 ;
INFO  22:00:56,564 - #43 p
INFO  22:00:56,564 - #19 =
INFO  22:00:56,564 - #45 false
INFO  22:00:56,564 - #33 ;
INFO  22:00:56,564 - #12 do
INFO  22:00:56,564 - #35 {
INFO  22:00:56,565 - #18 print
INFO  22:00:56,565 - #37 (
INFO  22:00:56,565 - #42 0
INFO  22:00:56,565 - #38 )
INFO  22:00:56,566 - #33 ;
INFO  22:00:56,566 - #36 }
INFO  22:00:56,566 - #13 while
INFO  22:00:56,566 - #37 (
INFO  22:00:56,566 - #43 p
INFO  22:00:56,567 - #38 )
INFO  22:00:56,568 - #33 ;
INFO  22:00:56,569 - #18 print
INFO  22:00:56,569 - #37 (
INFO  22:00:56,569 - #44 u
INFO  22:00:56,569 - #38 )
INFO  22:00:56,569 - #33 ;
INFO  22:00:56,569 - #18 print
INFO  22:00:56,569 - #37 (
INFO  22:00:56,569 - #44 n
INFO  22:00:56,569 - #38 )
INFO  22:00:56,569 - #33 ;
INFO  22:00:56,570 - #18 print
INFO  22:00:56,570 - #37 (
INFO  22:00:56,570 - #44 e
INFO  22:00:56,570 - #38 )
INFO  22:00:56,570 - #33 ;
INFO  22:00:56,570 - #18 print
INFO  22:00:56,570 - #37 (
INFO  22:00:56,570 - #44 s
INFO  22:00:56,570 - #38 )
INFO  22:00:56,570 - #33 ;
INFO  22:00:56,570 - #18 print
INFO  22:00:56,570 - #37 (
INFO  22:00:56,570 - #44 i
INFO  22:00:56,570 - #38 )
INFO  22:00:56,570 - #33 ;
INFO  22:00:56,570 - #17 read
INFO  22:00:56,570 - #37 (
INFO  22:00:56,570 - #43 hh
INFO  22:00:56,570 - #38 )
INFO  22:00:56,570 - #33 ;
INFO  22:00:56,570 - #18 print
INFO  22:00:56,571 - #37 (
INFO  22:00:56,571 - #43 eol
INFO  22:00:56,571 - #38 )
INFO  22:00:56,571 - #33 ;
INFO  22:00:56,571 - #18 print
INFO  22:00:56,571 - #37 (
INFO  22:00:56,571 - #43 hh
INFO  22:00:56,571 - #38 )
INFO  22:00:56,571 - #33 ;
INFO  22:00:56,572 - #17 read
INFO  22:00:56,572 - #37 (
INFO  22:00:56,572 - #43 x
INFO  22:00:56,572 - #38 )
INFO  22:00:56,572 - #33 ;
INFO  22:00:56,572 - #18 print
INFO  22:00:56,572 - #37 (
INFO  22:00:56,572 - #43 eol
INFO  22:00:56,572 - #38 )
INFO  22:00:56,572 - #33 ;
INFO  22:00:56,572 - #18 print
INFO  22:00:56,572 - #37 (
INFO  22:00:56,572 - #43 x
INFO  22:00:56,572 - #38 )
INFO  22:00:56,573 - #33 ;
INFO  22:00:56,574 - #36 }
INFO  22:00:56,574 - #36 }
INFO  22:00:56,587 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         a
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       b
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          VarDeclListClass(
                            VarDeclListClass(
                              NoVarDeclList(
                              ) [NoVarDeclList]
                              VarDeclClass(
                                Type(
                                 int
                                ) [Type]
                                VarListSingle(
                                  VarClassNoArray(
                                   x
                                  ) [VarClassNoArray]
                                ) [VarListSingle]
                              ) [VarDeclClass]
                            ) [VarDeclListClass]
                            VarDeclClass(
                              Type(
                               bool
                              ) [Type]
                              VarListSingle(
                                VarClassNoArray(
                                 p
                                ) [VarClassNoArray]
                              ) [VarListSingle]
                            ) [VarDeclClass]
                          ) [VarDeclListClass]
                          VarDeclClass(
                            Type(
                             bool
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               r
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             q
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassArray(
                           br
                          ) [VarClassArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         indexes
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                Statements(
                                  Statements(
                                    Statements(
                                      Statements(
                                        Statements(
                                          Statements(
                                            Statements(
                                              Statements(
                                                Statements(
                                                  Statements(
                                                    Statements(
                                                      Statements(
                                                        Statements(
                                                          NoStmt(
                                                          ) [NoStmt]
                                                          Assignment(
                                                            DesignatorStatementOptionsClassAssignExpression(
                                                              Designator(
                                                                DesigIdent(
                                                                 x
                                                                ) [DesigIdent]
                                                                NoOptionalDesignatorClass(
                                                                ) [NoOptionalDesignatorClass]
                                                              ) [Designator]
                                                              AssignOpClass(
                                                                AssignOperationClass(
                                                                ) [AssignOperationClass]
                                                              ) [AssignOpClass]
                                                              ClassOneClass(
                                                                NormalExpressionClass(
                                                                  ExprFirstOptionClassWithMinus(
                                                                    TermClass(
                                                                      NumberConst(
                                                                       0
                                                                      ) [NumberConst]
                                                                      NoTermOptionalListClass(
                                                                      ) [NoTermOptionalListClass]
                                                                    ) [TermClass]
                                                                    NoExprOptionalListClass(
                                                                    ) [NoExprOptionalListClass]
                                                                  ) [ExprFirstOptionClassWithMinus]
                                                                ) [NormalExpressionClass]
                                                              ) [ClassOneClass]
                                                            ) [DesignatorStatementOptionsClassAssignExpression]
                                                          ) [Assignment]
                                                        ) [Statements]
                                                        Assignment(
                                                          DesignatorStatementOptionsClassAssignExpression(
                                                            Designator(
                                                              DesigIdent(
                                                               br
                                                              ) [DesigIdent]
                                                              NoOptionalDesignatorClass(
                                                              ) [NoOptionalDesignatorClass]
                                                            ) [Designator]
                                                            AssignOpClass(
                                                              AssignOperationClass(
                                                              ) [AssignOperationClass]
                                                            ) [AssignOpClass]
                                                            ClassOneClass(
                                                              NormalExpressionClass(
                                                                ExprFirstOptionClassWithMinus(
                                                                  TermClass(
                                                                    NewFactorClass(
                                                                      Type(
                                                                       int
                                                                      ) [Type]
                                                                      FactorOptionalSecondClass(
                                                                        ClassOneClass(
                                                                          NormalExpressionClass(
                                                                            ExprFirstOptionClassWithMinus(
                                                                              TermClass(
                                                                                NumberConst(
                                                                                 10
                                                                                ) [NumberConst]
                                                                                NoTermOptionalListClass(
                                                                                ) [NoTermOptionalListClass]
                                                                              ) [TermClass]
                                                                              NoExprOptionalListClass(
                                                                              ) [NoExprOptionalListClass]
                                                                            ) [ExprFirstOptionClassWithMinus]
                                                                          ) [NormalExpressionClass]
                                                                        ) [ClassOneClass]
                                                                      ) [FactorOptionalSecondClass]
                                                                    ) [NewFactorClass]
                                                                    NoTermOptionalListClass(
                                                                    ) [NoTermOptionalListClass]
                                                                  ) [TermClass]
                                                                  NoExprOptionalListClass(
                                                                  ) [NoExprOptionalListClass]
                                                                ) [ExprFirstOptionClassWithMinus]
                                                              ) [NormalExpressionClass]
                                                            ) [ClassOneClass]
                                                          ) [DesignatorStatementOptionsClassAssignExpression]
                                                        ) [Assignment]
                                                      ) [Statements]
                                                      Assignment(
                                                        DesignatorStatementOptionsClassAssignExpression(
                                                          Designator(
                                                            DesigIdent(
                                                             br
                                                            ) [DesigIdent]
                                                            OptionalDesignatorArray(
                                                              HelperClass(
                                                              ) [HelperClass]
                                                              LSquareClass(
                                                              ) [LSquareClass]
                                                              ClassOneClass(
                                                                NormalExpressionClass(
                                                                  ExprFirstOptionClassWithMinus(
                                                                    TermClass(
                                                                      DesignatorClass(
                                                                        Designator(
                                                                          DesigIdent(
                                                                           x
                                                                          ) [DesigIdent]
                                                                          NoOptionalDesignatorClass(
                                                                          ) [NoOptionalDesignatorClass]
                                                                        ) [Designator]
                                                                      ) [DesignatorClass]
                                                                      NoTermOptionalListClass(
                                                                      ) [NoTermOptionalListClass]
                                                                    ) [TermClass]
                                                                    NoExprOptionalListClass(
                                                                    ) [NoExprOptionalListClass]
                                                                  ) [ExprFirstOptionClassWithMinus]
                                                                ) [NormalExpressionClass]
                                                              ) [ClassOneClass]
                                                            ) [OptionalDesignatorArray]
                                                          ) [Designator]
                                                          AssignOpClass(
                                                            AssignOperationClass(
                                                            ) [AssignOperationClass]
                                                          ) [AssignOpClass]
                                                          ClassOneClass(
                                                            NormalExpressionClass(
                                                              ExprFirstOptionClassWithMinus(
                                                                TermClass(
                                                                  NumberConst(
                                                                   1
                                                                  ) [NumberConst]
                                                                  NoTermOptionalListClass(
                                                                  ) [NoTermOptionalListClass]
                                                                ) [TermClass]
                                                                NoExprOptionalListClass(
                                                                ) [NoExprOptionalListClass]
                                                              ) [ExprFirstOptionClassWithMinus]
                                                            ) [NormalExpressionClass]
                                                          ) [ClassOneClass]
                                                        ) [DesignatorStatementOptionsClassAssignExpression]
                                                      ) [Assignment]
                                                    ) [Statements]
                                                    Assignment(
                                                      DesignatorStatementPlusPlus(
                                                        Designator(
                                                          DesigIdent(
                                                           x
                                                          ) [DesigIdent]
                                                          NoOptionalDesignatorClass(
                                                          ) [NoOptionalDesignatorClass]
                                                        ) [Designator]
                                                      ) [DesignatorStatementPlusPlus]
                                                    ) [Assignment]
                                                  ) [Statements]
                                                  Assignment(
                                                    DesignatorStatementOptionsClassAssignExpression(
                                                      Designator(
                                                        DesigIdent(
                                                         br
                                                        ) [DesigIdent]
                                                        OptionalDesignatorArray(
                                                          HelperClass(
                                                          ) [HelperClass]
                                                          LSquareClass(
                                                          ) [LSquareClass]
                                                          ClassOneClass(
                                                            NormalExpressionClass(
                                                              ExprFirstOptionClassWithMinus(
                                                                TermClass(
                                                                  DesignatorClass(
                                                                    Designator(
                                                                      DesigIdent(
                                                                       x
                                                                      ) [DesigIdent]
                                                                      NoOptionalDesignatorClass(
                                                                      ) [NoOptionalDesignatorClass]
                                                                    ) [Designator]
                                                                  ) [DesignatorClass]
                                                                  NoTermOptionalListClass(
                                                                  ) [NoTermOptionalListClass]
                                                                ) [TermClass]
                                                                NoExprOptionalListClass(
                                                                ) [NoExprOptionalListClass]
                                                              ) [ExprFirstOptionClassWithMinus]
                                                            ) [NormalExpressionClass]
                                                          ) [ClassOneClass]
                                                        ) [OptionalDesignatorArray]
                                                      ) [Designator]
                                                      AssignOpClass(
                                                        AssignOperationClass(
                                                        ) [AssignOperationClass]
                                                      ) [AssignOpClass]
                                                      ClassOneClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              NumberConst(
                                                               2
                                                              ) [NumberConst]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [ClassOneClass]
                                                    ) [DesignatorStatementOptionsClassAssignExpression]
                                                  ) [Assignment]
                                                ) [Statements]
                                                Assignment(
                                                  DesignatorStatementPlusPlus(
                                                    Designator(
                                                      DesigIdent(
                                                       x
                                                      ) [DesigIdent]
                                                      NoOptionalDesignatorClass(
                                                      ) [NoOptionalDesignatorClass]
                                                    ) [Designator]
                                                  ) [DesignatorStatementPlusPlus]
                                                ) [Assignment]
                                              ) [Statements]
                                              Assignment(
                                                DesignatorStatementOptionsClassAssignExpression(
                                                  Designator(
                                                    DesigIdent(
                                                     br
                                                    ) [DesigIdent]
                                                    OptionalDesignatorArray(
                                                      HelperClass(
                                                      ) [HelperClass]
                                                      LSquareClass(
                                                      ) [LSquareClass]
                                                      ClassOneClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              DesignatorClass(
                                                                Designator(
                                                                  DesigIdent(
                                                                   x
                                                                  ) [DesigIdent]
                                                                  NoOptionalDesignatorClass(
                                                                  ) [NoOptionalDesignatorClass]
                                                                ) [Designator]
                                                              ) [DesignatorClass]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [ClassOneClass]
                                                    ) [OptionalDesignatorArray]
                                                  ) [Designator]
                                                  AssignOpClass(
                                                    AssignOperationClass(
                                                    ) [AssignOperationClass]
                                                  ) [AssignOpClass]
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          NumberConst(
                                                           3
                                                          ) [NumberConst]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [DesignatorStatementOptionsClassAssignExpression]
                                              ) [Assignment]
                                            ) [Statements]
                                            PrintStmt(
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           br
                                                          ) [DesigIdent]
                                                          OptionalDesignatorArray(
                                                            HelperClass(
                                                            ) [HelperClass]
                                                            LSquareClass(
                                                            ) [LSquareClass]
                                                            ClassOneClass(
                                                              NormalExpressionClass(
                                                                ExprFirstOptionClassWithMinus(
                                                                  TermClass(
                                                                    NumberConst(
                                                                     0
                                                                    ) [NumberConst]
                                                                    NoTermOptionalListClass(
                                                                    ) [NoTermOptionalListClass]
                                                                  ) [TermClass]
                                                                  NoExprOptionalListClass(
                                                                  ) [NoExprOptionalListClass]
                                                                ) [ExprFirstOptionClassWithMinus]
                                                              ) [NormalExpressionClass]
                                                            ) [ClassOneClass]
                                                          ) [OptionalDesignatorArray]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                              NoCommaNumberClass(
                                              ) [NoCommaNumberClass]
                                            ) [PrintStmt]
                                          ) [Statements]
                                          PrintStmt(
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    DesignatorClass(
                                                      Designator(
                                                        DesigIdent(
                                                         br
                                                        ) [DesigIdent]
                                                        OptionalDesignatorArray(
                                                          HelperClass(
                                                          ) [HelperClass]
                                                          LSquareClass(
                                                          ) [LSquareClass]
                                                          ClassOneClass(
                                                            NormalExpressionClass(
                                                              ExprFirstOptionClassWithMinus(
                                                                TermClass(
                                                                  NumberConst(
                                                                   1
                                                                  ) [NumberConst]
                                                                  NoTermOptionalListClass(
                                                                  ) [NoTermOptionalListClass]
                                                                ) [TermClass]
                                                                NoExprOptionalListClass(
                                                                ) [NoExprOptionalListClass]
                                                              ) [ExprFirstOptionClassWithMinus]
                                                            ) [NormalExpressionClass]
                                                          ) [ClassOneClass]
                                                        ) [OptionalDesignatorArray]
                                                      ) [Designator]
                                                    ) [DesignatorClass]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                            NoCommaNumberClass(
                                            ) [NoCommaNumberClass]
                                          ) [PrintStmt]
                                        ) [Statements]
                                        PrintStmt(
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  DesignatorClass(
                                                    Designator(
                                                      DesigIdent(
                                                       br
                                                      ) [DesigIdent]
                                                      OptionalDesignatorArray(
                                                        HelperClass(
                                                        ) [HelperClass]
                                                        LSquareClass(
                                                        ) [LSquareClass]
                                                        ClassOneClass(
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                NumberConst(
                                                                 2
                                                                ) [NumberConst]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                        ) [ClassOneClass]
                                                      ) [OptionalDesignatorArray]
                                                    ) [Designator]
                                                  ) [DesignatorClass]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                          NoCommaNumberClass(
                                          ) [NoCommaNumberClass]
                                        ) [PrintStmt]
                                      ) [Statements]
                                      Assignment(
                                        DesignatorStatementOptionsClassAssignExpression(
                                          Designator(
                                            DesigIdent(
                                             ii
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                          AssignOpClass(
                                            AssignOperationClass(
                                            ) [AssignOperationClass]
                                          ) [AssignOpClass]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   2
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [DesignatorStatementOptionsClassAssignExpression]
                                      ) [Assignment]
                                    ) [Statements]
                                    IfStatement(
                                      IfConditionNoError(
                                        ConditionClass(
                                          CondTermClass(
                                            CondFactClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    DesignatorClass(
                                                      Designator(
                                                        DesigIdent(
                                                         x
                                                        ) [DesigIdent]
                                                        NoOptionalDesignatorClass(
                                                        ) [NoOptionalDesignatorClass]
                                                      ) [Designator]
                                                    ) [DesignatorClass]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                              CondFactOptionalClass(
                                                RelationOperationClassEqualComparation(
                                                ) [RelationOperationClassEqualComparation]
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           ii
                                                          ) [DesigIdent]
                                                          NoOptionalDesignatorClass(
                                                          ) [NoOptionalDesignatorClass]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [CondFactOptionalClass]
                                            ) [CondFactClass]
                                            NoCondTermOptionalClass(
                                            ) [NoCondTermOptionalClass]
                                          ) [CondTermClass]
                                          NoConditionOptionalClass(
                                          ) [NoConditionOptionalClass]
                                        ) [ConditionClass]
                                      ) [IfConditionNoError]
                                      Assignment(
                                        DesignatorStatementOptionsClassAssignExpression(
                                          Designator(
                                            DesigIdent(
                                             p
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                          AssignOpClass(
                                            AssignOperationClass(
                                            ) [AssignOperationClass]
                                          ) [AssignOpClass]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  BooleanClassConstFactor(
                                                   false
                                                  ) [BooleanClassConstFactor]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [DesignatorStatementOptionsClassAssignExpression]
                                      ) [Assignment]
                                      Empty(
                                      ) [Empty]
                                      YesOptionalStatement(
                                        Assignment(
                                          DesignatorStatementOptionsClassAssignExpression(
                                            Designator(
                                              DesigIdent(
                                               p
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                            AssignOpClass(
                                              AssignOperationClass(
                                              ) [AssignOperationClass]
                                            ) [AssignOpClass]
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    BooleanClassConstFactor(
                                                     true
                                                    ) [BooleanClassConstFactor]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [DesignatorStatementOptionsClassAssignExpression]
                                        ) [Assignment]
                                      ) [YesOptionalStatement]
                                    ) [IfStatement]
                                  ) [Statements]
                                  Assignment(
                                    DesignatorStatementOptionsClassAssignExpression(
                                      Designator(
                                        DesigIdent(
                                         x
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                      AssignOpClass(
                                        AssignOperationClass(
                                        ) [AssignOperationClass]
                                      ) [AssignOpClass]
                                      ClassTwoClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                  DesigIdent(
                                                   p
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                        TernaryClass(
                                        ) [TernaryClass]
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               10
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                        ColonClass(
                                        ) [ColonClass]
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               20
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassTwoClass]
                                    ) [DesignatorStatementOptionsClassAssignExpression]
                                  ) [Assignment]
                                ) [Statements]
                                Assignment(
                                  DesignatorStatementOptionsClassAssignExpression(
                                    Designator(
                                      DesigIdent(
                                       p
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                    AssignOpClass(
                                      AssignOperationClass(
                                      ) [AssignOperationClass]
                                    ) [AssignOpClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            BooleanClassConstFactor(
                                             false
                                            ) [BooleanClassConstFactor]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [DesignatorStatementOptionsClassAssignExpression]
                                ) [Assignment]
                              ) [Statements]
                              DoWhileStatement(
                                DoClass(
                                ) [DoClass]
                                StatementStatement(
                                  Statements(
                                    NoStmt(
                                    ) [NoStmt]
                                    PrintStmt(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                      NoCommaNumberClass(
                                      ) [NoCommaNumberClass]
                                    ) [PrintStmt]
                                  ) [Statements]
                                ) [StatementStatement]
                                LParenClass(
                                ) [LParenClass]
                                ConditionClass(
                                  CondTermClass(
                                    CondFactClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 p
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                      NoCondFactOptionalClass(
                                      ) [NoCondFactOptionalClass]
                                    ) [CondFactClass]
                                    NoCondTermOptionalClass(
                                    ) [NoCondTermOptionalClass]
                                  ) [CondTermClass]
                                  NoConditionOptionalClass(
                                  ) [NoConditionOptionalClass]
                                ) [ConditionClass]
                                RParenClass(
                                ) [RParenClass]
                              ) [DoWhileStatement]
                            ) [Statements]
                            PrintStmt(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      CharConst(
                                       u
                                      ) [CharConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                              NoCommaNumberClass(
                              ) [NoCommaNumberClass]
                            ) [PrintStmt]
                          ) [Statements]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    CharConst(
                                     n
                                    ) [CharConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  CharConst(
                                   e
                                  ) [CharConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                CharConst(
                                 s
                                ) [CharConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              CharConst(
                               i
                              ) [CharConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                  ReadClass(
                    Designator(
                      DesigIdent(
                       hh
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [ReadClass]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               eol
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             hh
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            ReadClass(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
            ) [ReadClass]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         eol
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       x
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  22:00:56,589 - ===================================
INFO  22:00:56,595 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  22:00:56,596 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  22:00:56,596 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  22:00:56,596 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  22:00:56,596 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  22:00:56,596 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:00:56,596 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  22:00:56,596 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  22:00:56,596 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  22:00:56,596 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  22:00:56,596 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  22:00:56,596 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  22:00:56,596 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  22:00:56,596 - METHOD BODY STARTING!
INFO  22:00:56,596 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:00:56,597 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  22:00:56,597 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:00:56,597 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:00:56,597 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  22:00:56,597 - WE ARE USING AN ARRAY OF TYPE int ON LINE 9
INFO  22:00:56,597 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:00:56,597 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:00:56,597 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  22:00:56,597 - METHOD BODY ENDING!
INFO  22:00:56,597 - END OF DEFINING FUNCTION k
INFO  22:00:56,597 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  22:00:56,597 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  22:00:56,597 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  22:00:56,597 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  22:00:56,597 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  22:00:56,597 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  22:00:56,597 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  22:00:56,597 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  22:00:56,597 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  22:00:56,597 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 31
INFO  22:00:56,597 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 31
INFO  22:00:56,597 - ARRAY VARIABLE indexes IS BEING DEFINED! ON LINE 32
INFO  22:00:56,598 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  22:00:56,598 - VARIABLE dd IS BEING DEFINED! ON LINE 33
INFO  22:00:56,598 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  22:00:56,598 - VARIABLE ee IS BEING DEFINED! ON LINE 34
INFO  22:00:56,598 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  22:00:56,598 - VARIABLE ff IS BEING DEFINED! ON LINE 35
INFO  22:00:56,598 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  22:00:56,598 - VARIABLE gg IS BEING DEFINED! ON LINE 36
INFO  22:00:56,598 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 36
INFO  22:00:56,598 - VARIABLE hh IS BEING DEFINED! ON LINE 37
INFO  22:00:56,598 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 37
INFO  22:00:56,598 - VARIABLE ii IS BEING DEFINED! ON LINE 38
INFO  22:00:56,598 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 38
INFO  22:00:56,598 - METHOD BODY STARTING!
INFO  22:00:56,598 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,598 - BEGINNING OF AN ASSIGNEMENT! ON LINE 41
INFO  22:00:56,598 - CONST NUMBER 0 ON LINE 41
INFO  22:00:56,598 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  22:00:56,598 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  22:00:56,598 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 41
INFO  22:00:56,598 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:00:56,598 - BEGINNING OF AN ASSIGNEMENT! ON LINE 42
INFO  22:00:56,598 - CONST NUMBER 10 ON LINE 42
INFO  22:00:56,598 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:00:56,598 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:00:56,598 - USAGE OF KEYWORD NEW! ON LINE 42
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:00:56,599 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 42
INFO  22:00:56,599 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,599 - WE ARE USING A VARIABLE OF TYPE int ON LINE 43
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  22:00:56,599 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:00:56,599 - BEGINNING OF AN ASSIGNEMENT! ON LINE 43
INFO  22:00:56,599 - CONST NUMBER 1 ON LINE 43
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  22:00:56,599 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 43
INFO  22:00:56,599 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,599 - USING ++ ON x ON LINE 44
INFO  22:00:56,599 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,599 - WE ARE USING A VARIABLE OF TYPE int ON LINE 45
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  22:00:56,599 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:00:56,599 - BEGINNING OF AN ASSIGNEMENT! ON LINE 45
INFO  22:00:56,599 - CONST NUMBER 2 ON LINE 45
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  22:00:56,599 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 45
INFO  22:00:56,599 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,599 - USING ++ ON x ON LINE 46
INFO  22:00:56,599 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,599 - WE ARE USING A VARIABLE OF TYPE int ON LINE 47
INFO  22:00:56,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:00:56,600 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:00:56,600 - BEGINNING OF AN ASSIGNEMENT! ON LINE 47
INFO  22:00:56,600 - CONST NUMBER 3 ON LINE 47
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:00:56,600 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 47
INFO  22:00:56,600 - CONST NUMBER 0 ON LINE 48
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 48
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 48
INFO  22:00:56,600 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:00:56,600 - WE ARE USING AN ARRAY OF TYPE int ON LINE 48
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 48
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 48
INFO  22:00:56,600 - PRINT FUNCTION CALL IN USE! ON LINE 48
INFO  22:00:56,600 - CONST NUMBER 1 ON LINE 49
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  22:00:56,600 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:00:56,600 - WE ARE USING AN ARRAY OF TYPE int ON LINE 49
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  22:00:56,600 - PRINT FUNCTION CALL IN USE! ON LINE 49
INFO  22:00:56,600 - CONST NUMBER 2 ON LINE 50
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  22:00:56,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  22:00:56,601 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  22:00:56,601 - WE ARE USING AN ARRAY OF TYPE int ON LINE 50
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  22:00:56,601 - PRINT FUNCTION CALL IN USE! ON LINE 50
INFO  22:00:56,601 - CURRENT VARIABLE IN USE IS ii AND IT IS OF TYPE int
INFO  22:00:56,601 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  22:00:56,601 - CONST NUMBER 2 ON LINE 52
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:00:56,601 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  22:00:56,601 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,601 - WE ARE USING A VARIABLE OF TYPE int ON LINE 54
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:00:56,601 - CURRENT VARIABLE IN USE IS ii AND IT IS OF TYPE int
INFO  22:00:56,601 - WE ARE USING A VARIABLE OF TYPE int ON LINE 54
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:00:56,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:00:56,601 - USING TWO EXPRESSIONS OF TYPE int ON LINE 54
INFO  22:00:56,602 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  22:00:56,602 - BEGINNING OF AN ASSIGNEMENT! ON LINE 55
INFO  22:00:56,602 - CONST CHAR false ON LINE 55
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  22:00:56,602 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 55
INFO  22:00:56,602 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  22:00:56,602 - BEGINNING OF AN ASSIGNEMENT! ON LINE 56
INFO  22:00:56,602 - CONST CHAR true ON LINE 56
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:00:56,602 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 56
INFO  22:00:56,602 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,602 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  22:00:56,602 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  22:00:56,602 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 58
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:00:56,602 - CONST NUMBER 10 ON LINE 58
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:00:56,602 - CONST NUMBER 20 ON LINE 58
INFO  22:00:56,602 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:00:56,603 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  22:00:56,603 - SUCCESSFUL TERNARY! TYPES: int AND int ! ON LINE 58
INFO  22:00:56,603 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 58
INFO  22:00:56,603 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  22:00:56,603 - BEGINNING OF AN ASSIGNEMENT! ON LINE 60
INFO  22:00:56,603 - CONST CHAR false ON LINE 60
INFO  22:00:56,603 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  22:00:56,603 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  22:00:56,603 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 60
INFO  22:00:56,603 - BEGINNING OF A DO...WHILE LOOP!
INFO  22:00:56,603 - CONST NUMBER 0 ON LINE 63
INFO  22:00:56,603 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  22:00:56,603 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  22:00:56,603 - PRINT FUNCTION CALL IN USE! ON LINE 63
INFO  22:00:56,603 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  22:00:56,603 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 65
INFO  22:00:56,603 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:00:56,603 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  22:00:56,604 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 65
INFO  22:00:56,604 - ENDING OF A DO...WHILE LOOP! ON LINE 62
INFO  22:00:56,604 - CONST CHAR u ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - PRINT FUNCTION CALL IN USE! ON LINE 67
INFO  22:00:56,604 - CONST CHAR n ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - PRINT FUNCTION CALL IN USE! ON LINE 67
INFO  22:00:56,604 - CONST CHAR e ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - PRINT FUNCTION CALL IN USE! ON LINE 67
INFO  22:00:56,604 - CONST CHAR s ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - PRINT FUNCTION CALL IN USE! ON LINE 67
INFO  22:00:56,604 - CONST CHAR i ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,604 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  22:00:56,605 - PRINT FUNCTION CALL IN USE! ON LINE 67
INFO  22:00:56,605 - CURRENT VARIABLE IN USE IS hh AND IT IS OF TYPE char
INFO  22:00:56,605 - CURRENT VARIABLE IN USE IS eol AND IT IS OF TYPE char
INFO  22:00:56,605 - WE ARE USING A VARIABLE OF TYPE char ON LINE 70
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  22:00:56,605 - PRINT FUNCTION CALL IN USE! ON LINE 70
INFO  22:00:56,605 - CURRENT VARIABLE IN USE IS hh AND IT IS OF TYPE char
INFO  22:00:56,605 - WE ARE USING A VARIABLE OF TYPE char ON LINE 71
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  22:00:56,605 - PRINT FUNCTION CALL IN USE! ON LINE 71
INFO  22:00:56,605 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,605 - CURRENT VARIABLE IN USE IS eol AND IT IS OF TYPE char
INFO  22:00:56,605 - WE ARE USING A VARIABLE OF TYPE char ON LINE 74
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  22:00:56,605 - PRINT FUNCTION CALL IN USE! ON LINE 74
INFO  22:00:56,605 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  22:00:56,605 - WE ARE USING A VARIABLE OF TYPE int ON LINE 75
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  22:00:56,605 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  22:00:56,605 - PRINT FUNCTION CALL IN USE! ON LINE 75
INFO  22:00:56,605 - METHOD BODY ENDING!
INFO  22:00:56,605 - END OF DEFINING FUNCTION main
INFO  22:00:56,605 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  22:00:56,605 -  Deklarisanih promenljivih ima = 16
INFO  22:00:56,606 - ===================================
INFO  22:00:56,612 - Parsiranje uspesno zavrseno!
