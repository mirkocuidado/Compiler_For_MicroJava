INFO  22:30:40,786 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  22:30:40,854 - #2 program
INFO  22:30:40,854 - #43 MJProgram
INFO  22:30:40,854 - #43 int
INFO  22:30:40,856 - #43 a
INFO  22:30:40,857 - #31 ,
INFO  22:30:40,857 - #43 b
INFO  22:30:40,857 - #31 ,
INFO  22:30:40,857 - #43 c
INFO  22:30:40,857 - #31 ,
INFO  22:30:40,858 - #43 d
INFO  22:30:40,858 - #33 ;
INFO  22:30:40,858 - #43 int
INFO  22:30:40,858 - #43 i
INFO  22:30:40,858 - #33 ;
INFO  22:30:40,858 - #9 const
INFO  22:30:40,858 - #43 int
INFO  22:30:40,858 - #43 term
INFO  22:30:40,859 - #19 =
INFO  22:30:40,859 - #42 0
INFO  22:30:40,859 - #33 ;
INFO  22:30:40,859 - #9 const
INFO  22:30:40,867 - #43 int
INFO  22:30:40,867 - #43 y
INFO  22:30:40,867 - #19 =
INFO  22:30:40,867 - #42 3
INFO  22:30:40,867 - #33 ;
INFO  22:30:40,867 - #35 {
INFO  22:30:40,867 - #5 void
INFO  22:30:40,868 - #43 kk
INFO  22:30:40,868 - #37 (
INFO  22:30:40,868 - #38 )
INFO  22:30:40,869 - #35 {
INFO  22:30:40,869 - #36 }
INFO  22:30:40,870 - #43 int
INFO  22:30:40,872 - #43 k
INFO  22:30:40,872 - #37 (
INFO  22:30:40,872 - #43 int
INFO  22:30:40,872 - #43 a
INFO  22:30:40,872 - #39 [
INFO  22:30:40,872 - #40 ]
INFO  22:30:40,872 - #31 ,
INFO  22:30:40,872 - #43 int
INFO  22:30:40,872 - #43 b
INFO  22:30:40,872 - #38 )
INFO  22:30:40,873 - #35 {
INFO  22:30:40,873 - #41 return
INFO  22:30:40,873 - #43 a
INFO  22:30:40,874 - #39 [
INFO  22:30:40,875 - #43 b
INFO  22:30:40,876 - #40 ]
INFO  22:30:40,878 - #33 ;
INFO  22:30:40,878 - #36 }
INFO  22:30:40,879 - #43 int
INFO  22:30:40,879 - #43 func_check
INFO  22:30:40,879 - #37 (
INFO  22:30:40,879 - #43 int
INFO  22:30:40,879 - #43 a
INFO  22:30:40,879 - #39 [
INFO  22:30:40,879 - #40 ]
INFO  22:30:40,879 - #31 ,
INFO  22:30:40,879 - #43 char
INFO  22:30:40,879 - #43 b
INFO  22:30:40,879 - #39 [
INFO  22:30:40,879 - #40 ]
INFO  22:30:40,879 - #31 ,
INFO  22:30:40,880 - #43 bool
INFO  22:30:40,880 - #43 c
INFO  22:30:40,880 - #38 )
INFO  22:30:40,880 - #43 int
INFO  22:30:40,880 - #43 local
INFO  22:30:40,880 - #33 ;
INFO  22:30:40,880 - #35 {
INFO  22:30:40,880 - #43 local
INFO  22:30:40,880 - #19 =
INFO  22:30:40,880 - #43 a
INFO  22:30:40,881 - #39 [
INFO  22:30:40,882 - #42 0
INFO  22:30:40,882 - #40 ]
INFO  22:30:40,882 - #33 ;
INFO  22:30:40,882 - #18 print
INFO  22:30:40,882 - #37 (
INFO  22:30:40,882 - #43 local
INFO  22:30:40,882 - #38 )
INFO  22:30:40,883 - #33 ;
INFO  22:30:40,883 - #43 local
INFO  22:30:40,883 - #19 =
INFO  22:30:40,883 - #43 local
INFO  22:30:40,883 - #46 *
INFO  22:30:40,883 - #42 2
INFO  22:30:40,883 - #49 +
INFO  22:30:40,883 - #43 local
INFO  22:30:40,884 - #50 -
INFO  22:30:40,884 - #43 a
INFO  22:30:40,884 - #39 [
INFO  22:30:40,884 - #42 1
INFO  22:30:40,884 - #40 ]
INFO  22:30:40,884 - #33 ;
INFO  22:30:40,884 - #18 print
INFO  22:30:40,884 - #37 (
INFO  22:30:40,884 - #43 local
INFO  22:30:40,884 - #38 )
INFO  22:30:40,884 - #33 ;
INFO  22:30:40,884 - #41 return
INFO  22:30:40,884 - #43 local
INFO  22:30:40,884 - #33 ;
INFO  22:30:40,884 - #36 }
INFO  22:30:40,885 - #43 char
INFO  22:30:40,885 - #43 s
INFO  22:30:40,885 - #37 (
INFO  22:30:40,885 - #38 )
INFO  22:30:40,885 - #35 {
INFO  22:30:40,885 - #41 return
INFO  22:30:40,885 - #44 c
INFO  22:30:40,885 - #33 ;
INFO  22:30:40,885 - #36 }
INFO  22:30:40,885 - #5 void
INFO  22:30:40,885 - #43 main
INFO  22:30:40,885 - #37 (
INFO  22:30:40,885 - #38 )
INFO  22:30:40,885 - #43 int
INFO  22:30:40,885 - #43 x
INFO  22:30:40,886 - #33 ;
INFO  22:30:40,886 - #43 char
INFO  22:30:40,886 - #43 z
INFO  22:30:40,886 - #33 ;
INFO  22:30:40,886 - #43 bool
INFO  22:30:40,886 - #43 p
INFO  22:30:40,886 - #33 ;
INFO  22:30:40,886 - #43 bool
INFO  22:30:40,886 - #43 r
INFO  22:30:40,886 - #33 ;
INFO  22:30:40,886 - #43 bool
INFO  22:30:40,886 - #43 q
INFO  22:30:40,886 - #33 ;
INFO  22:30:40,886 - #43 char
INFO  22:30:40,886 - #43 xx
INFO  22:30:40,886 - #39 [
INFO  22:30:40,887 - #40 ]
INFO  22:30:40,887 - #33 ;
INFO  22:30:40,887 - #43 char
INFO  22:30:40,887 - #43 yy
INFO  22:30:40,887 - #39 [
INFO  22:30:40,887 - #40 ]
INFO  22:30:40,887 - #33 ;
INFO  22:30:40,887 - #43 int
INFO  22:30:40,887 - #43 br
INFO  22:30:40,887 - #39 [
INFO  22:30:40,887 - #40 ]
INFO  22:30:40,887 - #33 ;
INFO  22:30:40,888 - #43 int
INFO  22:30:40,888 - #43 indexes
INFO  22:30:40,888 - #39 [
INFO  22:30:40,888 - #40 ]
INFO  22:30:40,888 - #33 ;
INFO  22:30:40,888 - #43 int
INFO  22:30:40,888 - #43 dd
INFO  22:30:40,888 - #33 ;
INFO  22:30:40,888 - #43 int
INFO  22:30:40,888 - #43 ee
INFO  22:30:40,888 - #33 ;
INFO  22:30:40,888 - #43 int
INFO  22:30:40,889 - #43 ff
INFO  22:30:40,889 - #33 ;
INFO  22:30:40,889 - #43 int
INFO  22:30:40,889 - #43 gg
INFO  22:30:40,890 - #33 ;
INFO  22:30:40,890 - #43 char
INFO  22:30:40,890 - #43 hh
INFO  22:30:40,890 - #33 ;
INFO  22:30:40,890 - #43 int
INFO  22:30:40,890 - #43 ii
INFO  22:30:40,890 - #33 ;
INFO  22:30:40,890 - #35 {
INFO  22:30:40,890 - #43 i
INFO  22:30:40,890 - #19 =
INFO  22:30:40,890 - #42 0
INFO  22:30:40,890 - #33 ;
INFO  22:30:40,890 - #43 c
INFO  22:30:40,890 - #19 =
INFO  22:30:40,891 - #42 0
INFO  22:30:40,891 - #33 ;
INFO  22:30:40,891 - #12 do
INFO  22:30:40,891 - #35 {
INFO  22:30:40,892 - #14 if
INFO  22:30:40,893 - #37 (
INFO  22:30:40,893 - #43 i
INFO  22:30:40,893 - #20 ==
INFO  22:30:40,893 - #42 3
INFO  22:30:40,894 - #38 )
INFO  22:30:40,896 - #3 break
INFO  22:30:40,896 - #33 ;
INFO  22:30:40,898 - #14 if
INFO  22:30:40,902 - #37 (
INFO  22:30:40,902 - #43 c
INFO  22:30:40,902 - #20 ==
INFO  22:30:40,902 - #42 2
INFO  22:30:40,902 - #38 )
INFO  22:30:40,902 - #3 break
INFO  22:30:40,902 - #33 ;
INFO  22:30:40,902 - #43 i
INFO  22:30:40,902 - #28 ++
INFO  22:30:40,902 - #33 ;
INFO  22:30:40,902 - #43 c
INFO  22:30:40,902 - #28 ++
INFO  22:30:40,903 - #33 ;
INFO  22:30:40,903 - #36 }
INFO  22:30:40,903 - #13 while
INFO  22:30:40,903 - #37 (
INFO  22:30:40,903 - #43 i
INFO  22:30:40,904 - #25 <=
INFO  22:30:40,904 - #42 5
INFO  22:30:40,904 - #27 ||
INFO  22:30:40,904 - #43 c
INFO  22:30:40,905 - #25 <=
INFO  22:30:40,905 - #42 2
INFO  22:30:40,905 - #38 )
INFO  22:30:40,905 - #33 ;
INFO  22:30:40,906 - #18 print
INFO  22:30:40,906 - #37 (
INFO  22:30:40,907 - #43 i
INFO  22:30:40,907 - #38 )
INFO  22:30:40,907 - #33 ;
INFO  22:30:40,907 - #18 print
INFO  22:30:40,907 - #37 (
INFO  22:30:40,907 - #43 c
INFO  22:30:40,907 - #38 )
INFO  22:30:40,907 - #33 ;
INFO  22:30:40,907 - #36 }
INFO  22:30:40,907 - #36 }
INFO  22:30:40,916 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          NoGroupDecl(
          ) [NoGroupDecl]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListClass(
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       a
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassNoArray(
                     b
                    ) [VarClassNoArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   c
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 d
                ) [VarClassNoArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               i
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          MethodDeclarations(
            NoMethodDecl(
            ) [NoMethodDecl]
            MethodDecl(
              ReturnValueClassVoid(
               kk
              ) [ReturnValueClassVoid]
              NoFormParam(
              ) [NoFormParam]
              NoVarDeclList(
              ) [NoVarDeclList]
              LBraceClass(
              ) [LBraceClass]
              NoStmt(
              ) [NoStmt]
              RBraceClass(
              ) [RBraceClass]
            ) [MethodDecl]
          ) [MethodDeclarations]
          MethodDecl(
            ReturnValueClassNoVoid(
              Type(
               int
              ) [Type]
             k
            ) [ReturnValueClassNoVoid]
            FormParams(
              FormalParamDecls(
                SingleFormalParamDecl(
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   a
                  ) [FormalParamDeclClassArray]
                ) [SingleFormalParamDecl]
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 b
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
            ) [FormParams]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            Statements(
              NoStmt(
              ) [NoStmt]
              ReturnExpr(
                ReturnNonTerminalClass(
                ) [ReturnNonTerminalClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             a
                            ) [DesigIdent]
                            OptionalDesignatorArray(
                              HelperClass(
                              ) [HelperClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           b
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [ReturnExpr]
            ) [Statements]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           func_check
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              FormalParamDecls(
                SingleFormalParamDecl(
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   a
                  ) [FormalParamDeclClassArray]
                ) [SingleFormalParamDecl]
                FormalParamDeclClassArray(
                  Type(
                   char
                  ) [Type]
                 b
                ) [FormalParamDeclClassArray]
              ) [FormalParamDecls]
              FormalParamDeclClassNoArray(
                Type(
                 bool
                ) [Type]
               c
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 local
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           local
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     a
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 local
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       local
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 local
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            TermOptionalListClass(
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                              MultiplyOperationClass(
                               *
                              ) [MultiplyOperationClass]
                              NumberConst(
                               2
                              ) [NumberConst]
                            ) [TermOptionalListClass]
                          ) [TermClass]
                          ExprOptionalListClass(
                            ExprOptionalListClass(
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                              PlusOperation(
                               +
                              ) [PlusOperation]
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     local
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                            ) [ExprOptionalListClass]
                            MinusOperation(
                             -
                            ) [MinusOperation]
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   a
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             1
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                          ) [ExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             local
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           local
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           char
          ) [Type]
         s
        ) [ReturnValueClassNoVoid]
        NoFormParam(
        ) [NoFormParam]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    CharConst(
                     c
                    ) [CharConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          VarDeclListClass(
                            VarDeclListClass(
                              VarDeclListClass(
                                VarDeclListClass(
                                  VarDeclListClass(
                                    NoVarDeclList(
                                    ) [NoVarDeclList]
                                    VarDeclClass(
                                      Type(
                                       int
                                      ) [Type]
                                      VarListSingle(
                                        VarClassNoArray(
                                         x
                                        ) [VarClassNoArray]
                                      ) [VarListSingle]
                                    ) [VarDeclClass]
                                  ) [VarDeclListClass]
                                  VarDeclClass(
                                    Type(
                                     char
                                    ) [Type]
                                    VarListSingle(
                                      VarClassNoArray(
                                       z
                                      ) [VarClassNoArray]
                                    ) [VarListSingle]
                                  ) [VarDeclClass]
                                ) [VarDeclListClass]
                                VarDeclClass(
                                  Type(
                                   bool
                                  ) [Type]
                                  VarListSingle(
                                    VarClassNoArray(
                                     p
                                    ) [VarClassNoArray]
                                  ) [VarListSingle]
                                ) [VarDeclClass]
                              ) [VarDeclListClass]
                              VarDeclClass(
                                Type(
                                 bool
                                ) [Type]
                                VarListSingle(
                                  VarClassNoArray(
                                   r
                                  ) [VarClassNoArray]
                                ) [VarListSingle]
                              ) [VarDeclClass]
                            ) [VarDeclListClass]
                            VarDeclClass(
                              Type(
                               bool
                              ) [Type]
                              VarListSingle(
                                VarClassNoArray(
                                 q
                                ) [VarClassNoArray]
                              ) [VarListSingle]
                            ) [VarDeclClass]
                          ) [VarDeclListClass]
                          VarDeclClass(
                            Type(
                             char
                            ) [Type]
                            VarListSingle(
                              VarClassArray(
                               xx
                              ) [VarClassArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           char
                          ) [Type]
                          VarListSingle(
                            VarClassArray(
                             yy
                            ) [VarClassArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassArray(
                           br
                          ) [VarClassArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         indexes
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       i
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     c
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        IfStatement(
                          IfConditionNoError(
                            ConditionClass(
                              CondTermClass(
                                CondFactClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             i
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                  CondFactOptionalClass(
                                    RelationOperationClassEqualComparation(
                                    ) [RelationOperationClassEqualComparation]
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           3
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [CondFactOptionalClass]
                                ) [CondFactClass]
                                NoCondTermOptionalClass(
                                ) [NoCondTermOptionalClass]
                              ) [CondTermClass]
                              NoConditionOptionalClass(
                              ) [NoConditionOptionalClass]
                            ) [ConditionClass]
                          ) [IfConditionNoError]
                          BreakClass(
                            BreakKeyWordClass(
                            ) [BreakKeyWordClass]
                          ) [BreakClass]
                          Empty(
                          ) [Empty]
                          NoOptionalStatement(
                          ) [NoOptionalStatement]
                        ) [IfStatement]
                      ) [Statements]
                      IfStatement(
                        IfConditionNoError(
                          ConditionClass(
                            CondTermClass(
                              CondFactClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           c
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                                CondFactOptionalClass(
                                  RelationOperationClassEqualComparation(
                                  ) [RelationOperationClassEqualComparation]
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         2
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [CondFactOptionalClass]
                              ) [CondFactClass]
                              NoCondTermOptionalClass(
                              ) [NoCondTermOptionalClass]
                            ) [CondTermClass]
                            NoConditionOptionalClass(
                            ) [NoConditionOptionalClass]
                          ) [ConditionClass]
                        ) [IfConditionNoError]
                        BreakClass(
                          BreakKeyWordClass(
                          ) [BreakKeyWordClass]
                        ) [BreakClass]
                        Empty(
                        ) [Empty]
                        NoOptionalStatement(
                        ) [NoOptionalStatement]
                      ) [IfStatement]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementPlusPlus(
                        Designator(
                          DesigIdent(
                           i
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorStatementPlusPlus]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementPlusPlus(
                      Designator(
                        DesigIdent(
                         c
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorStatementPlusPlus]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               i
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      LessOrEqualOperationClass(
                      ) [LessOrEqualOperationClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             5
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                ConditionOptionalClass(
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                  FakeOrClass(
                  ) [FakeOrClass]
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 c
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      CondFactOptionalClass(
                        LessOrEqualOperationClass(
                        ) [LessOrEqualOperationClass]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               2
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [CondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                ) [ConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         i
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       c
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  22:30:40,918 - ===================================
INFO  22:30:40,921 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  22:30:40,921 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  22:30:40,921 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  22:30:40,921 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  22:30:40,921 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  22:30:40,921 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:30:40,921 - VARIABLE i IS BEING DEFINED! ON LINE 2
INFO  22:30:40,921 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:30:40,922 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  22:30:40,922 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  22:30:40,922 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  22:30:40,922 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  22:30:40,922 - FUNCTION kk WITH VOID AS RETURN VALUE!  ON LINE 8
INFO  22:30:40,922 - METHOD BODY STARTING!
INFO  22:30:40,922 - METHOD BODY ENDING!
INFO  22:30:40,922 - END OF DEFINING FUNCTION kk
INFO  22:30:40,922 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 10
INFO  22:30:40,922 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 10
INFO  22:30:40,922 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 10
INFO  22:30:40,922 - METHOD BODY STARTING!
INFO  22:30:40,922 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:30:40,922 - WE ARE USING A VARIABLE OF TYPE int ON LINE 10
INFO  22:30:40,922 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:30:40,922 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:30:40,923 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  22:30:40,923 - WE ARE USING AN ARRAY OF TYPE int ON LINE 10
INFO  22:30:40,923 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:30:40,923 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:30:40,923 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 10
INFO  22:30:40,923 - METHOD BODY ENDING!
INFO  22:30:40,923 - END OF DEFINING FUNCTION k
INFO  22:30:40,923 - FUNCTION func_check WITH RETURN VALUE OF TYPE int ON LINE 12
INFO  22:30:40,923 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 12
INFO  22:30:40,923 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE char ON LINE 12
INFO  22:30:40,923 - FORMAL PARAMETER c DEFINED AND IT IS OF TYPE boolean ON LINE 12
INFO  22:30:40,923 - VARIABLE local IS BEING DEFINED! ON LINE 13
INFO  22:30:40,923 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 13
INFO  22:30:40,923 - METHOD BODY STARTING!
INFO  22:30:40,923 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:30:40,923 - BEGINNING OF AN ASSIGNEMENT! ON LINE 15
INFO  22:30:40,923 - CONST NUMBER 0 ON LINE 15
INFO  22:30:40,923 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:30:40,923 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:30:40,923 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  22:30:40,923 - WE ARE USING AN ARRAY OF TYPE int ON LINE 15
INFO  22:30:40,923 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:30:40,923 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:30:40,924 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 15
INFO  22:30:40,924 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:30:40,924 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:30:40,924 - PRINT FUNCTION CALL IN USE! ON LINE 16
INFO  22:30:40,924 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:30:40,924 - BEGINNING OF AN ASSIGNEMENT! ON LINE 17
INFO  22:30:40,924 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:30:40,924 - WE ARE USING A VARIABLE OF TYPE int ON LINE 17
INFO  22:30:40,924 - CONST NUMBER 2 ON LINE 17
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  22:30:40,924 - USING INTEGERS IN TERM! ON LINE 17
INFO  22:30:40,924 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:30:40,924 - WE ARE USING A VARIABLE OF TYPE int ON LINE 17
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:30:40,924 - CONST NUMBER 1 ON LINE 17
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:30:40,924 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  22:30:40,924 - WE ARE USING AN ARRAY OF TYPE int ON LINE 17
INFO  22:30:40,924 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:30:40,924 - USING INTEGERS IN TERM! ON LINE 18
INFO  22:30:40,924 - USING INTEGERS IN TERM! ON LINE 17
INFO  22:30:40,924 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 17
INFO  22:30:40,925 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:30:40,925 - WE ARE USING A VARIABLE OF TYPE int ON LINE 18
INFO  22:30:40,925 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:30:40,925 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:30:40,925 - PRINT FUNCTION CALL IN USE! ON LINE 18
INFO  22:30:40,925 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  22:30:40,925 - WE ARE USING A VARIABLE OF TYPE int ON LINE 19
INFO  22:30:40,925 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  22:30:40,925 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  22:30:40,925 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 19
INFO  22:30:40,925 - METHOD BODY ENDING!
INFO  22:30:40,925 - END OF DEFINING FUNCTION func_check
INFO  22:30:40,925 - FUNCTION s WITH RETURN VALUE OF TYPE char ON LINE 22
INFO  22:30:40,925 - METHOD BODY STARTING!
INFO  22:30:40,925 - CONST CHAR c ON LINE 22
INFO  22:30:40,925 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  22:30:40,925 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  22:30:40,925 - SUCCESSFUL RETURN! TYPES: char AND char ! ON LINE 22
INFO  22:30:40,925 - METHOD BODY ENDING!
INFO  22:30:40,925 - END OF DEFINING FUNCTION s
INFO  22:30:40,926 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 24
INFO  22:30:40,926 - VARIABLE x IS BEING DEFINED! ON LINE 25
INFO  22:30:40,926 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 25
INFO  22:30:40,926 - VARIABLE z IS BEING DEFINED! ON LINE 26
INFO  22:30:40,926 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 26
INFO  22:30:40,926 - VARIABLE p IS BEING DEFINED! ON LINE 27
INFO  22:30:40,926 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  22:30:40,926 - VARIABLE r IS BEING DEFINED! ON LINE 28
INFO  22:30:40,926 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  22:30:40,926 - VARIABLE q IS BEING DEFINED! ON LINE 29
INFO  22:30:40,926 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 29
INFO  22:30:40,926 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 30
INFO  22:30:40,926 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 30
INFO  22:30:40,926 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 31
INFO  22:30:40,926 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 31
INFO  22:30:40,926 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 32
INFO  22:30:40,926 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  22:30:40,926 - ARRAY VARIABLE indexes IS BEING DEFINED! ON LINE 33
INFO  22:30:40,926 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  22:30:40,926 - VARIABLE dd IS BEING DEFINED! ON LINE 34
INFO  22:30:40,926 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  22:30:40,926 - VARIABLE ee IS BEING DEFINED! ON LINE 35
INFO  22:30:40,926 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  22:30:40,926 - VARIABLE ff IS BEING DEFINED! ON LINE 36
INFO  22:30:40,926 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 36
INFO  22:30:40,927 - VARIABLE gg IS BEING DEFINED! ON LINE 37
INFO  22:30:40,927 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 37
INFO  22:30:40,927 - VARIABLE hh IS BEING DEFINED! ON LINE 38
INFO  22:30:40,927 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 38
INFO  22:30:40,927 - VARIABLE ii IS BEING DEFINED! ON LINE 39
INFO  22:30:40,927 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 39
INFO  22:30:40,927 - METHOD BODY STARTING!
INFO  22:30:40,927 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:30:40,927 - BEGINNING OF AN ASSIGNEMENT! ON LINE 42
INFO  22:30:40,927 - CONST NUMBER 0 ON LINE 42
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  22:30:40,927 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 42
INFO  22:30:40,927 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:30:40,927 - BEGINNING OF AN ASSIGNEMENT! ON LINE 43
INFO  22:30:40,927 - CONST NUMBER 0 ON LINE 43
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  22:30:40,927 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 43
INFO  22:30:40,927 - BEGINNING OF A DO...WHILE LOOP!
INFO  22:30:40,927 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:30:40,927 - WE ARE USING A VARIABLE OF TYPE int ON LINE 46
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  22:30:40,927 - CONST NUMBER 3 ON LINE 46
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  22:30:40,927 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  22:30:40,928 - USING TWO EXPRESSIONS OF TYPE int ON LINE 46
INFO  22:30:40,928 - USING BREAK KEYWORD!
INFO  22:30:40,928 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:30:40,928 - WE ARE USING A VARIABLE OF TYPE int ON LINE 47
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:30:40,928 - CONST NUMBER 2 ON LINE 47
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  22:30:40,928 - USING TWO EXPRESSIONS OF TYPE int ON LINE 47
INFO  22:30:40,928 - USING BREAK KEYWORD!
INFO  22:30:40,928 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:30:40,928 - USING ++ ON i ON LINE 49
INFO  22:30:40,928 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:30:40,928 - USING ++ ON c ON LINE 50
INFO  22:30:40,928 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:30:40,928 - WE ARE USING A VARIABLE OF TYPE int ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,928 - CONST NUMBER 5 ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,928 - USING TWO EXPRESSIONS OF TYPE int ON LINE 52
INFO  22:30:40,928 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:30:40,928 - WE ARE USING A VARIABLE OF TYPE int ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,928 - CONST NUMBER 2 ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,928 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:30:40,929 - USING TWO EXPRESSIONS OF TYPE int ON LINE 52
INFO  22:30:40,929 - ENDING OF A DO...WHILE LOOP! ON LINE 44
INFO  22:30:40,929 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:30:40,929 - WE ARE USING A VARIABLE OF TYPE int ON LINE 54
INFO  22:30:40,929 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:30:40,929 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:30:40,929 - PRINT FUNCTION CALL IN USE! ON LINE 54
INFO  22:30:40,929 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:30:40,929 - WE ARE USING A VARIABLE OF TYPE int ON LINE 55
INFO  22:30:40,929 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  22:30:40,929 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  22:30:40,929 - PRINT FUNCTION CALL IN USE! ON LINE 55
INFO  22:30:40,929 - METHOD BODY ENDING!
INFO  22:30:40,929 - END OF DEFINING FUNCTION main
INFO  22:30:40,929 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  22:30:40,929 -  Deklarisanih promenljivih ima = 21
INFO  22:30:40,929 - ===================================
INFO  22:30:40,936 - Parsiranje uspesno zavrseno!
