INFO  18:53:57,422 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:53:57,528 - #2 program
INFO  18:53:57,528 - #43 MJProgram
INFO  18:53:57,528 - #43 int
INFO  18:53:57,530 - #43 a
INFO  18:53:57,531 - #31 ,
INFO  18:53:57,531 - #43 b
INFO  18:53:57,531 - #31 ,
INFO  18:53:57,532 - #43 c
INFO  18:53:57,532 - #31 ,
INFO  18:53:57,532 - #43 d
INFO  18:53:57,532 - #33 ;
INFO  18:53:57,532 - #9 const
INFO  18:53:57,533 - #43 int
INFO  18:53:57,533 - #43 y
INFO  18:53:57,533 - #19 =
INFO  18:53:57,534 - #42 3
INFO  18:53:57,534 - #33 ;
INFO  18:53:57,534 - #35 {
INFO  18:53:57,535 - #43 int
INFO  18:53:57,536 - #43 k
INFO  18:53:57,536 - #37 (
INFO  18:53:57,536 - #43 int
INFO  18:53:57,536 - #43 a
INFO  18:53:57,536 - #31 ,
INFO  18:53:57,537 - #43 int
INFO  18:53:57,537 - #43 b
INFO  18:53:57,537 - #38 )
INFO  18:53:57,537 - #35 {
INFO  18:53:57,538 - #41 return
INFO  18:53:57,540 - #43 b
INFO  18:53:57,542 - #33 ;
INFO  18:53:57,545 - #36 }
INFO  18:53:57,545 - #5 void
INFO  18:53:57,547 - #43 main
INFO  18:53:57,547 - #37 (
INFO  18:53:57,547 - #38 )
INFO  18:53:57,548 - #43 int
INFO  18:53:57,548 - #43 x
INFO  18:53:57,548 - #33 ;
INFO  18:53:57,548 - #43 char
INFO  18:53:57,548 - #43 z
INFO  18:53:57,548 - #33 ;
INFO  18:53:57,549 - #43 char
INFO  18:53:57,549 - #43 xx
INFO  18:53:57,549 - #39 [
INFO  18:53:57,549 - #40 ]
INFO  18:53:57,549 - #33 ;
INFO  18:53:57,549 - #43 char
INFO  18:53:57,550 - #43 yy
INFO  18:53:57,550 - #39 [
INFO  18:53:57,550 - #40 ]
INFO  18:53:57,550 - #33 ;
INFO  18:53:57,550 - #43 int
INFO  18:53:57,550 - #43 br
INFO  18:53:57,550 - #39 [
INFO  18:53:57,551 - #40 ]
INFO  18:53:57,551 - #33 ;
INFO  18:53:57,551 - #35 {
INFO  18:53:57,551 - #43 br
INFO  18:53:57,551 - #19 =
INFO  18:53:57,551 - #16 new
INFO  18:53:57,553 - #43 int
INFO  18:53:57,553 - #39 [
INFO  18:53:57,553 - #42 10
INFO  18:53:57,553 - #40 ]
INFO  18:53:57,553 - #33 ;
INFO  18:53:57,554 - #43 br
INFO  18:53:57,554 - #39 [
INFO  18:53:57,555 - #42 0
INFO  18:53:57,557 - #40 ]
INFO  18:53:57,557 - #19 =
INFO  18:53:57,558 - #42 10
INFO  18:53:57,558 - #33 ;
INFO  18:53:57,558 - #18 print
INFO  18:53:57,558 - #37 (
INFO  18:53:57,558 - #43 br
INFO  18:53:57,558 - #39 [
INFO  18:53:57,558 - #42 0
INFO  18:53:57,558 - #40 ]
INFO  18:53:57,559 - #38 )
INFO  18:53:57,560 - #33 ;
INFO  18:53:57,560 - #43 br
INFO  18:53:57,560 - #39 [
INFO  18:53:57,560 - #42 0
INFO  18:53:57,560 - #40 ]
INFO  18:53:57,561 - #28 ++
INFO  18:53:57,561 - #33 ;
INFO  18:53:57,561 - #18 print
INFO  18:53:57,561 - #37 (
INFO  18:53:57,561 - #43 br
INFO  18:53:57,561 - #39 [
INFO  18:53:57,561 - #42 0
INFO  18:53:57,561 - #40 ]
INFO  18:53:57,561 - #38 )
INFO  18:53:57,561 - #33 ;
INFO  18:53:57,562 - #36 }
INFO  18:53:57,562 - #36 }
INFO  18:53:57,579 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                NoVarDeclList(
                ) [NoVarDeclList]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   z
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 xx
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassArray(
               yy
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             br
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NewFactorClass(
                              Type(
                               int
                              ) [Type]
                              FactorOptionalSecondClass(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         10
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [FactorOptionalSecondClass]
                            ) [NewFactorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     br
                    ) [DesigIdent]
                    OptionalDesignatorArray(
                      HelperClass(
                      ) [HelperClass]
                      LSquareClass(
                      ) [LSquareClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               0
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [OptionalDesignatorArray]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           10
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           br
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          Assignment(
            DesignatorStatementPlusPlus(
              Designator(
                DesigIdent(
                 br
                ) [DesigIdent]
                OptionalDesignatorArray(
                  HelperClass(
                  ) [HelperClass]
                  LSquareClass(
                  ) [LSquareClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [OptionalDesignatorArray]
              ) [Designator]
            ) [DesignatorStatementPlusPlus]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:53:57,580 - ===================================
INFO  18:53:57,588 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:53:57,590 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:53:57,590 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:53:57,591 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:53:57,591 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:53:57,591 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:53:57,591 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  18:53:57,591 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  18:53:57,591 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  18:53:57,591 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:53:57,592 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:53:57,592 - METHOD BODY STARTING!
INFO  18:53:57,592 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  18:53:57,592 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  18:53:57,592 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:53:57,592 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:53:57,592 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  18:53:57,592 - METHOD BODY ENDING!
INFO  18:53:57,593 - END OF DEFINING FUNCTION k
INFO  18:53:57,593 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:53:57,593 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  18:53:57,593 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  18:53:57,593 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  18:53:57,593 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  18:53:57,593 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  18:53:57,593 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  18:53:57,593 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 16
INFO  18:53:57,593 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 16
INFO  18:53:57,594 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 17
INFO  18:53:57,594 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 17
INFO  18:53:57,594 - METHOD BODY STARTING!
INFO  18:53:57,594 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:53:57,594 - BEGINNING OF AN ASSIGNEMENT! ON LINE 38
INFO  18:53:57,594 - CONST NUMBER 10 ON LINE 38
INFO  18:53:57,594 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:53:57,594 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:53:57,594 - USAGE OF KEYWORD NEW! ON LINE 38
INFO  18:53:57,594 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:53:57,594 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:53:57,594 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 38
INFO  18:53:57,595 - CONST NUMBER 0 ON LINE 39
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:53:57,595 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:53:57,595 - BEGINNING OF AN ASSIGNEMENT! ON LINE 39
INFO  18:53:57,595 - CONST NUMBER 10 ON LINE 39
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:53:57,595 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 39
INFO  18:53:57,595 - CONST NUMBER 0 ON LINE 43
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:53:57,595 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:53:57,595 - WE ARE USING AN ARRAY OF TYPE int ON LINE 43
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:53:57,595 - PRINT FUNCTION CALL IN USE! ON LINE 43
INFO  18:53:57,595 - CONST NUMBER 0 ON LINE 44
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  18:53:57,595 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  18:53:57,595 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:53:57,596 - USING ++ ON br ON LINE 44
INFO  18:53:57,596 - CONST NUMBER 0 ON LINE 45
INFO  18:53:57,596 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:53:57,596 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:53:57,596 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:53:57,596 - WE ARE USING AN ARRAY OF TYPE int ON LINE 45
INFO  18:53:57,596 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:53:57,596 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:53:57,596 - PRINT FUNCTION CALL IN USE! ON LINE 45
INFO  18:53:57,596 - METHOD BODY ENDING!
INFO  18:53:57,596 - END OF DEFINING FUNCTION main
INFO  18:53:57,596 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:53:57,596 -  Deklarisanih promenljivih ima = 9
INFO  18:53:57,596 - ===================================
INFO  18:53:57,600 - Parsiranje uspesno zavrseno!
