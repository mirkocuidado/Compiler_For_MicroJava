INFO  17:57:53,592 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  17:57:53,688 - #2 program
INFO  17:57:53,689 - #43 MJProgram
INFO  17:57:53,689 - #43 int
INFO  17:57:53,691 - #43 a
INFO  17:57:53,692 - #31 ,
INFO  17:57:53,692 - #43 b
INFO  17:57:53,692 - #31 ,
INFO  17:57:53,692 - #43 c
INFO  17:57:53,692 - #31 ,
INFO  17:57:53,693 - #43 d
INFO  17:57:53,693 - #33 ;
INFO  17:57:53,693 - #9 const
INFO  17:57:53,693 - #43 int
INFO  17:57:53,694 - #43 y
INFO  17:57:53,694 - #19 =
INFO  17:57:53,694 - #42 3
INFO  17:57:53,694 - #33 ;
INFO  17:57:53,695 - #35 {
INFO  17:57:53,695 - #43 int
INFO  17:57:53,697 - #43 k
INFO  17:57:53,697 - #37 (
INFO  17:57:53,706 - #43 int
INFO  17:57:53,706 - #43 a
INFO  17:57:53,706 - #31 ,
INFO  17:57:53,707 - #43 int
INFO  17:57:53,707 - #43 b
INFO  17:57:53,707 - #38 )
INFO  17:57:53,707 - #35 {
INFO  17:57:53,708 - #41 return
INFO  17:57:53,711 - #43 b
INFO  17:57:53,712 - #33 ;
INFO  17:57:53,716 - #36 }
INFO  17:57:53,716 - #5 void
INFO  17:57:53,718 - #43 main
INFO  17:57:53,718 - #37 (
INFO  17:57:53,718 - #38 )
INFO  17:57:53,719 - #43 int
INFO  17:57:53,719 - #43 x
INFO  17:57:53,719 - #33 ;
INFO  17:57:53,719 - #43 int
INFO  17:57:53,720 - #43 xx
INFO  17:57:53,720 - #39 [
INFO  17:57:53,720 - #40 ]
INFO  17:57:53,720 - #33 ;
INFO  17:57:53,720 - #35 {
INFO  17:57:53,720 - #43 x
INFO  17:57:53,720 - #19 =
INFO  17:57:53,721 - #42 2
INFO  17:57:53,722 - #49 +
INFO  17:57:53,723 - #42 3
INFO  17:57:53,723 - #46 *
INFO  17:57:53,723 - #37 (
INFO  17:57:53,723 - #42 4
INFO  17:57:53,723 - #49 +
INFO  17:57:53,723 - #42 5
INFO  17:57:53,723 - #38 )
INFO  17:57:53,723 - #49 +
INFO  17:57:53,724 - #43 k
INFO  17:57:53,724 - #37 (
INFO  17:57:53,724 - #42 0
INFO  17:57:53,724 - #31 ,
INFO  17:57:53,724 - #42 1
INFO  17:57:53,724 - #38 )
INFO  17:57:53,725 - #33 ;
INFO  17:57:53,725 - #18 print
INFO  17:57:53,725 - #37 (
INFO  17:57:53,725 - #43 x
INFO  17:57:53,725 - #38 )
INFO  17:57:53,726 - #33 ;
INFO  17:57:53,726 - #43 xx
INFO  17:57:53,726 - #19 =
INFO  17:57:53,726 - #16 new
INFO  17:57:53,726 - #43 int
INFO  17:57:53,726 - #39 [
INFO  17:57:53,726 - #42 5
INFO  17:57:53,726 - #40 ]
INFO  17:57:53,727 - #33 ;
INFO  17:57:53,727 - #36 }
INFO  17:57:53,727 - #36 }
INFO  17:57:53,736 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               x
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             xx
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   x
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         2
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      ExprOptionalListClass(
                        ExprOptionalListClass(
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                          PlusOperation(
                           +
                          ) [PlusOperation]
                          TermClass(
                            NumberConst(
                             3
                            ) [NumberConst]
                            TermOptionalListClass(
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                              MultiplyOperationClass(
                               *
                              ) [MultiplyOperationClass]
                              ParenFactorClass(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         4
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      ExprOptionalListClass(
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                        PlusOperation(
                                         +
                                        ) [PlusOperation]
                                        TermClass(
                                          NumberConst(
                                           5
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                      ) [ExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [ParenFactorClass]
                            ) [TermOptionalListClass]
                          ) [TermClass]
                        ) [ExprOptionalListClass]
                        PlusOperation(
                         +
                        ) [PlusOperation]
                        TermClass(
                          FactorOptionalParams(
                            Designator(
                              DesigIdent(
                               k
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                            Actuals(
                              ActualParams(
                                ActualParam(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           0
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParam]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         1
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [ActualParams]
                            ) [Actuals]
                          ) [FactorOptionalParams]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                      ) [ExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         x
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        Assignment(
          DesignatorStatementOptionsClassAssignExpression(
            Designator(
              DesigIdent(
               xx
              ) [DesigIdent]
              NoOptionalDesignatorClass(
              ) [NoOptionalDesignatorClass]
            ) [Designator]
            AssignOpClass(
              AssignOperationClass(
              ) [AssignOperationClass]
            ) [AssignOpClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    NewFactorClass(
                      Type(
                       int
                      ) [Type]
                      FactorOptionalSecondClass(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 5
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [FactorOptionalSecondClass]
                    ) [NewFactorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [DesignatorStatementOptionsClassAssignExpression]
        ) [Assignment]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  17:57:53,737 - ===================================
INFO  17:57:53,743 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  17:57:53,744 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  17:57:53,744 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  17:57:53,744 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  17:57:53,744 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  17:57:53,744 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  17:57:53,744 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  17:57:53,745 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  17:57:53,745 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  17:57:53,745 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  17:57:53,745 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  17:57:53,745 - METHOD BODY STARTING!
INFO  17:57:53,745 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  17:57:53,746 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  17:57:53,746 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  17:57:53,746 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  17:57:53,746 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  17:57:53,746 - METHOD BODY ENDING!
INFO  17:57:53,746 - END OF DEFINING FUNCTION k
INFO  17:57:53,746 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  17:57:53,746 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  17:57:53,747 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  17:57:53,747 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  17:57:53,747 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 15
INFO  17:57:53,747 - METHOD BODY STARTING!
INFO  17:57:53,747 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  17:57:53,747 - BEGINNING OF AN ASSIGNEMENT! ON LINE 20
INFO  17:57:53,747 - CONST NUMBER 2 ON LINE 20
INFO  17:57:53,747 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,747 - CONST NUMBER 3 ON LINE 20
INFO  17:57:53,748 - CONST NUMBER 4 ON LINE 20
INFO  17:57:53,748 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,748 - CONST NUMBER 5 ON LINE 20
INFO  17:57:53,748 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,748 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  17:57:53,748 - USING INTEGERS IN TERM! ON LINE 20
INFO  17:57:53,748 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  17:57:53,748 - USING INTEGERS IN TERM! ON LINE 20
INFO  17:57:53,748 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  17:57:53,748 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  17:57:53,748 - CONST NUMBER 0 ON LINE 20
INFO  17:57:53,748 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,748 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,749 - CONST NUMBER 1 ON LINE 20
INFO  17:57:53,749 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,749 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,749 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  17:57:53,749 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  17:57:53,749 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  17:57:53,749 - USING INTEGERS IN TERM! ON LINE 6
INFO  17:57:53,749 - USING INTEGERS IN TERM! ON LINE 20
INFO  17:57:53,749 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 20
INFO  17:57:53,750 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  17:57:53,750 - WE ARE USING A VARIABLE OF TYPE int ON LINE 21
INFO  17:57:53,750 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  17:57:53,750 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  17:57:53,750 - PRINT FUNCTION CALL IN USE! ON LINE 21
INFO  17:57:53,750 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  17:57:53,750 - BEGINNING OF AN ASSIGNEMENT! ON LINE 23
INFO  17:57:53,750 - CONST NUMBER 5 ON LINE 23
INFO  17:57:53,750 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  17:57:53,750 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  17:57:53,750 - USAGE OF KEYWORD NEW! ON LINE 23
INFO  17:57:53,750 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  17:57:53,750 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  17:57:53,750 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 23
INFO  17:57:53,750 - METHOD BODY ENDING!
INFO  17:57:53,750 - END OF DEFINING FUNCTION main
INFO  17:57:53,751 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  17:57:53,751 -  Deklarisanih promenljivih ima = 6
INFO  17:57:53,751 - ===================================
INFO  17:57:53,756 - Parsiranje uspesno zavrseno!
