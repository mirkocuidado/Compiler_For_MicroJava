INFO  19:48:28,170 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  19:48:28,252 - #2 program
INFO  19:48:28,252 - #48 MJProgram
INFO  19:48:28,252 - #48 int
INFO  19:48:28,255 - #48 a
INFO  19:48:28,256 - #36 ,
INFO  19:48:28,256 - #48 b
INFO  19:48:28,257 - #44 [
INFO  19:48:28,257 - #45 ]
INFO  19:48:28,257 - #36 ,
INFO  19:48:28,257 - #48 c
INFO  19:48:28,257 - #36 ,
INFO  19:48:28,257 - #48 d
INFO  19:48:28,257 - #38 ;
INFO  19:48:28,258 - #48 char
INFO  19:48:28,258 - #48 e
INFO  19:48:28,258 - #36 ,
INFO  19:48:28,259 - #48 f
INFO  19:48:28,259 - #44 [
INFO  19:48:28,259 - #45 ]
INFO  19:48:28,259 - #36 ,
INFO  19:48:28,259 - #48 g
INFO  19:48:28,259 - #38 ;
INFO  19:48:28,268 - #48 bool
INFO  19:48:28,268 - #48 h
INFO  19:48:28,269 - #36 ,
INFO  19:48:28,269 - #48 i
INFO  19:48:28,269 - #44 [
INFO  19:48:28,269 - #45 ]
INFO  19:48:28,269 - #38 ;
INFO  19:48:28,269 - #9 const
INFO  19:48:28,269 - #48 int
INFO  19:48:28,270 - #48 aa
INFO  19:48:28,270 - #24 =
INFO  19:48:28,270 - #47 2
INFO  19:48:28,270 - #36 ,
INFO  19:48:28,271 - #48 bb
INFO  19:48:28,271 - #24 =
INFO  19:48:28,272 - #47 6
INFO  19:48:28,272 - #38 ;
INFO  19:48:28,272 - #9 const
INFO  19:48:28,272 - #48 char
INFO  19:48:28,272 - #48 cc
INFO  19:48:28,272 - #24 =
INFO  19:48:28,272 - #49 c
INFO  19:48:28,272 - #36 ,
INFO  19:48:28,273 - #48 dd
INFO  19:48:28,273 - #24 =
INFO  19:48:28,273 - #49 d
INFO  19:48:28,273 - #38 ;
INFO  19:48:28,273 - #9 const
INFO  19:48:28,273 - #48 bool
INFO  19:48:28,273 - #48 ee
INFO  19:48:28,273 - #24 =
INFO  19:48:28,273 - #50 true
INFO  19:48:28,273 - #36 ,
INFO  19:48:28,274 - #48 ff
INFO  19:48:28,274 - #24 =
INFO  19:48:28,274 - #50 false
INFO  19:48:28,274 - #38 ;
INFO  19:48:28,274 - #40 {
INFO  19:48:28,274 - #5 void
INFO  19:48:28,275 - #48 m
INFO  19:48:28,275 - #42 (
INFO  19:48:28,276 - #43 )
INFO  19:48:28,276 - #40 {
INFO  19:48:28,277 - #41 }
INFO  19:48:28,279 - #48 int
INFO  19:48:28,281 - #48 func
INFO  19:48:28,281 - #42 (
INFO  19:48:28,282 - #48 int
INFO  19:48:28,282 - #48 a
INFO  19:48:28,282 - #44 [
INFO  19:48:28,282 - #45 ]
INFO  19:48:28,282 - #36 ,
INFO  19:48:28,282 - #48 int
INFO  19:48:28,282 - #48 b
INFO  19:48:28,282 - #43 )
INFO  19:48:28,282 - #40 {
INFO  19:48:28,282 - #46 return
INFO  19:48:28,282 - #47 0
INFO  19:48:28,283 - #38 ;
INFO  19:48:28,285 - #41 }
INFO  19:48:28,285 - #5 void
INFO  19:48:28,285 - #48 main
INFO  19:48:28,286 - #42 (
INFO  19:48:28,286 - #48 int
INFO  19:48:28,286 - #48 a
INFO  19:48:28,286 - #36 ,
INFO  19:48:28,286 - #48 int
INFO  19:48:28,286 - #48 b
INFO  19:48:28,286 - #44 [
INFO  19:48:28,286 - #45 ]
INFO  19:48:28,286 - #36 ,
INFO  19:48:28,286 - #48 char
INFO  19:48:28,286 - #48 c
INFO  19:48:28,286 - #36 ,
INFO  19:48:28,286 - #48 char
INFO  19:48:28,286 - #48 d
INFO  19:48:28,287 - #44 [
INFO  19:48:28,287 - #45 ]
INFO  19:48:28,287 - #36 ,
INFO  19:48:28,287 - #48 bool
INFO  19:48:28,287 - #48 e
INFO  19:48:28,287 - #36 ,
INFO  19:48:28,287 - #48 bool
INFO  19:48:28,287 - #48 f
INFO  19:48:28,287 - #44 [
INFO  19:48:28,287 - #45 ]
INFO  19:48:28,287 - #43 )
INFO  19:48:28,287 - #40 {
INFO  19:48:28,287 - #48 b
INFO  19:48:28,287 - #24 =
INFO  19:48:28,289 - #48 e
INFO  19:48:28,291 - #39 ?
INFO  19:48:28,292 - #48 c
INFO  19:48:28,293 - #37 :
INFO  19:48:28,293 - #48 b
INFO  19:48:28,293 - #38 ;
INFO  19:48:28,293 - #41 }
INFO  19:48:28,293 - #41 }
INFO  19:48:28,304 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassVoid(
           m
          ) [ReturnValueClassVoid]
          NoFormParam(
          ) [NoFormParam]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          NoStmt(
          ) [NoStmt]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         func
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    NumberConst(
                     0
                    ) [NumberConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      FormParams(
        FormalParamDecls(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  SingleFormalParamDecl(
                    FormalParamDeclClassNoArray(
                      Type(
                       int
                      ) [Type]
                     a
                    ) [FormalParamDeclClassNoArray]
                  ) [SingleFormalParamDecl]
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   b
                  ) [FormalParamDeclClassArray]
                ) [FormalParamDecls]
                FormalParamDeclClassNoArray(
                  Type(
                   char
                  ) [Type]
                 c
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               d
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             e
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
          FormalParamDeclClassArray(
            Type(
             bool
            ) [Type]
           f
          ) [FormalParamDeclClassArray]
        ) [FormalParamDecls]
      ) [FormParams]
      NoVarDeclList(
      ) [NoVarDeclList]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        NoStmt(
        ) [NoStmt]
        Assignment(
          DesignatorStatementClass(
            Designator(
             b
              NoOptionalDesignatorClass(
              ) [NoOptionalDesignatorClass]
            ) [Designator]
            DesignatorStatementOptionsClassAssignExpression(
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassTwoClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                         e
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        NoFactorOptional(
                        ) [NoFactorOptional]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                         c
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        NoFactorOptional(
                        ) [NoFactorOptional]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                         b
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        NoFactorOptional(
                        ) [NoFactorOptional]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassTwoClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [DesignatorStatementClass]
        ) [Assignment]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  19:48:28,304 - ===================================
INFO  19:48:28,308 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  19:48:28,308 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  19:48:28,308 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  19:48:28,308 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  19:48:28,308 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  19:48:28,308 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  19:48:28,309 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  19:48:28,309 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  19:48:28,309 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  19:48:28,309 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  19:48:28,309 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  19:48:28,309 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  19:48:28,309 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  19:48:28,309 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  19:48:28,309 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  19:48:28,309 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  19:48:28,309 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  19:48:28,309 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  19:48:28,309 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  19:48:28,309 - FUNCTION m WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  19:48:28,310 - FUNCTION func WITH RETURN VALUE!  ON LINE 13
INFO  19:48:28,310 - RETURN ASSIGNEMENT! ON LINE 13
INFO  19:48:28,310 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 15
INFO  19:48:28,310 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:48:28,310 - CURRENT VARIABLE IN USE IS e AND IT IS OF TYPE 5
INFO  19:48:28,310 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE 2
INFO  19:48:28,310 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
ERROR 19:48:28,311 - TERNARY FAILED! TYPES: 2 AND 1 ! ON LINE 17
ERROR 19:48:28,311 - ASSIGNEMENT FAILED! TYPES: 1 AND 2 ! ON LINE 17
INFO  19:48:28,311 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  19:48:28,311 -  Deklarisanih promenljivih ima = 9
INFO  19:48:28,311 - ===================================
ERROR 19:48:28,311 - Parsiranje NIJE uspesno zavrseno!
