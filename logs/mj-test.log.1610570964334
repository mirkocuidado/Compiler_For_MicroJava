INFO  21:48:20,029 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  21:48:20,143 - #2 program
INFO  21:48:20,144 - #43 MJProgram
INFO  21:48:20,144 - #43 int
INFO  21:48:20,145 - #43 a
INFO  21:48:20,146 - #31 ,
INFO  21:48:20,147 - #43 b
INFO  21:48:20,147 - #31 ,
INFO  21:48:20,147 - #43 c
INFO  21:48:20,147 - #31 ,
INFO  21:48:20,147 - #43 d
INFO  21:48:20,148 - #33 ;
INFO  21:48:20,148 - #9 const
INFO  21:48:20,149 - #43 int
INFO  21:48:20,149 - #43 y
INFO  21:48:20,149 - #19 =
INFO  21:48:20,149 - #42 3
INFO  21:48:20,150 - #33 ;
INFO  21:48:20,150 - #35 {
INFO  21:48:20,150 - #5 void
INFO  21:48:20,151 - #43 kk
INFO  21:48:20,151 - #37 (
INFO  21:48:20,152 - #38 )
INFO  21:48:20,153 - #35 {
INFO  21:48:20,153 - #36 }
INFO  21:48:20,155 - #43 int
INFO  21:48:20,157 - #43 k
INFO  21:48:20,157 - #37 (
INFO  21:48:20,157 - #43 int
INFO  21:48:20,157 - #43 a
INFO  21:48:20,157 - #31 ,
INFO  21:48:20,157 - #43 int
INFO  21:48:20,157 - #43 b
INFO  21:48:20,157 - #38 )
INFO  21:48:20,158 - #35 {
INFO  21:48:20,158 - #41 return
INFO  21:48:20,158 - #43 b
INFO  21:48:20,159 - #33 ;
INFO  21:48:20,162 - #36 }
INFO  21:48:20,162 - #43 int
INFO  21:48:20,162 - #43 func_check
INFO  21:48:20,162 - #37 (
INFO  21:48:20,162 - #43 int
INFO  21:48:20,163 - #43 a
INFO  21:48:20,163 - #39 [
INFO  21:48:20,163 - #40 ]
INFO  21:48:20,163 - #31 ,
INFO  21:48:20,163 - #43 char
INFO  21:48:20,163 - #43 b
INFO  21:48:20,163 - #39 [
INFO  21:48:20,163 - #40 ]
INFO  21:48:20,163 - #31 ,
INFO  21:48:20,163 - #43 bool
INFO  21:48:20,163 - #43 c
INFO  21:48:20,163 - #38 )
INFO  21:48:20,163 - #43 int
INFO  21:48:20,163 - #43 local
INFO  21:48:20,164 - #33 ;
INFO  21:48:20,164 - #35 {
INFO  21:48:20,164 - #43 local
INFO  21:48:20,164 - #19 =
INFO  21:48:20,164 - #43 a
INFO  21:48:20,165 - #39 [
INFO  21:48:20,166 - #42 0
INFO  21:48:20,169 - #40 ]
INFO  21:48:20,169 - #33 ;
INFO  21:48:20,170 - #18 print
INFO  21:48:20,170 - #37 (
INFO  21:48:20,170 - #43 local
INFO  21:48:20,171 - #38 )
INFO  21:48:20,172 - #33 ;
INFO  21:48:20,173 - #43 local
INFO  21:48:20,173 - #19 =
INFO  21:48:20,173 - #43 local
INFO  21:48:20,173 - #46 *
INFO  21:48:20,173 - #42 2
INFO  21:48:20,173 - #49 +
INFO  21:48:20,174 - #43 local
INFO  21:48:20,174 - #50 -
INFO  21:48:20,174 - #43 a
INFO  21:48:20,174 - #39 [
INFO  21:48:20,174 - #42 1
INFO  21:48:20,174 - #40 ]
INFO  21:48:20,174 - #33 ;
INFO  21:48:20,175 - #18 print
INFO  21:48:20,175 - #37 (
INFO  21:48:20,175 - #43 local
INFO  21:48:20,175 - #38 )
INFO  21:48:20,175 - #33 ;
INFO  21:48:20,175 - #41 return
INFO  21:48:20,175 - #43 local
INFO  21:48:20,175 - #33 ;
INFO  21:48:20,175 - #36 }
INFO  21:48:20,175 - #5 void
INFO  21:48:20,175 - #43 main
INFO  21:48:20,175 - #37 (
INFO  21:48:20,175 - #38 )
INFO  21:48:20,175 - #43 int
INFO  21:48:20,175 - #43 x
INFO  21:48:20,176 - #33 ;
INFO  21:48:20,176 - #43 char
INFO  21:48:20,176 - #43 z
INFO  21:48:20,176 - #33 ;
INFO  21:48:20,176 - #43 bool
INFO  21:48:20,176 - #43 p
INFO  21:48:20,176 - #33 ;
INFO  21:48:20,176 - #43 char
INFO  21:48:20,176 - #43 xx
INFO  21:48:20,176 - #39 [
INFO  21:48:20,176 - #40 ]
INFO  21:48:20,176 - #33 ;
INFO  21:48:20,177 - #43 char
INFO  21:48:20,177 - #43 yy
INFO  21:48:20,177 - #39 [
INFO  21:48:20,177 - #40 ]
INFO  21:48:20,177 - #33 ;
INFO  21:48:20,177 - #43 int
INFO  21:48:20,177 - #43 br
INFO  21:48:20,177 - #39 [
INFO  21:48:20,177 - #40 ]
INFO  21:48:20,177 - #33 ;
INFO  21:48:20,177 - #35 {
INFO  21:48:20,177 - #43 br
INFO  21:48:20,178 - #19 =
INFO  21:48:20,178 - #16 new
INFO  21:48:20,178 - #43 int
INFO  21:48:20,178 - #39 [
INFO  21:48:20,178 - #42 10
INFO  21:48:20,178 - #40 ]
INFO  21:48:20,178 - #33 ;
INFO  21:48:20,179 - #43 x
INFO  21:48:20,179 - #19 =
INFO  21:48:20,179 - #42 1
INFO  21:48:20,179 - #33 ;
INFO  21:48:20,180 - #43 x
INFO  21:48:20,180 - #19 =
INFO  21:48:20,180 - #43 x
INFO  21:48:20,180 - #34 ?
INFO  21:48:20,180 - #42 2
INFO  21:48:20,183 - #32 :
INFO  21:48:20,183 - #42 3
INFO  21:48:20,184 - #33 ;
INFO  21:48:20,184 - #18 print
INFO  21:48:20,184 - #37 (
INFO  21:48:20,184 - #43 x
INFO  21:48:20,184 - #38 )
INFO  21:48:20,185 - #33 ;
INFO  21:48:20,185 - #36 }
INFO  21:48:20,185 - #36 }
INFO  21:48:20,195 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassVoid(
             kk
            ) [ReturnValueClassVoid]
            NoFormParam(
            ) [NoFormParam]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            NoStmt(
            ) [NoStmt]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           k
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassNoArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           b
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         func_check
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               b
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             c
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               local
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         local
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   a
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               local
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     local
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               local
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          TermOptionalListClass(
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                            MultiplyOperationClass(
                             *
                            ) [MultiplyOperationClass]
                            NumberConst(
                             2
                            ) [NumberConst]
                          ) [TermOptionalListClass]
                        ) [TermClass]
                        ExprOptionalListClass(
                          ExprOptionalListClass(
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                            PlusOperation(
                             +
                            ) [PlusOperation]
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   local
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                          ) [ExprOptionalListClass]
                          MinusOperation(
                           -
                          ) [MinusOperation]
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 a
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           1
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                        ) [ExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           local
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         local
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  NoVarDeclList(
                  ) [NoVarDeclList]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       x
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   char
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     z
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 bool
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   p
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 xx
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassArray(
               yy
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             br
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     br
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NewFactorClass(
                            Type(
                             int
                            ) [Type]
                            FactorOptionalSecondClass(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       10
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [FactorOptionalSecondClass]
                          ) [NewFactorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   x
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         1
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassTwoClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           x
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                TernaryClass(
                ) [TernaryClass]
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       2
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                ColonClass(
                ) [ColonClass]
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       3
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassTwoClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       x
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  21:48:20,197 - ===================================
INFO  21:48:20,202 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  21:48:20,203 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  21:48:20,203 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  21:48:20,203 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  21:48:20,203 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  21:48:20,203 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  21:48:20,203 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  21:48:20,204 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  21:48:20,204 - FUNCTION kk WITH VOID AS RETURN VALUE!  ON LINE 6
INFO  21:48:20,204 - METHOD BODY STARTING!
INFO  21:48:20,204 - METHOD BODY ENDING!
INFO  21:48:20,204 - END OF DEFINING FUNCTION kk
INFO  21:48:20,204 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 8
INFO  21:48:20,205 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 8
INFO  21:48:20,205 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 8
INFO  21:48:20,205 - METHOD BODY STARTING!
INFO  21:48:20,205 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  21:48:20,205 - WE ARE USING A VARIABLE OF TYPE int ON LINE 8
INFO  21:48:20,205 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 8
INFO  21:48:20,205 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 8
INFO  21:48:20,205 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 8
INFO  21:48:20,205 - METHOD BODY ENDING!
INFO  21:48:20,206 - END OF DEFINING FUNCTION k
INFO  21:48:20,206 - FUNCTION func_check WITH RETURN VALUE OF TYPE int ON LINE 10
INFO  21:48:20,206 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 10
INFO  21:48:20,206 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE char ON LINE 10
INFO  21:48:20,206 - FORMAL PARAMETER c DEFINED AND IT IS OF TYPE boolean ON LINE 10
INFO  21:48:20,206 - VARIABLE local IS BEING DEFINED! ON LINE 11
INFO  21:48:20,206 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 11
INFO  21:48:20,206 - METHOD BODY STARTING!
INFO  21:48:20,206 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  21:48:20,206 - BEGINNING OF AN ASSIGNEMENT! ON LINE 13
INFO  21:48:20,207 - CONST NUMBER 0 ON LINE 13
INFO  21:48:20,207 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  21:48:20,207 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  21:48:20,207 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  21:48:20,207 - WE ARE USING AN ARRAY OF TYPE int ON LINE 13
INFO  21:48:20,207 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  21:48:20,207 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  21:48:20,207 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 13
INFO  21:48:20,207 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  21:48:20,207 - WE ARE USING A VARIABLE OF TYPE int ON LINE 14
INFO  21:48:20,207 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  21:48:20,208 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  21:48:20,208 - PRINT FUNCTION CALL IN USE! ON LINE 14
INFO  21:48:20,209 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  21:48:20,209 - BEGINNING OF AN ASSIGNEMENT! ON LINE 15
INFO  21:48:20,209 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  21:48:20,209 - WE ARE USING A VARIABLE OF TYPE int ON LINE 15
INFO  21:48:20,209 - CONST NUMBER 2 ON LINE 15
INFO  21:48:20,209 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  21:48:20,209 - USING INTEGERS IN TERM! ON LINE 15
INFO  21:48:20,209 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  21:48:20,209 - WE ARE USING A VARIABLE OF TYPE int ON LINE 15
INFO  21:48:20,209 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  21:48:20,209 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  21:48:20,209 - CONST NUMBER 1 ON LINE 15
INFO  21:48:20,209 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  21:48:20,210 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  21:48:20,210 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  21:48:20,210 - WE ARE USING AN ARRAY OF TYPE int ON LINE 15
INFO  21:48:20,210 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  21:48:20,210 - USING INTEGERS IN TERM! ON LINE 18
INFO  21:48:20,210 - USING INTEGERS IN TERM! ON LINE 15
INFO  21:48:20,210 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 15
INFO  21:48:20,210 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  21:48:20,210 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  21:48:20,210 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  21:48:20,210 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  21:48:20,210 - PRINT FUNCTION CALL IN USE! ON LINE 16
INFO  21:48:20,210 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  21:48:20,210 - WE ARE USING A VARIABLE OF TYPE int ON LINE 17
INFO  21:48:20,211 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  21:48:20,211 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  21:48:20,211 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 17
INFO  21:48:20,211 - METHOD BODY ENDING!
INFO  21:48:20,211 - END OF DEFINING FUNCTION func_check
INFO  21:48:20,211 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 22
INFO  21:48:20,211 - VARIABLE x IS BEING DEFINED! ON LINE 23
INFO  21:48:20,211 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 23
INFO  21:48:20,211 - VARIABLE z IS BEING DEFINED! ON LINE 24
INFO  21:48:20,211 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 24
INFO  21:48:20,211 - VARIABLE p IS BEING DEFINED! ON LINE 25
INFO  21:48:20,212 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 25
INFO  21:48:20,212 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 26
INFO  21:48:20,212 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 26
INFO  21:48:20,212 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 27
INFO  21:48:20,212 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 27
INFO  21:48:20,212 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 28
INFO  21:48:20,212 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 28
INFO  21:48:20,212 - METHOD BODY STARTING!
INFO  21:48:20,212 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  21:48:20,212 - BEGINNING OF AN ASSIGNEMENT! ON LINE 31
INFO  21:48:20,212 - CONST NUMBER 10 ON LINE 31
INFO  21:48:20,212 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  21:48:20,213 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  21:48:20,213 - USAGE OF KEYWORD NEW! ON LINE 31
INFO  21:48:20,213 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  21:48:20,213 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  21:48:20,213 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 31
INFO  21:48:20,213 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  21:48:20,213 - BEGINNING OF AN ASSIGNEMENT! ON LINE 53
INFO  21:48:20,213 - CONST NUMBER 1 ON LINE 53
INFO  21:48:20,213 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  21:48:20,214 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  21:48:20,214 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 53
INFO  21:48:20,214 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  21:48:20,214 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  21:48:20,214 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  21:48:20,214 - WE ARE USING A VARIABLE OF TYPE int ON LINE 58
INFO  21:48:20,214 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  21:48:20,214 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  21:48:20,214 - CONST NUMBER 2 ON LINE 58
INFO  21:48:20,215 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  21:48:20,215 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  21:48:20,215 - CONST NUMBER 3 ON LINE 58
INFO  21:48:20,215 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  21:48:20,215 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  21:48:20,215 - SUCCESSFUL TERNARY! TYPES: int AND int ! ON LINE 58
INFO  21:48:20,215 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 58
INFO  21:48:20,215 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  21:48:20,215 - WE ARE USING A VARIABLE OF TYPE int ON LINE 59
INFO  21:48:20,215 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  21:48:20,215 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  21:48:20,215 - PRINT FUNCTION CALL IN USE! ON LINE 59
INFO  21:48:20,215 - METHOD BODY ENDING!
INFO  21:48:20,217 - END OF DEFINING FUNCTION main
INFO  21:48:20,217 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  21:48:20,218 -  Deklarisanih promenljivih ima = 11
INFO  21:48:20,218 - ===================================
INFO  21:48:20,232 - Parsiranje uspesno zavrseno!
