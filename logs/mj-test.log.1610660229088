INFO  22:35:17,703 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  22:35:17,782 - #2 program
INFO  22:35:17,782 - #43 MJProgram
INFO  22:35:17,783 - #43 int
INFO  22:35:17,784 - #43 a
INFO  22:35:17,785 - #31 ,
INFO  22:35:17,786 - #43 b
INFO  22:35:17,786 - #31 ,
INFO  22:35:17,786 - #43 c
INFO  22:35:17,786 - #31 ,
INFO  22:35:17,786 - #43 d
INFO  22:35:17,786 - #33 ;
INFO  22:35:17,786 - #43 int
INFO  22:35:17,787 - #43 i
INFO  22:35:17,787 - #33 ;
INFO  22:35:17,787 - #9 const
INFO  22:35:17,787 - #43 int
INFO  22:35:17,787 - #43 term
INFO  22:35:17,787 - #19 =
INFO  22:35:17,787 - #42 0
INFO  22:35:17,788 - #33 ;
INFO  22:35:17,788 - #9 const
INFO  22:35:17,799 - #43 int
INFO  22:35:17,799 - #43 y
INFO  22:35:17,799 - #19 =
INFO  22:35:17,799 - #42 3
INFO  22:35:17,799 - #33 ;
INFO  22:35:17,800 - #35 {
INFO  22:35:17,800 - #5 void
INFO  22:35:17,801 - #43 main
INFO  22:35:17,801 - #37 (
INFO  22:35:17,801 - #38 )
INFO  22:35:17,801 - #43 int
INFO  22:35:17,802 - #43 x
INFO  22:35:17,802 - #33 ;
INFO  22:35:17,802 - #43 char
INFO  22:35:17,802 - #43 z
INFO  22:35:17,802 - #33 ;
INFO  22:35:17,802 - #43 bool
INFO  22:35:17,803 - #43 p
INFO  22:35:17,803 - #33 ;
INFO  22:35:17,803 - #43 bool
INFO  22:35:17,803 - #43 r
INFO  22:35:17,803 - #33 ;
INFO  22:35:17,803 - #43 bool
INFO  22:35:17,803 - #43 q
INFO  22:35:17,803 - #33 ;
INFO  22:35:17,803 - #43 char
INFO  22:35:17,803 - #43 xx
INFO  22:35:17,803 - #39 [
INFO  22:35:17,803 - #40 ]
INFO  22:35:17,803 - #33 ;
INFO  22:35:17,803 - #43 char
INFO  22:35:17,803 - #43 yy
INFO  22:35:17,804 - #39 [
INFO  22:35:17,804 - #40 ]
INFO  22:35:17,804 - #33 ;
INFO  22:35:17,804 - #43 int
INFO  22:35:17,804 - #43 br
INFO  22:35:17,804 - #39 [
INFO  22:35:17,804 - #40 ]
INFO  22:35:17,804 - #33 ;
INFO  22:35:17,804 - #43 int
INFO  22:35:17,804 - #43 indexes
INFO  22:35:17,804 - #39 [
INFO  22:35:17,804 - #40 ]
INFO  22:35:17,804 - #33 ;
INFO  22:35:17,804 - #43 int
INFO  22:35:17,804 - #43 dd
INFO  22:35:17,804 - #33 ;
INFO  22:35:17,805 - #43 int
INFO  22:35:17,805 - #43 ee
INFO  22:35:17,805 - #33 ;
INFO  22:35:17,805 - #43 int
INFO  22:35:17,805 - #43 ff
INFO  22:35:17,805 - #33 ;
INFO  22:35:17,805 - #43 int
INFO  22:35:17,805 - #43 gg
INFO  22:35:17,805 - #33 ;
INFO  22:35:17,805 - #43 char
INFO  22:35:17,805 - #43 hh
INFO  22:35:17,805 - #33 ;
INFO  22:35:17,805 - #43 int
INFO  22:35:17,805 - #43 ii
INFO  22:35:17,805 - #33 ;
INFO  22:35:17,805 - #35 {
INFO  22:35:17,806 - #43 i
INFO  22:35:17,807 - #19 =
INFO  22:35:17,809 - #42 0
INFO  22:35:17,810 - #33 ;
INFO  22:35:17,812 - #43 c
INFO  22:35:17,812 - #19 =
INFO  22:35:17,812 - #42 0
INFO  22:35:17,812 - #33 ;
INFO  22:35:17,812 - #12 do
INFO  22:35:17,812 - #35 {
INFO  22:35:17,813 - #43 i
INFO  22:35:17,813 - #28 ++
INFO  22:35:17,814 - #33 ;
INFO  22:35:17,814 - #14 if
INFO  22:35:17,814 - #37 (
INFO  22:35:17,814 - #43 c
INFO  22:35:17,814 - #20 ==
INFO  22:35:17,814 - #42 0
INFO  22:35:17,815 - #38 )
INFO  22:35:17,817 - #4 continue
INFO  22:35:17,817 - #33 ;
INFO  22:35:17,818 - #43 c
INFO  22:35:17,819 - #28 ++
INFO  22:35:17,819 - #33 ;
INFO  22:35:17,819 - #36 }
INFO  22:35:17,819 - #13 while
INFO  22:35:17,820 - #37 (
INFO  22:35:17,820 - #43 i
INFO  22:35:17,823 - #25 <=
INFO  22:35:17,824 - #42 5
INFO  22:35:17,827 - #26 &&
INFO  22:35:17,827 - #43 c
INFO  22:35:17,830 - #25 <=
INFO  22:35:17,831 - #42 2
INFO  22:35:17,831 - #38 )
INFO  22:35:17,831 - #33 ;
INFO  22:35:17,833 - #18 print
INFO  22:35:17,834 - #37 (
INFO  22:35:17,834 - #43 i
INFO  22:35:17,834 - #38 )
INFO  22:35:17,835 - #33 ;
INFO  22:35:17,835 - #18 print
INFO  22:35:17,835 - #37 (
INFO  22:35:17,835 - #43 c
INFO  22:35:17,835 - #38 )
INFO  22:35:17,835 - #33 ;
INFO  22:35:17,835 - #36 }
INFO  22:35:17,835 - #36 }
INFO  22:35:17,845 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          NoGroupDecl(
          ) [NoGroupDecl]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListClass(
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       a
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassNoArray(
                     b
                    ) [VarClassNoArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   c
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 d
                ) [VarClassNoArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               i
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          VarDeclListClass(
                            VarDeclListClass(
                              VarDeclListClass(
                                VarDeclListClass(
                                  VarDeclListClass(
                                    NoVarDeclList(
                                    ) [NoVarDeclList]
                                    VarDeclClass(
                                      Type(
                                       int
                                      ) [Type]
                                      VarListSingle(
                                        VarClassNoArray(
                                         x
                                        ) [VarClassNoArray]
                                      ) [VarListSingle]
                                    ) [VarDeclClass]
                                  ) [VarDeclListClass]
                                  VarDeclClass(
                                    Type(
                                     char
                                    ) [Type]
                                    VarListSingle(
                                      VarClassNoArray(
                                       z
                                      ) [VarClassNoArray]
                                    ) [VarListSingle]
                                  ) [VarDeclClass]
                                ) [VarDeclListClass]
                                VarDeclClass(
                                  Type(
                                   bool
                                  ) [Type]
                                  VarListSingle(
                                    VarClassNoArray(
                                     p
                                    ) [VarClassNoArray]
                                  ) [VarListSingle]
                                ) [VarDeclClass]
                              ) [VarDeclListClass]
                              VarDeclClass(
                                Type(
                                 bool
                                ) [Type]
                                VarListSingle(
                                  VarClassNoArray(
                                   r
                                  ) [VarClassNoArray]
                                ) [VarListSingle]
                              ) [VarDeclClass]
                            ) [VarDeclListClass]
                            VarDeclClass(
                              Type(
                               bool
                              ) [Type]
                              VarListSingle(
                                VarClassNoArray(
                                 q
                                ) [VarClassNoArray]
                              ) [VarListSingle]
                            ) [VarDeclClass]
                          ) [VarDeclListClass]
                          VarDeclClass(
                            Type(
                             char
                            ) [Type]
                            VarListSingle(
                              VarClassArray(
                               xx
                              ) [VarClassArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           char
                          ) [Type]
                          VarListSingle(
                            VarClassArray(
                             yy
                            ) [VarClassArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassArray(
                           br
                          ) [VarClassArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         indexes
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       i
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     c
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementPlusPlus(
                          Designator(
                            DesigIdent(
                             i
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorStatementPlusPlus]
                      ) [Assignment]
                    ) [Statements]
                    IfStatement(
                      IfConditionNoError(
                        ConditionClass(
                          CondTermClass(
                            CondFactClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         c
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                              CondFactOptionalClass(
                                RelationOperationClassEqualComparation(
                                ) [RelationOperationClassEqualComparation]
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       0
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [CondFactOptionalClass]
                            ) [CondFactClass]
                            NoCondTermOptionalClass(
                            ) [NoCondTermOptionalClass]
                          ) [CondTermClass]
                          NoConditionOptionalClass(
                          ) [NoConditionOptionalClass]
                        ) [ConditionClass]
                      ) [IfConditionNoError]
                      ContinueClass(
                        ContinueKeyWord(
                        ) [ContinueKeyWord]
                      ) [ContinueClass]
                      Empty(
                      ) [Empty]
                      NoOptionalStatement(
                      ) [NoOptionalStatement]
                    ) [IfStatement]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementPlusPlus(
                      Designator(
                        DesigIdent(
                         c
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorStatementPlusPlus]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               i
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      LessOrEqualOperationClass(
                      ) [LessOrEqualOperationClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             5
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  CondTermOptionalClass(
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                    FakeAndClass(
                    ) [FakeAndClass]
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 c
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      CondFactOptionalClass(
                        LessOrEqualOperationClass(
                        ) [LessOrEqualOperationClass]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               2
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [CondFactOptionalClass]
                    ) [CondFactClass]
                  ) [CondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         i
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       c
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  22:35:17,846 - ===================================
INFO  22:35:17,851 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  22:35:17,851 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  22:35:17,851 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  22:35:17,851 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  22:35:17,851 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  22:35:17,851 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:35:17,851 - VARIABLE i IS BEING DEFINED! ON LINE 2
INFO  22:35:17,851 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:35:17,851 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  22:35:17,851 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  22:35:17,851 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  22:35:17,851 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  22:35:17,851 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 8
INFO  22:35:17,852 - VARIABLE x IS BEING DEFINED! ON LINE 9
INFO  22:35:17,852 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 9
INFO  22:35:17,852 - VARIABLE z IS BEING DEFINED! ON LINE 10
INFO  22:35:17,852 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 10
INFO  22:35:17,852 - VARIABLE p IS BEING DEFINED! ON LINE 11
INFO  22:35:17,852 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 11
INFO  22:35:17,852 - VARIABLE r IS BEING DEFINED! ON LINE 12
INFO  22:35:17,852 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 12
INFO  22:35:17,852 - VARIABLE q IS BEING DEFINED! ON LINE 13
INFO  22:35:17,852 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 13
INFO  22:35:17,852 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 14
INFO  22:35:17,852 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 14
INFO  22:35:17,852 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 15
INFO  22:35:17,852 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  22:35:17,852 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 16
INFO  22:35:17,852 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 16
INFO  22:35:17,853 - ARRAY VARIABLE indexes IS BEING DEFINED! ON LINE 17
INFO  22:35:17,853 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 17
INFO  22:35:17,853 - VARIABLE dd IS BEING DEFINED! ON LINE 18
INFO  22:35:17,853 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 18
INFO  22:35:17,853 - VARIABLE ee IS BEING DEFINED! ON LINE 19
INFO  22:35:17,853 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 19
INFO  22:35:17,853 - VARIABLE ff IS BEING DEFINED! ON LINE 20
INFO  22:35:17,853 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 20
INFO  22:35:17,853 - VARIABLE gg IS BEING DEFINED! ON LINE 21
INFO  22:35:17,853 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 21
INFO  22:35:17,853 - VARIABLE hh IS BEING DEFINED! ON LINE 22
INFO  22:35:17,853 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 22
INFO  22:35:17,853 - VARIABLE ii IS BEING DEFINED! ON LINE 23
INFO  22:35:17,854 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 23
INFO  22:35:17,854 - METHOD BODY STARTING!
INFO  22:35:17,854 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:35:17,854 - BEGINNING OF AN ASSIGNEMENT! ON LINE 26
INFO  22:35:17,854 - CONST NUMBER 0 ON LINE 26
INFO  22:35:17,854 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  22:35:17,854 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  22:35:17,854 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 26
INFO  22:35:17,854 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:35:17,854 - BEGINNING OF AN ASSIGNEMENT! ON LINE 27
INFO  22:35:17,854 - CONST NUMBER 0 ON LINE 27
INFO  22:35:17,854 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  22:35:17,854 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  22:35:17,854 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 27
INFO  22:35:17,854 - BEGINNING OF A DO...WHILE LOOP!
INFO  22:35:17,854 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:35:17,854 - USING ++ ON i ON LINE 30
INFO  22:35:17,854 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:35:17,855 - WE ARE USING A VARIABLE OF TYPE int ON LINE 32
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:35:17,855 - CONST NUMBER 0 ON LINE 32
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:35:17,855 - USING TWO EXPRESSIONS OF TYPE int ON LINE 32
INFO  22:35:17,855 - USING CONTINUE KEYWORD!
INFO  22:35:17,855 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:35:17,855 - USING ++ ON c ON LINE 34
INFO  22:35:17,855 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:35:17,855 - WE ARE USING A VARIABLE OF TYPE int ON LINE 36
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,855 - CONST NUMBER 5 ON LINE 36
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,855 - USING TWO EXPRESSIONS OF TYPE int ON LINE 36
INFO  22:35:17,855 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:35:17,855 - WE ARE USING A VARIABLE OF TYPE int ON LINE 36
INFO  22:35:17,855 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,856 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,856 - CONST NUMBER 2 ON LINE 36
INFO  22:35:17,856 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,856 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  22:35:17,856 - USING TWO EXPRESSIONS OF TYPE int ON LINE 36
INFO  22:35:17,856 - ENDING OF A DO...WHILE LOOP! ON LINE 28
INFO  22:35:17,856 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:35:17,856 - WE ARE USING A VARIABLE OF TYPE int ON LINE 38
INFO  22:35:17,856 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  22:35:17,856 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  22:35:17,856 - PRINT FUNCTION CALL IN USE! ON LINE 38
INFO  22:35:17,856 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE int
INFO  22:35:17,856 - WE ARE USING A VARIABLE OF TYPE int ON LINE 39
INFO  22:35:17,856 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  22:35:17,856 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  22:35:17,856 - PRINT FUNCTION CALL IN USE! ON LINE 39
INFO  22:35:17,856 - METHOD BODY ENDING!
INFO  22:35:17,856 - END OF DEFINING FUNCTION main
INFO  22:35:17,856 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  22:35:17,856 -  Deklarisanih promenljivih ima = 20
INFO  22:35:17,856 - ===================================
INFO  22:35:17,870 - Parsiranje uspesno zavrseno!
