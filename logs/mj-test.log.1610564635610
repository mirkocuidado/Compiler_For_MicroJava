INFO  20:02:37,480 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  20:02:37,536 - #2 program
INFO  20:02:37,536 - #43 MJProgram
INFO  20:02:37,536 - #43 int
INFO  20:02:37,537 - #43 a
INFO  20:02:37,538 - #31 ,
INFO  20:02:37,538 - #43 b
INFO  20:02:37,538 - #31 ,
INFO  20:02:37,538 - #43 c
INFO  20:02:37,538 - #31 ,
INFO  20:02:37,538 - #43 d
INFO  20:02:37,538 - #33 ;
INFO  20:02:37,538 - #9 const
INFO  20:02:37,539 - #43 int
INFO  20:02:37,539 - #43 y
INFO  20:02:37,539 - #19 =
INFO  20:02:37,539 - #42 3
INFO  20:02:37,539 - #33 ;
INFO  20:02:37,539 - #35 {
INFO  20:02:37,540 - #5 void
INFO  20:02:37,540 - #43 kk
INFO  20:02:37,540 - #37 (
INFO  20:02:37,541 - #38 )
INFO  20:02:37,541 - #35 {
INFO  20:02:37,542 - #36 }
INFO  20:02:37,543 - #43 int
INFO  20:02:37,545 - #43 k
INFO  20:02:37,545 - #37 (
INFO  20:02:37,545 - #43 int
INFO  20:02:37,545 - #43 a
INFO  20:02:37,545 - #31 ,
INFO  20:02:37,545 - #43 int
INFO  20:02:37,545 - #43 b
INFO  20:02:37,545 - #38 )
INFO  20:02:37,545 - #35 {
INFO  20:02:37,546 - #41 return
INFO  20:02:37,546 - #43 b
INFO  20:02:37,546 - #33 ;
INFO  20:02:37,549 - #36 }
INFO  20:02:37,549 - #43 int
INFO  20:02:37,549 - #43 func_check
INFO  20:02:37,549 - #37 (
INFO  20:02:37,549 - #43 int
INFO  20:02:37,550 - #43 a
INFO  20:02:37,550 - #39 [
INFO  20:02:37,550 - #40 ]
INFO  20:02:37,550 - #31 ,
INFO  20:02:37,550 - #43 char
INFO  20:02:37,550 - #43 b
INFO  20:02:37,550 - #39 [
INFO  20:02:37,550 - #40 ]
INFO  20:02:37,550 - #31 ,
INFO  20:02:37,550 - #43 bool
INFO  20:02:37,550 - #43 c
INFO  20:02:37,550 - #38 )
INFO  20:02:37,550 - #43 int
INFO  20:02:37,550 - #43 local
INFO  20:02:37,550 - #33 ;
INFO  20:02:37,550 - #35 {
INFO  20:02:37,551 - #43 local
INFO  20:02:37,551 - #19 =
INFO  20:02:37,551 - #43 a
INFO  20:02:37,552 - #39 [
INFO  20:02:37,552 - #42 0
INFO  20:02:37,553 - #40 ]
INFO  20:02:37,553 - #33 ;
INFO  20:02:37,554 - #18 print
INFO  20:02:37,554 - #37 (
INFO  20:02:37,554 - #43 local
INFO  20:02:37,554 - #38 )
INFO  20:02:37,555 - #33 ;
INFO  20:02:37,555 - #43 local
INFO  20:02:37,555 - #19 =
INFO  20:02:37,555 - #43 local
INFO  20:02:37,555 - #46 *
INFO  20:02:37,555 - #42 2
INFO  20:02:37,555 - #49 +
INFO  20:02:37,555 - #43 local
INFO  20:02:37,555 - #50 -
INFO  20:02:37,555 - #43 a
INFO  20:02:37,556 - #39 [
INFO  20:02:37,556 - #42 1
INFO  20:02:37,556 - #40 ]
INFO  20:02:37,556 - #33 ;
INFO  20:02:37,556 - #18 print
INFO  20:02:37,556 - #37 (
INFO  20:02:37,556 - #43 local
INFO  20:02:37,556 - #38 )
INFO  20:02:37,556 - #33 ;
INFO  20:02:37,556 - #41 return
INFO  20:02:37,556 - #43 local
INFO  20:02:37,556 - #33 ;
INFO  20:02:37,556 - #36 }
INFO  20:02:37,556 - #5 void
INFO  20:02:37,556 - #43 main
INFO  20:02:37,557 - #37 (
INFO  20:02:37,557 - #38 )
INFO  20:02:37,557 - #43 int
INFO  20:02:37,557 - #43 x
INFO  20:02:37,557 - #33 ;
INFO  20:02:37,557 - #43 char
INFO  20:02:37,557 - #43 z
INFO  20:02:37,557 - #33 ;
INFO  20:02:37,557 - #43 bool
INFO  20:02:37,557 - #43 p
INFO  20:02:37,557 - #33 ;
INFO  20:02:37,557 - #43 char
INFO  20:02:37,557 - #43 xx
INFO  20:02:37,557 - #39 [
INFO  20:02:37,557 - #40 ]
INFO  20:02:37,557 - #33 ;
INFO  20:02:37,557 - #43 char
INFO  20:02:37,557 - #43 yy
INFO  20:02:37,557 - #39 [
INFO  20:02:37,557 - #40 ]
INFO  20:02:37,558 - #33 ;
INFO  20:02:37,558 - #43 int
INFO  20:02:37,558 - #43 br
INFO  20:02:37,558 - #39 [
INFO  20:02:37,558 - #40 ]
INFO  20:02:37,558 - #33 ;
INFO  20:02:37,558 - #35 {
INFO  20:02:37,558 - #17 read
INFO  20:02:37,558 - #37 (
INFO  20:02:37,558 - #43 x
INFO  20:02:37,558 - #38 )
INFO  20:02:37,558 - #33 ;
INFO  20:02:37,558 - #36 }
INFO  20:02:37,559 - #36 }
INFO  20:02:37,566 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassVoid(
             kk
            ) [ReturnValueClassVoid]
            NoFormParam(
            ) [NoFormParam]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            NoStmt(
            ) [NoStmt]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           k
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassNoArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           b
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         func_check
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               b
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             c
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               local
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         local
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   a
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               local
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     local
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               local
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          TermOptionalListClass(
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                            MultiplyOperationClass(
                             *
                            ) [MultiplyOperationClass]
                            NumberConst(
                             2
                            ) [NumberConst]
                          ) [TermOptionalListClass]
                        ) [TermClass]
                        ExprOptionalListClass(
                          ExprOptionalListClass(
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                            PlusOperation(
                             +
                            ) [PlusOperation]
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   local
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                          ) [ExprOptionalListClass]
                          MinusOperation(
                           -
                          ) [MinusOperation]
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 a
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           1
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                        ) [ExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           local
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         local
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  NoVarDeclList(
                  ) [NoVarDeclList]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       x
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   char
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     z
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 bool
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   p
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 xx
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassArray(
               yy
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             br
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        NoStmt(
        ) [NoStmt]
        ReadClass(
          Designator(
            DesigIdent(
             x
            ) [DesigIdent]
            NoOptionalDesignatorClass(
            ) [NoOptionalDesignatorClass]
          ) [Designator]
        ) [ReadClass]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  20:02:37,567 - ===================================
INFO  20:02:37,570 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  20:02:37,570 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  20:02:37,570 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  20:02:37,570 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  20:02:37,570 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  20:02:37,570 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  20:02:37,570 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  20:02:37,570 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  20:02:37,570 - FUNCTION kk WITH VOID AS RETURN VALUE!  ON LINE 6
INFO  20:02:37,570 - METHOD BODY STARTING!
INFO  20:02:37,571 - METHOD BODY ENDING!
INFO  20:02:37,571 - END OF DEFINING FUNCTION kk
INFO  20:02:37,571 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 8
INFO  20:02:37,571 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 8
INFO  20:02:37,571 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 8
INFO  20:02:37,571 - METHOD BODY STARTING!
INFO  20:02:37,571 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  20:02:37,571 - WE ARE USING A VARIABLE OF TYPE int ON LINE 8
INFO  20:02:37,571 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 8
INFO  20:02:37,571 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 8
INFO  20:02:37,571 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 8
INFO  20:02:37,571 - METHOD BODY ENDING!
INFO  20:02:37,571 - END OF DEFINING FUNCTION k
INFO  20:02:37,571 - FUNCTION func_check WITH RETURN VALUE OF TYPE int ON LINE 10
INFO  20:02:37,571 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 10
INFO  20:02:37,571 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE char ON LINE 10
INFO  20:02:37,571 - FORMAL PARAMETER c DEFINED AND IT IS OF TYPE boolean ON LINE 10
INFO  20:02:37,572 - VARIABLE local IS BEING DEFINED! ON LINE 11
INFO  20:02:37,572 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 11
INFO  20:02:37,572 - METHOD BODY STARTING!
INFO  20:02:37,572 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  20:02:37,572 - BEGINNING OF AN ASSIGNEMENT! ON LINE 13
INFO  20:02:37,572 - CONST NUMBER 0 ON LINE 13
INFO  20:02:37,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  20:02:37,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  20:02:37,572 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  20:02:37,572 - WE ARE USING AN ARRAY OF TYPE int ON LINE 13
INFO  20:02:37,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  20:02:37,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  20:02:37,572 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 13
INFO  20:02:37,572 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  20:02:37,572 - WE ARE USING A VARIABLE OF TYPE int ON LINE 14
INFO  20:02:37,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  20:02:37,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 14
INFO  20:02:37,572 - PRINT FUNCTION CALL IN USE! ON LINE 14
INFO  20:02:37,572 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  20:02:37,572 - BEGINNING OF AN ASSIGNEMENT! ON LINE 15
INFO  20:02:37,572 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  20:02:37,572 - WE ARE USING A VARIABLE OF TYPE int ON LINE 15
INFO  20:02:37,573 - CONST NUMBER 2 ON LINE 15
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  20:02:37,573 - USING INTEGERS IN TERM! ON LINE 15
INFO  20:02:37,573 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  20:02:37,573 - WE ARE USING A VARIABLE OF TYPE int ON LINE 15
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  20:02:37,573 - CONST NUMBER 1 ON LINE 15
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  20:02:37,573 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  20:02:37,573 - WE ARE USING AN ARRAY OF TYPE int ON LINE 15
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  20:02:37,573 - USING INTEGERS IN TERM! ON LINE 18
INFO  20:02:37,573 - USING INTEGERS IN TERM! ON LINE 15
INFO  20:02:37,573 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 15
INFO  20:02:37,573 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  20:02:37,573 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  20:02:37,573 - PRINT FUNCTION CALL IN USE! ON LINE 16
INFO  20:02:37,573 - CURRENT VARIABLE IN USE IS local AND IT IS OF TYPE int
INFO  20:02:37,573 - WE ARE USING A VARIABLE OF TYPE int ON LINE 17
INFO  20:02:37,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  20:02:37,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  20:02:37,574 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 17
INFO  20:02:37,574 - METHOD BODY ENDING!
INFO  20:02:37,574 - END OF DEFINING FUNCTION func_check
INFO  20:02:37,574 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 22
INFO  20:02:37,574 - VARIABLE x IS BEING DEFINED! ON LINE 23
INFO  20:02:37,574 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 23
INFO  20:02:37,574 - VARIABLE z IS BEING DEFINED! ON LINE 24
INFO  20:02:37,574 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 24
INFO  20:02:37,574 - VARIABLE p IS BEING DEFINED! ON LINE 25
INFO  20:02:37,574 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 25
INFO  20:02:37,574 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 26
INFO  20:02:37,574 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 26
INFO  20:02:37,574 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 27
INFO  20:02:37,574 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 27
INFO  20:02:37,574 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 28
INFO  20:02:37,574 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 28
INFO  20:02:37,574 - METHOD BODY STARTING!
INFO  20:02:37,574 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  20:02:37,574 - METHOD BODY ENDING!
INFO  20:02:37,574 - END OF DEFINING FUNCTION main
INFO  20:02:37,574 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  20:02:37,575 -  Deklarisanih promenljivih ima = 11
INFO  20:02:37,575 - ===================================
INFO  20:02:37,579 - Parsiranje uspesno zavrseno!
