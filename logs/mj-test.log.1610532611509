INFO  19:33:49,277 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  19:33:49,360 - #2 program
INFO  19:33:49,360 - #43 MJProgram
INFO  19:33:49,360 - #43 int
INFO  19:33:49,362 - #43 a
INFO  19:33:49,363 - #31 ,
INFO  19:33:49,363 - #43 b
INFO  19:33:49,364 - #31 ,
INFO  19:33:49,364 - #43 c
INFO  19:33:49,364 - #31 ,
INFO  19:33:49,364 - #43 d
INFO  19:33:49,364 - #33 ;
INFO  19:33:49,364 - #9 const
INFO  19:33:49,365 - #43 int
INFO  19:33:49,365 - #43 y
INFO  19:33:49,365 - #19 =
INFO  19:33:49,365 - #42 3
INFO  19:33:49,366 - #33 ;
INFO  19:33:49,366 - #35 {
INFO  19:33:49,366 - #43 int
INFO  19:33:49,367 - #43 k
INFO  19:33:49,368 - #37 (
INFO  19:33:49,377 - #43 int
INFO  19:33:49,377 - #43 a
INFO  19:33:49,377 - #31 ,
INFO  19:33:49,377 - #43 int
INFO  19:33:49,377 - #43 b
INFO  19:33:49,377 - #38 )
INFO  19:33:49,378 - #35 {
INFO  19:33:49,378 - #41 return
INFO  19:33:49,380 - #43 b
INFO  19:33:49,381 - #33 ;
INFO  19:33:49,385 - #36 }
INFO  19:33:49,385 - #5 void
INFO  19:33:49,387 - #43 main
INFO  19:33:49,387 - #37 (
INFO  19:33:49,387 - #38 )
INFO  19:33:49,388 - #43 int
INFO  19:33:49,388 - #43 x
INFO  19:33:49,388 - #33 ;
INFO  19:33:49,389 - #43 char
INFO  19:33:49,389 - #43 z
INFO  19:33:49,389 - #33 ;
INFO  19:33:49,389 - #43 char
INFO  19:33:49,389 - #43 xx
INFO  19:33:49,389 - #39 [
INFO  19:33:49,389 - #40 ]
INFO  19:33:49,389 - #33 ;
INFO  19:33:49,390 - #43 char
INFO  19:33:49,390 - #43 yy
INFO  19:33:49,390 - #39 [
INFO  19:33:49,390 - #40 ]
INFO  19:33:49,390 - #33 ;
INFO  19:33:49,390 - #43 int
INFO  19:33:49,390 - #43 br
INFO  19:33:49,390 - #39 [
INFO  19:33:49,390 - #40 ]
INFO  19:33:49,390 - #33 ;
INFO  19:33:49,390 - #35 {
INFO  19:33:49,391 - #43 x
INFO  19:33:49,391 - #19 =
INFO  19:33:49,391 - #42 2
INFO  19:33:49,392 - #49 +
INFO  19:33:49,392 - #42 3
INFO  19:33:49,392 - #46 *
INFO  19:33:49,393 - #37 (
INFO  19:33:49,393 - #42 4
INFO  19:33:49,393 - #49 +
INFO  19:33:49,393 - #42 5
INFO  19:33:49,393 - #38 )
INFO  19:33:49,393 - #49 +
INFO  19:33:49,393 - #43 k
INFO  19:33:49,393 - #37 (
INFO  19:33:49,393 - #42 0
INFO  19:33:49,393 - #31 ,
INFO  19:33:49,394 - #42 1
INFO  19:33:49,394 - #38 )
INFO  19:33:49,394 - #33 ;
INFO  19:33:49,394 - #18 print
INFO  19:33:49,394 - #37 (
INFO  19:33:49,394 - #43 x
INFO  19:33:49,395 - #38 )
INFO  19:33:49,395 - #33 ;
INFO  19:33:49,395 - #43 a
INFO  19:33:49,396 - #19 =
INFO  19:33:49,396 - #43 x
INFO  19:33:49,396 - #33 ;
INFO  19:33:49,396 - #43 a
INFO  19:33:49,396 - #28 ++
INFO  19:33:49,396 - #33 ;
INFO  19:33:49,396 - #18 print
INFO  19:33:49,396 - #37 (
INFO  19:33:49,396 - #43 a
INFO  19:33:49,396 - #38 )
INFO  19:33:49,396 - #33 ;
INFO  19:33:49,396 - #43 a
INFO  19:33:49,396 - #29 --
INFO  19:33:49,396 - #33 ;
INFO  19:33:49,397 - #43 a
INFO  19:33:49,397 - #29 --
INFO  19:33:49,397 - #33 ;
INFO  19:33:49,397 - #18 print
INFO  19:33:49,397 - #37 (
INFO  19:33:49,397 - #43 a
INFO  19:33:49,397 - #38 )
INFO  19:33:49,397 - #33 ;
INFO  19:33:49,397 - #36 }
INFO  19:33:49,397 - #36 }
INFO  19:33:49,406 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                NoVarDeclList(
                ) [NoVarDeclList]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   z
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 xx
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassArray(
               yy
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             br
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   2
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                ExprOptionalListClass(
                                  ExprOptionalListClass(
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                    PlusOperation(
                                     +
                                    ) [PlusOperation]
                                    TermClass(
                                      NumberConst(
                                       3
                                      ) [NumberConst]
                                      TermOptionalListClass(
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                        MultiplyOperationClass(
                                         *
                                        ) [MultiplyOperationClass]
                                        ParenFactorClass(
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   4
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                ExprOptionalListClass(
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                  PlusOperation(
                                                   +
                                                  ) [PlusOperation]
                                                  TermClass(
                                                    NumberConst(
                                                     5
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                ) [ExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [ParenFactorClass]
                                      ) [TermOptionalListClass]
                                    ) [TermClass]
                                  ) [ExprOptionalListClass]
                                  PlusOperation(
                                   +
                                  ) [PlusOperation]
                                  TermClass(
                                    FactorOptionalParams(
                                      Designator(
                                        DesigIdent(
                                         k
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                      Actuals(
                                        ActualParams(
                                          ActualParam(
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     0
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [ActualParam]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   1
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [ActualParams]
                                      ) [Actuals]
                                    ) [FactorOptionalParams]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                ) [ExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   x
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         a
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   x
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementPlusPlus(
                    Designator(
                      DesigIdent(
                       a
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorStatementPlusPlus]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             a
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            Assignment(
              DesignatorStatementMinusMinus(
                Designator(
                  DesigIdent(
                   a
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
              ) [DesignatorStatementMinusMinus]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementMinusMinus(
              Designator(
                DesigIdent(
                 a
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
            ) [DesignatorStatementMinusMinus]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       a
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  19:33:49,407 - ===================================
INFO  19:33:49,411 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  19:33:49,411 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  19:33:49,411 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  19:33:49,411 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  19:33:49,412 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  19:33:49,412 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  19:33:49,412 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  19:33:49,412 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  19:33:49,412 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  19:33:49,412 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  19:33:49,412 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  19:33:49,412 - METHOD BODY STARTING!
INFO  19:33:49,412 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  19:33:49,412 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  19:33:49,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  19:33:49,413 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  19:33:49,413 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  19:33:49,413 - METHOD BODY ENDING!
INFO  19:33:49,413 - END OF DEFINING FUNCTION k
INFO  19:33:49,413 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  19:33:49,413 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  19:33:49,413 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  19:33:49,413 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  19:33:49,413 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  19:33:49,413 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  19:33:49,413 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  19:33:49,413 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 16
INFO  19:33:49,413 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 16
INFO  19:33:49,414 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 17
INFO  19:33:49,414 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 17
INFO  19:33:49,414 - METHOD BODY STARTING!
INFO  19:33:49,414 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  19:33:49,414 - BEGINNING OF AN ASSIGNEMENT! ON LINE 22
INFO  19:33:49,414 - CONST NUMBER 2 ON LINE 22
INFO  19:33:49,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,414 - CONST NUMBER 3 ON LINE 22
INFO  19:33:49,414 - CONST NUMBER 4 ON LINE 22
INFO  19:33:49,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,414 - CONST NUMBER 5 ON LINE 22
INFO  19:33:49,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,414 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  19:33:49,415 - USING INTEGERS IN TERM! ON LINE 22
INFO  19:33:49,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  19:33:49,415 - USING INTEGERS IN TERM! ON LINE 22
INFO  19:33:49,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  19:33:49,415 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  19:33:49,415 - CONST NUMBER 0 ON LINE 22
INFO  19:33:49,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,415 - CONST NUMBER 1 ON LINE 22
INFO  19:33:49,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,415 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,415 - TYPE -> int <- AND -> int <- ON LINE 22
INFO  19:33:49,415 - TYPE -> int <- AND -> int <- ON LINE 22
INFO  19:33:49,416 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:33:49,416 - USING INTEGERS IN TERM! ON LINE 6
INFO  19:33:49,417 - USING INTEGERS IN TERM! ON LINE 22
INFO  19:33:49,417 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 22
INFO  19:33:49,417 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  19:33:49,417 - WE ARE USING A VARIABLE OF TYPE int ON LINE 23
INFO  19:33:49,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  19:33:49,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  19:33:49,417 - PRINT FUNCTION CALL IN USE! ON LINE 23
INFO  19:33:49,417 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  19:33:49,417 - BEGINNING OF AN ASSIGNEMENT! ON LINE 25
INFO  19:33:49,417 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  19:33:49,417 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  19:33:49,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  19:33:49,417 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  19:33:49,417 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 25
INFO  19:33:49,417 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  19:33:49,417 - USING ++ ON a ON LINE 26
INFO  19:33:49,417 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  19:33:49,418 - WE ARE USING A VARIABLE OF TYPE int ON LINE 27
INFO  19:33:49,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  19:33:49,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  19:33:49,418 - PRINT FUNCTION CALL IN USE! ON LINE 27
INFO  19:33:49,418 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  19:33:49,418 - USING -- ON a ON LINE 28
INFO  19:33:49,418 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  19:33:49,418 - USING -- ON a ON LINE 29
INFO  19:33:49,418 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  19:33:49,418 - WE ARE USING A VARIABLE OF TYPE int ON LINE 30
INFO  19:33:49,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  19:33:49,418 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  19:33:49,418 - PRINT FUNCTION CALL IN USE! ON LINE 30
INFO  19:33:49,418 - METHOD BODY ENDING!
INFO  19:33:49,418 - END OF DEFINING FUNCTION main
INFO  19:33:49,418 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  19:33:49,418 -  Deklarisanih promenljivih ima = 9
INFO  19:33:49,418 - ===================================
INFO  19:33:49,424 - Parsiranje uspesno zavrseno!
