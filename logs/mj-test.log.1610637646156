INFO  16:17:29,478 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  16:17:29,556 - #2 program
INFO  16:17:29,557 - #43 MJProgram
INFO  16:17:29,557 - #43 int
INFO  16:17:29,558 - #43 a
INFO  16:17:29,559 - #31 ,
INFO  16:17:29,560 - #43 b
INFO  16:17:29,560 - #31 ,
INFO  16:17:29,560 - #43 c
INFO  16:17:29,560 - #31 ,
INFO  16:17:29,560 - #43 d
INFO  16:17:29,560 - #33 ;
INFO  16:17:29,560 - #9 const
INFO  16:17:29,561 - #43 int
INFO  16:17:29,561 - #43 term
INFO  16:17:29,561 - #19 =
INFO  16:17:29,561 - #42 0
INFO  16:17:29,561 - #33 ;
INFO  16:17:29,562 - #9 const
INFO  16:17:29,562 - #43 int
INFO  16:17:29,562 - #43 y
INFO  16:17:29,562 - #19 =
INFO  16:17:29,572 - #42 3
INFO  16:17:29,572 - #33 ;
INFO  16:17:29,572 - #35 {
INFO  16:17:29,572 - #43 int
INFO  16:17:29,573 - #43 k
INFO  16:17:29,573 - #37 (
INFO  16:17:29,573 - #43 int
INFO  16:17:29,573 - #43 a
INFO  16:17:29,573 - #31 ,
INFO  16:17:29,573 - #43 int
INFO  16:17:29,573 - #43 b
INFO  16:17:29,573 - #38 )
INFO  16:17:29,574 - #35 {
INFO  16:17:29,574 - #41 return
INFO  16:17:29,575 - #43 b
INFO  16:17:29,576 - #33 ;
INFO  16:17:29,579 - #36 }
INFO  16:17:29,579 - #5 void
INFO  16:17:29,581 - #43 main
INFO  16:17:29,581 - #37 (
INFO  16:17:29,581 - #38 )
INFO  16:17:29,582 - #43 int
INFO  16:17:29,582 - #43 x
INFO  16:17:29,582 - #33 ;
INFO  16:17:29,582 - #43 bool
INFO  16:17:29,582 - #43 p
INFO  16:17:29,582 - #33 ;
INFO  16:17:29,582 - #43 bool
INFO  16:17:29,582 - #43 r
INFO  16:17:29,582 - #33 ;
INFO  16:17:29,583 - #43 bool
INFO  16:17:29,583 - #43 q
INFO  16:17:29,583 - #33 ;
INFO  16:17:29,583 - #43 int
INFO  16:17:29,583 - #43 br
INFO  16:17:29,583 - #39 [
INFO  16:17:29,583 - #40 ]
INFO  16:17:29,583 - #33 ;
INFO  16:17:29,583 - #43 int
INFO  16:17:29,583 - #43 dd
INFO  16:17:29,583 - #33 ;
INFO  16:17:29,583 - #43 int
INFO  16:17:29,583 - #43 ee
INFO  16:17:29,583 - #33 ;
INFO  16:17:29,584 - #43 int
INFO  16:17:29,584 - #43 ff
INFO  16:17:29,584 - #33 ;
INFO  16:17:29,584 - #43 int
INFO  16:17:29,584 - #43 gg
INFO  16:17:29,584 - #33 ;
INFO  16:17:29,584 - #43 char
INFO  16:17:29,584 - #43 hh
INFO  16:17:29,584 - #33 ;
INFO  16:17:29,584 - #43 int
INFO  16:17:29,584 - #43 ii
INFO  16:17:29,584 - #33 ;
INFO  16:17:29,584 - #35 {
INFO  16:17:29,584 - #43 br
INFO  16:17:29,585 - #19 =
INFO  16:17:29,585 - #16 new
INFO  16:17:29,586 - #43 int
INFO  16:17:29,586 - #39 [
INFO  16:17:29,586 - #42 10
INFO  16:17:29,586 - #40 ]
INFO  16:17:29,586 - #33 ;
INFO  16:17:29,587 - #43 x
INFO  16:17:29,587 - #19 =
INFO  16:17:29,587 - #42 0
INFO  16:17:29,587 - #33 ;
INFO  16:17:29,587 - #12 do
INFO  16:17:29,587 - #35 {
INFO  16:17:29,588 - #43 br
INFO  16:17:29,589 - #39 [
INFO  16:17:29,589 - #43 x
INFO  16:17:29,590 - #40 ]
INFO  16:17:29,591 - #19 =
INFO  16:17:29,591 - #43 x
INFO  16:17:29,591 - #49 +
INFO  16:17:29,591 - #42 10
INFO  16:17:29,591 - #33 ;
INFO  16:17:29,591 - #43 x
INFO  16:17:29,591 - #28 ++
INFO  16:17:29,591 - #33 ;
INFO  16:17:29,591 - #36 }
INFO  16:17:29,592 - #13 while
INFO  16:17:29,592 - #37 (
INFO  16:17:29,592 - #43 x
INFO  16:17:29,593 - #23 <
INFO  16:17:29,593 - #42 10
INFO  16:17:29,594 - #38 )
INFO  16:17:29,595 - #33 ;
INFO  16:17:29,596 - #43 x
INFO  16:17:29,596 - #19 =
INFO  16:17:29,597 - #42 0
INFO  16:17:29,597 - #33 ;
INFO  16:17:29,597 - #12 do
INFO  16:17:29,597 - #35 {
INFO  16:17:29,597 - #18 print
INFO  16:17:29,597 - #37 (
INFO  16:17:29,597 - #44 b
INFO  16:17:29,597 - #38 )
INFO  16:17:29,598 - #33 ;
INFO  16:17:29,598 - #18 print
INFO  16:17:29,598 - #37 (
INFO  16:17:29,598 - #44 r
INFO  16:17:29,598 - #38 )
INFO  16:17:29,598 - #33 ;
INFO  16:17:29,599 - #18 print
INFO  16:17:29,599 - #37 (
INFO  16:17:29,599 - #44 [
INFO  16:17:29,599 - #38 )
INFO  16:17:29,599 - #33 ;
INFO  16:17:29,599 - #18 print
INFO  16:17:29,599 - #37 (
INFO  16:17:29,599 - #43 x
INFO  16:17:29,599 - #31 ,
INFO  16:17:29,599 - #42 1
INFO  16:17:29,599 - #38 )
INFO  16:17:29,599 - #33 ;
INFO  16:17:29,600 - #18 print
INFO  16:17:29,600 - #37 (
INFO  16:17:29,600 - #44 ]
INFO  16:17:29,600 - #38 )
INFO  16:17:29,600 - #33 ;
INFO  16:17:29,600 - #18 print
INFO  16:17:29,600 - #37 (
INFO  16:17:29,600 - #44 =
INFO  16:17:29,600 - #38 )
INFO  16:17:29,600 - #33 ;
INFO  16:17:29,600 - #18 print
INFO  16:17:29,600 - #37 (
INFO  16:17:29,600 - #43 br
INFO  16:17:29,600 - #39 [
INFO  16:17:29,600 - #43 x
INFO  16:17:29,601 - #40 ]
INFO  16:17:29,601 - #31 ,
INFO  16:17:29,601 - #42 1
INFO  16:17:29,601 - #38 )
INFO  16:17:29,601 - #33 ;
INFO  16:17:29,601 - #18 print
INFO  16:17:29,601 - #37 (
INFO  16:17:29,601 - #44  
INFO  16:17:29,601 - #38 )
INFO  16:17:29,602 - #33 ;
INFO  16:17:29,602 - #43 x
INFO  16:17:29,602 - #28 ++
INFO  16:17:29,602 - #33 ;
INFO  16:17:29,602 - #36 }
INFO  16:17:29,602 - #13 while
INFO  16:17:29,602 - #37 (
INFO  16:17:29,602 - #43 x
INFO  16:17:29,603 - #23 <
INFO  16:17:29,603 - #42 10
INFO  16:17:29,603 - #38 )
INFO  16:17:29,603 - #33 ;
INFO  16:17:29,604 - #36 }
INFO  16:17:29,604 - #36 }
INFO  16:17:29,614 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          VarDeclListClass(
                            NoVarDeclList(
                            ) [NoVarDeclList]
                            VarDeclClass(
                              Type(
                               int
                              ) [Type]
                              VarListSingle(
                                VarClassNoArray(
                                 x
                                ) [VarClassNoArray]
                              ) [VarListSingle]
                            ) [VarDeclClass]
                          ) [VarDeclListClass]
                          VarDeclClass(
                            Type(
                             bool
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               p
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             r
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         bool
                        ) [Type]
                        VarListSingle(
                          VarClassNoArray(
                           q
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         br
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NewFactorClass(
                              Type(
                               int
                              ) [Type]
                              FactorOptionalSecondClass(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         10
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [FactorOptionalSecondClass]
                            ) [NewFactorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     x
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           br
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         x
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     x
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              ExprOptionalListClass(
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  NumberConst(
                                   10
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementPlusPlus(
                      Designator(
                        DesigIdent(
                         x
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorStatementPlusPlus]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               x
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      LessOperationClass(
                      ) [LessOperationClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             10
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       0
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        DoWhileStatement(
          DoClass(
          ) [DoClass]
          StatementStatement(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              PrintStmt(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        CharConst(
                                         b
                                        ) [CharConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                                NoCommaNumberClass(
                                ) [NoCommaNumberClass]
                              ) [PrintStmt]
                            ) [Statements]
                            PrintStmt(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      CharConst(
                                       r
                                      ) [CharConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                              NoCommaNumberClass(
                              ) [NoCommaNumberClass]
                            ) [PrintStmt]
                          ) [Statements]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    CharConst(
                                     [
                                    ) [CharConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       x
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          CommaNumberClass(
                           1
                          ) [CommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                CharConst(
                                 ]
                                ) [CharConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              CharConst(
                               =
                              ) [CharConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 br
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               x
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    CommaNumberClass(
                     1
                    ) [CommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          CharConst(
                            
                          ) [CharConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              Assignment(
                DesignatorStatementPlusPlus(
                  Designator(
                    DesigIdent(
                     x
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                ) [DesignatorStatementPlusPlus]
              ) [Assignment]
            ) [Statements]
          ) [StatementStatement]
          LParenClass(
          ) [LParenClass]
          ConditionClass(
            CondTermClass(
              CondFactClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           x
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                CondFactOptionalClass(
                  LessOperationClass(
                  ) [LessOperationClass]
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         10
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [CondFactOptionalClass]
              ) [CondFactClass]
              NoCondTermOptionalClass(
              ) [NoCondTermOptionalClass]
            ) [CondTermClass]
            NoConditionOptionalClass(
            ) [NoConditionOptionalClass]
          ) [ConditionClass]
          RParenClass(
          ) [RParenClass]
        ) [DoWhileStatement]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  16:17:29,616 - ===================================
INFO  16:17:29,619 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  16:17:29,619 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  16:17:29,619 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  16:17:29,619 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  16:17:29,620 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  16:17:29,620 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  16:17:29,620 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  16:17:29,620 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  16:17:29,620 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  16:17:29,620 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  16:17:29,620 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  16:17:29,620 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  16:17:29,620 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  16:17:29,620 - METHOD BODY STARTING!
INFO  16:17:29,620 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  16:17:29,620 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  16:17:29,620 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:17:29,621 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:17:29,621 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  16:17:29,621 - METHOD BODY ENDING!
INFO  16:17:29,621 - END OF DEFINING FUNCTION k
INFO  16:17:29,621 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  16:17:29,621 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  16:17:29,621 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  16:17:29,621 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  16:17:29,621 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  16:17:29,621 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  16:17:29,621 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  16:17:29,621 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  16:17:29,621 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  16:17:29,621 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 31
INFO  16:17:29,621 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 31
INFO  16:17:29,621 - VARIABLE dd IS BEING DEFINED! ON LINE 32
INFO  16:17:29,621 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  16:17:29,621 - VARIABLE ee IS BEING DEFINED! ON LINE 33
INFO  16:17:29,622 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  16:17:29,622 - VARIABLE ff IS BEING DEFINED! ON LINE 34
INFO  16:17:29,622 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  16:17:29,622 - VARIABLE gg IS BEING DEFINED! ON LINE 35
INFO  16:17:29,622 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  16:17:29,622 - VARIABLE hh IS BEING DEFINED! ON LINE 36
INFO  16:17:29,622 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 36
INFO  16:17:29,622 - VARIABLE ii IS BEING DEFINED! ON LINE 37
INFO  16:17:29,622 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 37
INFO  16:17:29,622 - METHOD BODY STARTING!
INFO  16:17:29,622 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:17:29,622 - BEGINNING OF AN ASSIGNEMENT! ON LINE 49
INFO  16:17:29,622 - CONST NUMBER 10 ON LINE 49
INFO  16:17:29,622 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:17:29,622 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:17:29,622 - USAGE OF KEYWORD NEW! ON LINE 49
INFO  16:17:29,622 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:17:29,622 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:17:29,623 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 49
INFO  16:17:29,623 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,623 - BEGINNING OF AN ASSIGNEMENT! ON LINE 50
INFO  16:17:29,623 - CONST NUMBER 0 ON LINE 50
INFO  16:17:29,623 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:17:29,623 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:17:29,623 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 50
INFO  16:17:29,623 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:17:29,623 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,623 - WE ARE USING A VARIABLE OF TYPE int ON LINE 52
INFO  16:17:29,623 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:17:29,623 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:17:29,623 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:17:29,623 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  16:17:29,623 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,623 - WE ARE USING A VARIABLE OF TYPE int ON LINE 52
INFO  16:17:29,623 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:17:29,623 - CONST NUMBER 10 ON LINE 52
INFO  16:17:29,624 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:17:29,624 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 11
INFO  16:17:29,624 - USING INTEGERS IN TERM! ON LINE 52
INFO  16:17:29,624 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  16:17:29,624 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,624 - USING ++ ON x ON LINE 53
INFO  16:17:29,624 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,624 - WE ARE USING A VARIABLE OF TYPE int ON LINE 54
INFO  16:17:29,624 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:17:29,624 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:17:29,624 - CONST NUMBER 10 ON LINE 54
INFO  16:17:29,624 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:17:29,624 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:17:29,624 - USING TWO EXPRESSIONS OF TYPE int ON LINE 54
INFO  16:17:29,624 - ENDING OF A DO...WHILE LOOP! ON LINE 51
INFO  16:17:29,624 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,625 - BEGINNING OF AN ASSIGNEMENT! ON LINE 56
INFO  16:17:29,625 - CONST NUMBER 0 ON LINE 56
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  16:17:29,625 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 56
INFO  16:17:29,625 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:17:29,625 - CONST CHAR b ON LINE 58
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  16:17:29,625 - PRINT FUNCTION CALL IN USE! ON LINE 58
INFO  16:17:29,625 - CONST CHAR r ON LINE 59
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  16:17:29,625 - PRINT FUNCTION CALL IN USE! ON LINE 59
INFO  16:17:29,625 - CONST CHAR [ ON LINE 60
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:17:29,625 - PRINT FUNCTION CALL IN USE! ON LINE 60
INFO  16:17:29,625 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,625 - WE ARE USING A VARIABLE OF TYPE int ON LINE 61
INFO  16:17:29,625 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  16:17:29,626 - PRINT FUNCTION CALL IN USE! ON LINE 61
INFO  16:17:29,626 - CONST CHAR ] ON LINE 62
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  16:17:29,626 - PRINT FUNCTION CALL IN USE! ON LINE 62
INFO  16:17:29,626 - CONST CHAR = ON LINE 63
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  16:17:29,626 - PRINT FUNCTION CALL IN USE! ON LINE 63
INFO  16:17:29,626 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,626 - WE ARE USING A VARIABLE OF TYPE int ON LINE 64
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:17:29,626 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:17:29,626 - WE ARE USING AN ARRAY OF TYPE int ON LINE 64
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:17:29,626 - PRINT FUNCTION CALL IN USE! ON LINE 64
INFO  16:17:29,626 - CONST CHAR   ON LINE 65
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:17:29,626 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:17:29,626 - PRINT FUNCTION CALL IN USE! ON LINE 65
INFO  16:17:29,627 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,627 - USING ++ ON x ON LINE 66
INFO  16:17:29,627 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:17:29,627 - WE ARE USING A VARIABLE OF TYPE int ON LINE 68
INFO  16:17:29,627 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  16:17:29,627 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  16:17:29,627 - CONST NUMBER 10 ON LINE 68
INFO  16:17:29,627 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  16:17:29,627 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  16:17:29,627 - USING TWO EXPRESSIONS OF TYPE int ON LINE 68
INFO  16:17:29,627 - ENDING OF A DO...WHILE LOOP! ON LINE 57
INFO  16:17:29,627 - METHOD BODY ENDING!
INFO  16:17:29,627 - END OF DEFINING FUNCTION main
INFO  16:17:29,627 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  16:17:29,627 -  Deklarisanih promenljivih ima = 15
INFO  16:17:29,627 - ===================================
INFO  16:17:29,633 - Parsiranje uspesno zavrseno!
