INFO  22:26:53,438 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  22:26:53,543 - #2 program
INFO  22:26:53,543 - #48 MJProgram
INFO  22:26:53,543 - #48 int
INFO  22:26:53,546 - #48 a
INFO  22:26:53,548 - #36 ,
INFO  22:26:53,548 - #48 b
INFO  22:26:53,548 - #36 ,
INFO  22:26:53,548 - #48 c
INFO  22:26:53,549 - #36 ,
INFO  22:26:53,549 - #48 d
INFO  22:26:53,549 - #38 ;
INFO  22:26:53,549 - #9 const
INFO  22:26:53,550 - #48 int
INFO  22:26:53,550 - #48 y
INFO  22:26:53,550 - #24 =
INFO  22:26:53,550 - #47 3
INFO  22:26:53,550 - #38 ;
INFO  22:26:53,551 - #40 {
INFO  22:26:53,551 - #48 int
INFO  22:26:53,552 - #48 k
INFO  22:26:53,553 - #42 (
INFO  22:26:53,561 - #48 int
INFO  22:26:53,561 - #48 a
INFO  22:26:53,562 - #36 ,
INFO  22:26:53,562 - #48 int
INFO  22:26:53,562 - #48 b
INFO  22:26:53,562 - #43 )
INFO  22:26:53,562 - #40 {
INFO  22:26:53,563 - #46 return
INFO  22:26:53,567 - #48 b
INFO  22:26:53,570 - #38 ;
INFO  22:26:53,573 - #41 }
INFO  22:26:53,574 - #48 char
INFO  22:26:53,577 - #48 s
INFO  22:26:53,577 - #42 (
INFO  22:26:53,577 - #43 )
INFO  22:26:53,578 - #40 {
INFO  22:26:53,579 - #46 return
INFO  22:26:53,579 - #49 c
INFO  22:26:53,579 - #38 ;
INFO  22:26:53,579 - #41 }
INFO  22:26:53,579 - #5 void
INFO  22:26:53,579 - #48 main
INFO  22:26:53,579 - #42 (
INFO  22:26:53,579 - #43 )
INFO  22:26:53,580 - #48 int
INFO  22:26:53,580 - #48 x
INFO  22:26:53,580 - #38 ;
INFO  22:26:53,580 - #48 char
INFO  22:26:53,580 - #48 z
INFO  22:26:53,580 - #38 ;
INFO  22:26:53,580 - #48 bool
INFO  22:26:53,580 - #48 p
INFO  22:26:53,581 - #38 ;
INFO  22:26:53,581 - #48 int
INFO  22:26:53,581 - #48 xx
INFO  22:26:53,581 - #44 [
INFO  22:26:53,581 - #45 ]
INFO  22:26:53,581 - #38 ;
INFO  22:26:53,581 - #48 int
INFO  22:26:53,581 - #48 dd
INFO  22:26:53,581 - #38 ;
INFO  22:26:53,582 - #40 {
INFO  22:26:53,582 - #48 d
INFO  22:26:53,582 - #24 =
INFO  22:26:53,582 - #47 4
INFO  22:26:53,584 - #38 ;
INFO  22:26:53,584 - #18 print
INFO  22:26:53,584 - #42 (
INFO  22:26:53,584 - #48 d
INFO  22:26:53,585 - #43 )
INFO  22:26:53,586 - #38 ;
INFO  22:26:53,586 - #48 d
INFO  22:26:53,587 - #33 ++
INFO  22:26:53,587 - #38 ;
INFO  22:26:53,587 - #18 print
INFO  22:26:53,587 - #42 (
INFO  22:26:53,587 - #48 d
INFO  22:26:53,587 - #43 )
INFO  22:26:53,587 - #38 ;
INFO  22:26:53,587 - #48 dd
INFO  22:26:53,587 - #24 =
INFO  22:26:53,587 - #47 10
INFO  22:26:53,588 - #38 ;
INFO  22:26:53,588 - #18 print
INFO  22:26:53,588 - #42 (
INFO  22:26:53,588 - #48 dd
INFO  22:26:53,588 - #43 )
INFO  22:26:53,588 - #38 ;
INFO  22:26:53,588 - #48 dd
INFO  22:26:53,588 - #33 ++
INFO  22:26:53,588 - #38 ;
INFO  22:26:53,588 - #18 print
INFO  22:26:53,588 - #42 (
INFO  22:26:53,589 - #48 dd
INFO  22:26:53,589 - #43 )
INFO  22:26:53,589 - #38 ;
INFO  22:26:53,589 - #46 return
INFO  22:26:53,589 - #38 ;
INFO  22:26:53,589 - #41 }
INFO  22:26:53,590 - #41 }
INFO  22:26:53,604 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           k
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassNoArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        HelperClass(
                        ) [HelperClass]
                        Designator(
                         b
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           char
          ) [Type]
         s
        ) [ReturnValueClassNoVoid]
        NoFormParam(
        ) [NoFormParam]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    CharConst(
                     c
                    ) [CharConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                NoVarDeclList(
                ) [NoVarDeclList]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   z
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 p
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassArray(
               xx
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             dd
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        Assignment(
                          DesignatorStatementOptionsClassAssignExpression(
                            Designator(
                             d
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                            HelperClass(
                            ) [HelperClass]
                            AssignOpClass(
                              AssignOperationClass(
                              ) [AssignOperationClass]
                            ) [AssignOpClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     4
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [DesignatorStatementOptionsClassAssignExpression]
                        ) [Assignment]
                      ) [Statements]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  HelperClass(
                                  ) [HelperClass]
                                  Designator(
                                   d
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementPlusPlus(
                        Designator(
                         d
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorStatementPlusPlus]
                    ) [Assignment]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              HelperClass(
                              ) [HelperClass]
                              Designator(
                               d
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                     dd
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    HelperClass(
                    ) [HelperClass]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             10
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          HelperClass(
                          ) [HelperClass]
                          Designator(
                           dd
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            Assignment(
              DesignatorStatementPlusPlus(
                Designator(
                 dd
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
              ) [DesignatorStatementPlusPlus]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      HelperClass(
                      ) [HelperClass]
                      Designator(
                       dd
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        ReturnNoExpr(
        ) [ReturnNoExpr]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  22:26:53,605 - ===================================
INFO  22:26:53,610 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  22:26:53,611 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  22:26:53,611 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  22:26:53,611 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  22:26:53,611 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  22:26:53,611 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  22:26:53,611 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  22:26:53,611 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  22:26:53,611 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  22:26:53,612 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  22:26:53,612 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  22:26:53,612 - METHOD BODY STARTING!
INFO  22:26:53,612 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  22:26:53,612 - WE ARE USING A VARIABLE OF TYPE int ON LINE 23
INFO  22:26:53,612 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  22:26:53,612 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  22:26:53,612 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  22:26:53,612 - METHOD BODY ENDING!
INFO  22:26:53,613 - END OF DEFINING FUNCTION k
INFO  22:26:53,613 - FUNCTION s WITH RETURN VALUE OF TYPE char ON LINE 9
INFO  22:26:53,613 - METHOD BODY STARTING!
INFO  22:26:53,613 - CONST CHAR c ON LINE 9
INFO  22:26:53,613 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:53,613 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:53,613 - SUCCESSFUL RETURN! TYPES: char AND char ! ON LINE 9
INFO  22:26:53,613 - METHOD BODY ENDING!
INFO  22:26:53,613 - END OF DEFINING FUNCTION s
INFO  22:26:53,613 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  22:26:53,613 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  22:26:53,613 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  22:26:53,614 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  22:26:53,614 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  22:26:53,614 - VARIABLE p IS BEING DEFINED! ON LINE 14
INFO  22:26:53,614 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 14
INFO  22:26:53,614 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  22:26:53,614 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 15
INFO  22:26:53,614 - VARIABLE dd IS BEING DEFINED! ON LINE 16
INFO  22:26:53,614 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 16
INFO  22:26:53,614 - METHOD BODY STARTING!
INFO  22:26:53,614 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE int
INFO  22:26:53,614 - BEGINNING OF AN ASSIGNEMENT! ON LINE 29
INFO  22:26:53,614 - CONST NUMBER 4 ON LINE 29
INFO  22:26:53,614 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  22:26:53,615 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  22:26:53,615 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 29
INFO  22:26:53,615 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE int
INFO  22:26:53,615 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:26:53,615 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,615 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,615 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:26:53,615 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE int
INFO  22:26:53,615 - USING ++ ON d ON LINE 31
INFO  22:26:53,615 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE int
INFO  22:26:53,615 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:26:53,616 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,616 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,616 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:26:53,616 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  22:26:53,616 - BEGINNING OF AN ASSIGNEMENT! ON LINE 34
INFO  22:26:53,616 - CONST NUMBER 10 ON LINE 34
INFO  22:26:53,616 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  22:26:53,617 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  22:26:53,617 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 34
INFO  22:26:53,617 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  22:26:53,617 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:26:53,617 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,617 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,619 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:26:53,619 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  22:26:53,619 - USING ++ ON dd ON LINE 36
INFO  22:26:53,619 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  22:26:53,619 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  22:26:53,619 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,619 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  22:26:53,619 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  22:26:53,619 - return; AND THE FUNCTION IS VOID!
INFO  22:26:53,619 - METHOD BODY ENDING!
INFO  22:26:53,619 - END OF DEFINING FUNCTION main
INFO  22:26:53,619 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  22:26:53,619 -  Deklarisanih promenljivih ima = 9
INFO  22:26:53,619 - ===================================
INFO  22:26:53,625 - Parsiranje uspesno zavrseno!
