INFO  15:53:33,666 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  15:53:33,783 - #2 program
INFO  15:53:33,783 - #44 p
INFO  15:53:33,784 - #44 int
INFO  15:53:33,786 - #44 buffer
INFO  15:53:33,787 - #39 [
INFO  15:53:33,788 - #40 ]
INFO  15:53:33,788 - #33 ;
INFO  15:53:33,788 - #44 int
INFO  15:53:33,789 - #44 niz
INFO  15:53:33,789 - #39 [
INFO  15:53:33,789 - #40 ]
INFO  15:53:33,789 - #33 ;
INFO  15:53:33,789 - #35 {
INFO  15:53:33,789 - #5 void
INFO  15:53:33,791 - #44 main
INFO  15:53:33,791 - #37 (
INFO  15:53:33,791 - #38 )
INFO  15:53:33,792 - #44 int
INFO  15:53:33,793 - #44 index
INFO  15:53:33,793 - #33 ;
INFO  15:53:33,793 - #44 int
INFO  15:53:33,803 - #44 sum
INFO  15:53:33,803 - #33 ;
INFO  15:53:33,803 - #44 int
INFO  15:53:33,803 - #44 buffer_Fake
INFO  15:53:33,803 - #39 [
INFO  15:53:33,803 - #40 ]
INFO  15:53:33,804 - #33 ;
INFO  15:53:33,804 - #44 int
INFO  15:53:33,804 - #44 aaa
INFO  15:53:33,804 - #39 [
INFO  15:53:33,804 - #40 ]
INFO  15:53:33,804 - #33 ;
INFO  15:53:33,804 - #44 int
INFO  15:53:33,804 - #44 niz
INFO  15:53:33,804 - #39 [
INFO  15:53:33,804 - #40 ]
INFO  15:53:33,805 - #33 ;
INFO  15:53:33,805 - #44 int
INFO  15:53:33,805 - #44 modif_one
INFO  15:53:33,805 - #33 ;
INFO  15:53:33,805 - #44 char
INFO  15:53:33,805 - #44 modif_two
INFO  15:53:33,805 - #39 [
INFO  15:53:33,805 - #40 ]
INFO  15:53:33,805 - #33 ;
INFO  15:53:33,806 - #44 char
INFO  15:53:33,806 - #44 modif_three
INFO  15:53:33,806 - #33 ;
INFO  15:53:33,806 - #44 char
INFO  15:53:33,806 - #44 modif_three_array
INFO  15:53:33,806 - #39 [
INFO  15:53:33,806 - #40 ]
INFO  15:53:33,806 - #33 ;
INFO  15:53:33,807 - #35 {
INFO  15:53:33,807 - #44 niz
INFO  15:53:33,809 - #19 =
INFO  15:53:33,811 - #16 new
INFO  15:53:33,813 - #44 int
INFO  15:53:33,813 - #39 [
INFO  15:53:33,813 - #43 10
INFO  15:53:33,813 - #40 ]
INFO  15:53:33,815 - #33 ;
INFO  15:53:33,815 - #44 niz
INFO  15:53:33,815 - #39 [
INFO  15:53:33,817 - #43 0
INFO  15:53:33,821 - #40 ]
INFO  15:53:33,821 - #19 =
INFO  15:53:33,822 - #43 1
INFO  15:53:33,823 - #33 ;
INFO  15:53:33,823 - #44 niz
INFO  15:53:33,823 - #39 [
INFO  15:53:33,823 - #43 1
INFO  15:53:33,823 - #40 ]
INFO  15:53:33,823 - #19 =
INFO  15:53:33,823 - #43 2
INFO  15:53:33,824 - #33 ;
INFO  15:53:33,824 - #44 niz
INFO  15:53:33,824 - #39 [
INFO  15:53:33,824 - #43 2
INFO  15:53:33,824 - #40 ]
INFO  15:53:33,824 - #19 =
INFO  15:53:33,824 - #43 3
INFO  15:53:33,824 - #33 ;
INFO  15:53:33,824 - #44 niz
INFO  15:53:33,824 - #39 [
INFO  15:53:33,824 - #43 3
INFO  15:53:33,824 - #40 ]
INFO  15:53:33,825 - #19 =
INFO  15:53:33,825 - #43 4
INFO  15:53:33,825 - #33 ;
INFO  15:53:33,825 - #44 niz
INFO  15:53:33,825 - #39 [
INFO  15:53:33,825 - #43 4
INFO  15:53:33,825 - #40 ]
INFO  15:53:33,826 - #19 =
INFO  15:53:33,826 - #43 5
INFO  15:53:33,826 - #33 ;
INFO  15:53:33,827 - #44 niz
INFO  15:53:33,827 - #39 [
INFO  15:53:33,828 - #43 5
INFO  15:53:33,828 - #40 ]
INFO  15:53:33,828 - #19 =
INFO  15:53:33,828 - #43 5
INFO  15:53:33,828 - #33 ;
INFO  15:53:33,828 - #44 niz
INFO  15:53:33,828 - #39 [
INFO  15:53:33,828 - #43 6
INFO  15:53:33,828 - #40 ]
INFO  15:53:33,828 - #19 =
INFO  15:53:33,828 - #43 4
INFO  15:53:33,829 - #33 ;
INFO  15:53:33,829 - #44 niz
INFO  15:53:33,829 - #39 [
INFO  15:53:33,829 - #43 7
INFO  15:53:33,829 - #40 ]
INFO  15:53:33,829 - #19 =
INFO  15:53:33,829 - #43 3
INFO  15:53:33,829 - #33 ;
INFO  15:53:33,829 - #44 niz
INFO  15:53:33,829 - #39 [
INFO  15:53:33,829 - #43 8
INFO  15:53:33,829 - #40 ]
INFO  15:53:33,829 - #19 =
INFO  15:53:33,829 - #43 2
INFO  15:53:33,829 - #33 ;
INFO  15:53:33,830 - #44 niz
INFO  15:53:33,830 - #39 [
INFO  15:53:33,830 - #43 9
INFO  15:53:33,830 - #40 ]
INFO  15:53:33,830 - #19 =
INFO  15:53:33,830 - #43 1
INFO  15:53:33,830 - #33 ;
INFO  15:53:33,830 - #44 sum
INFO  15:53:33,830 - #19 =
INFO  15:53:33,830 - #44 niz
INFO  15:53:33,830 - #42 #
INFO  15:53:33,830 - #43 3
INFO  15:53:33,831 - #33 ;
INFO  15:53:33,832 - #18 print
INFO  15:53:33,832 - #37 (
INFO  15:53:33,832 - #44 sum
INFO  15:53:33,832 - #38 )
INFO  15:53:33,833 - #33 ;
INFO  15:53:33,833 - #36 }
INFO  15:53:33,833 - #36 }
INFO  15:53:33,852 - Program(
  ProgramName(
   p
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             buffer
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationVars(
      VarDeclClass(
        Type(
         int
        ) [Type]
        VarListSingle(
          VarClassArray(
           niz
          ) [VarClassArray]
        ) [VarListSingle]
      ) [VarDeclClass]
    ) [GroupDeclarationVars]
  ) [GroupDeclarations]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        NoVarDeclList(
                        ) [NoVarDeclList]
                        VarDeclClass(
                          Type(
                           int
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             index
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassNoArray(
                           sum
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         buffer_Fake
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassArray(
                       aaa
                      ) [VarClassArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassArray(
                     niz
                    ) [VarClassArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   modif_one
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 modif_two
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               modif_three
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           char
          ) [Type]
          VarListSingle(
            VarClassArray(
             modif_three_array
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                NoStmt(
                                ) [NoStmt]
                                Assignment(
                                  DesignatorStatementOptionsClassAssignExpression(
                                    Designator(
                                      DesigIdent(
                                       niz
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                    AssignOpClass(
                                      AssignOperationClass(
                                      ) [AssignOperationClass]
                                    ) [AssignOpClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NewFactorClass(
                                              Type(
                                               int
                                              ) [Type]
                                              FactorOptionalSecondClass(
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         10
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [FactorOptionalSecondClass]
                                            ) [NewFactorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [DesignatorStatementOptionsClassAssignExpression]
                                ) [Assignment]
                              ) [Statements]
                              Assignment(
                                DesignatorStatementOptionsClassAssignExpression(
                                  Designator(
                                    DesigIdent(
                                     niz
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           1
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [Assignment]
                            ) [Statements]
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                  DesigIdent(
                                   niz
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             1
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         2
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [Statements]
                          Assignment(
                            DesignatorStatementOptionsClassAssignExpression(
                              Designator(
                                DesigIdent(
                                 niz
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           2
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                              AssignOpClass(
                                AssignOperationClass(
                                ) [AssignOperationClass]
                              ) [AssignOpClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       3
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [DesignatorStatementOptionsClassAssignExpression]
                          ) [Assignment]
                        ) [Statements]
                        Assignment(
                          DesignatorStatementOptionsClassAssignExpression(
                            Designator(
                              DesigIdent(
                               niz
                              ) [DesigIdent]
                              OptionalDesignatorArray(
                                HelperClass(
                                ) [HelperClass]
                                LSquareClass(
                                ) [LSquareClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         3
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [OptionalDesignatorArray]
                            ) [Designator]
                            AssignOpClass(
                              AssignOperationClass(
                              ) [AssignOperationClass]
                            ) [AssignOpClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     4
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [DesignatorStatementOptionsClassAssignExpression]
                        ) [Assignment]
                      ) [Statements]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             niz
                            ) [DesigIdent]
                            OptionalDesignatorArray(
                              HelperClass(
                              ) [HelperClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       4
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   5
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           niz
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     5
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 5
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         niz
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   6
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               4
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       niz
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 7
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             3
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     niz
                    ) [DesigIdent]
                    OptionalDesignatorArray(
                      HelperClass(
                      ) [HelperClass]
                      LSquareClass(
                      ) [LSquareClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               8
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [OptionalDesignatorArray]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           2
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   niz
                  ) [DesigIdent]
                  OptionalDesignatorArray(
                    HelperClass(
                    ) [HelperClass]
                    LSquareClass(
                    ) [LSquareClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             9
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [OptionalDesignatorArray]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         1
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          Assignment(
            ModificationFive(
              Designator(
                DesigIdent(
                 sum
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              Designator(
                DesigIdent(
                 niz
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              HashClass(
              ) [HashClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       3
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ModificationFive]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       sum
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  15:53:33,853 - ===================================
INFO  15:53:33,861 - PROGRAM NAME DETECTED => p ON LINE 1
INFO  15:53:33,862 - ARRAY VARIABLE buffer IS BEING DEFINED! ON LINE 3
INFO  15:53:33,863 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 3
INFO  15:53:33,863 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 4
INFO  15:53:33,863 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 4
INFO  15:53:33,863 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 8
INFO  15:53:33,863 - VARIABLE index IS BEING DEFINED! ON LINE 9
INFO  15:53:33,863 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 9
INFO  15:53:33,864 - VARIABLE sum IS BEING DEFINED! ON LINE 10
INFO  15:53:33,864 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 10
INFO  15:53:33,864 - ARRAY VARIABLE buffer_Fake IS BEING DEFINED! ON LINE 11
INFO  15:53:33,864 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 11
INFO  15:53:33,864 - ARRAY VARIABLE aaa IS BEING DEFINED! ON LINE 12
INFO  15:53:33,864 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  15:53:33,864 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 13
INFO  15:53:33,864 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 13
INFO  15:53:33,864 - VARIABLE modif_one IS BEING DEFINED! ON LINE 14
INFO  15:53:33,864 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 14
INFO  15:53:33,864 - ARRAY VARIABLE modif_two IS BEING DEFINED! ON LINE 15
INFO  15:53:33,865 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  15:53:33,865 - VARIABLE modif_three IS BEING DEFINED! ON LINE 16
INFO  15:53:33,865 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 16
INFO  15:53:33,865 - ARRAY VARIABLE modif_three_array IS BEING DEFINED! ON LINE 17
INFO  15:53:33,865 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 17
INFO  15:53:33,865 - METHOD BODY STARTING!
INFO  15:53:33,865 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,865 - BEGINNING OF AN ASSIGNEMENT! ON LINE 51
INFO  15:53:33,865 - CONST NUMBER 10 ON LINE 51
INFO  15:53:33,865 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  15:53:33,865 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  15:53:33,866 - USAGE OF KEYWORD NEW! ON LINE 51
INFO  15:53:33,866 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  15:53:33,866 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  15:53:33,866 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 51
INFO  15:53:33,866 - CONST NUMBER 0 ON LINE 52
INFO  15:53:33,866 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  15:53:33,866 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  15:53:33,866 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,867 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  15:53:33,867 - CONST NUMBER 1 ON LINE 52
INFO  15:53:33,867 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  15:53:33,867 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  15:53:33,867 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  15:53:33,868 - CONST NUMBER 1 ON LINE 53
INFO  15:53:33,868 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  15:53:33,868 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  15:53:33,868 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,868 - BEGINNING OF AN ASSIGNEMENT! ON LINE 53
INFO  15:53:33,868 - CONST NUMBER 2 ON LINE 53
INFO  15:53:33,868 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  15:53:33,868 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  15:53:33,868 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 53
INFO  15:53:33,868 - CONST NUMBER 2 ON LINE 54
INFO  15:53:33,868 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  15:53:33,868 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  15:53:33,869 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,869 - BEGINNING OF AN ASSIGNEMENT! ON LINE 54
INFO  15:53:33,869 - CONST NUMBER 3 ON LINE 54
INFO  15:53:33,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  15:53:33,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  15:53:33,869 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 54
INFO  15:53:33,869 - CONST NUMBER 3 ON LINE 55
INFO  15:53:33,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  15:53:33,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  15:53:33,869 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,869 - BEGINNING OF AN ASSIGNEMENT! ON LINE 55
INFO  15:53:33,869 - CONST NUMBER 4 ON LINE 55
INFO  15:53:33,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  15:53:33,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  15:53:33,869 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 55
INFO  15:53:33,869 - CONST NUMBER 4 ON LINE 56
INFO  15:53:33,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  15:53:33,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  15:53:33,870 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,870 - BEGINNING OF AN ASSIGNEMENT! ON LINE 56
INFO  15:53:33,870 - CONST NUMBER 5 ON LINE 56
INFO  15:53:33,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  15:53:33,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  15:53:33,870 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 56
INFO  15:53:33,870 - CONST NUMBER 5 ON LINE 57
INFO  15:53:33,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  15:53:33,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  15:53:33,870 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,871 - BEGINNING OF AN ASSIGNEMENT! ON LINE 57
INFO  15:53:33,871 - CONST NUMBER 5 ON LINE 57
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  15:53:33,871 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 57
INFO  15:53:33,871 - CONST NUMBER 6 ON LINE 58
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  15:53:33,871 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,871 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  15:53:33,871 - CONST NUMBER 4 ON LINE 58
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  15:53:33,871 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 58
INFO  15:53:33,871 - CONST NUMBER 7 ON LINE 59
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  15:53:33,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  15:53:33,871 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,871 - BEGINNING OF AN ASSIGNEMENT! ON LINE 59
INFO  15:53:33,871 - CONST NUMBER 3 ON LINE 59
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  15:53:33,872 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 59
INFO  15:53:33,872 - CONST NUMBER 8 ON LINE 60
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  15:53:33,872 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,872 - BEGINNING OF AN ASSIGNEMENT! ON LINE 60
INFO  15:53:33,872 - CONST NUMBER 2 ON LINE 60
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  15:53:33,872 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 60
INFO  15:53:33,872 - CONST NUMBER 9 ON LINE 61
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  15:53:33,872 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,872 - BEGINNING OF AN ASSIGNEMENT! ON LINE 61
INFO  15:53:33,872 - CONST NUMBER 1 ON LINE 61
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  15:53:33,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  15:53:33,872 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 61
INFO  15:53:33,873 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  15:53:33,873 - BEGINNING OF AN ASSIGNEMENT! ON LINE 63
INFO  15:53:33,873 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  15:53:33,873 - CONST NUMBER 3 ON LINE 63
INFO  15:53:33,873 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  15:53:33,873 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  15:53:33,873 - MODIFICATION OKAY! ON LINE 63
INFO  15:53:33,873 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  15:53:33,873 - WE ARE USING A VARIABLE OF TYPE int ON LINE 64
INFO  15:53:33,873 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  15:53:33,873 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  15:53:33,873 - PRINT FUNCTION CALL IN USE! ON LINE 64
INFO  15:53:33,873 - METHOD BODY ENDING!
INFO  15:53:33,873 - END OF DEFINING FUNCTION main
INFO  15:53:33,873 - PROGRAM ENDED => p ON LINE 1
INFO  15:53:33,873 -  Deklarisanih promenljivih ima = 11
INFO  15:53:33,873 - ===================================
INFO  15:53:33,881 - Parsiranje uspesno zavrseno!
