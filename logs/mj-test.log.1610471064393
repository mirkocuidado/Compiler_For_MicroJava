INFO  18:02:55,735 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:02:55,825 - #2 program
INFO  18:02:55,825 - #43 MJProgram
INFO  18:02:55,826 - #43 int
INFO  18:02:55,829 - #43 a
INFO  18:02:55,830 - #31 ,
INFO  18:02:55,831 - #43 b
INFO  18:02:55,831 - #31 ,
INFO  18:02:55,832 - #43 c
INFO  18:02:55,832 - #31 ,
INFO  18:02:55,832 - #43 d
INFO  18:02:55,832 - #33 ;
INFO  18:02:55,832 - #9 const
INFO  18:02:55,832 - #43 int
INFO  18:02:55,833 - #43 y
INFO  18:02:55,833 - #19 =
INFO  18:02:55,833 - #42 3
INFO  18:02:55,833 - #33 ;
INFO  18:02:55,834 - #35 {
INFO  18:02:55,834 - #43 int
INFO  18:02:55,836 - #43 k
INFO  18:02:55,836 - #37 (
INFO  18:02:55,837 - #43 int
INFO  18:02:55,837 - #43 a
INFO  18:02:55,837 - #31 ,
INFO  18:02:55,837 - #43 int
INFO  18:02:55,837 - #43 b
INFO  18:02:55,837 - #38 )
INFO  18:02:55,837 - #35 {
INFO  18:02:55,838 - #41 return
INFO  18:02:55,842 - #43 b
INFO  18:02:55,845 - #33 ;
INFO  18:02:55,850 - #36 }
INFO  18:02:55,851 - #5 void
INFO  18:02:55,853 - #43 main
INFO  18:02:55,853 - #37 (
INFO  18:02:55,854 - #38 )
INFO  18:02:55,855 - #43 int
INFO  18:02:55,855 - #43 x
INFO  18:02:55,855 - #33 ;
INFO  18:02:55,855 - #43 int
INFO  18:02:55,855 - #43 xx
INFO  18:02:55,855 - #39 [
INFO  18:02:55,855 - #40 ]
INFO  18:02:55,855 - #33 ;
INFO  18:02:55,856 - #35 {
INFO  18:02:55,856 - #43 x
INFO  18:02:55,856 - #19 =
INFO  18:02:55,856 - #42 2
INFO  18:02:55,857 - #49 +
INFO  18:02:55,857 - #42 3
INFO  18:02:55,857 - #46 *
INFO  18:02:55,858 - #37 (
INFO  18:02:55,858 - #42 4
INFO  18:02:55,858 - #49 +
INFO  18:02:55,858 - #42 5
INFO  18:02:55,858 - #38 )
INFO  18:02:55,858 - #49 +
INFO  18:02:55,858 - #43 k
INFO  18:02:55,858 - #37 (
INFO  18:02:55,858 - #42 0
INFO  18:02:55,859 - #31 ,
INFO  18:02:55,859 - #42 1
INFO  18:02:55,859 - #38 )
INFO  18:02:55,859 - #33 ;
INFO  18:02:55,860 - #18 print
INFO  18:02:55,860 - #37 (
INFO  18:02:55,860 - #43 x
INFO  18:02:55,860 - #38 )
INFO  18:02:55,861 - #33 ;
INFO  18:02:55,861 - #43 xx
INFO  18:02:55,861 - #19 =
INFO  18:02:55,862 - #16 new
INFO  18:02:55,862 - #43 int
INFO  18:02:55,862 - #39 [
INFO  18:02:55,862 - #42 5
INFO  18:02:55,862 - #40 ]
INFO  18:02:55,862 - #33 ;
INFO  18:02:55,862 - #43 xx
INFO  18:02:55,862 - #39 [
INFO  18:02:55,864 - #42 0
INFO  18:02:55,865 - #40 ]
INFO  18:02:55,865 - #19 =
INFO  18:02:55,865 - #42 3
INFO  18:02:55,867 - #33 ;
INFO  18:02:55,868 - #36 }
INFO  18:02:55,868 - #36 }
INFO  18:02:55,892 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               x
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             xx
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     x
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           2
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        ExprOptionalListClass(
                          ExprOptionalListClass(
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                            PlusOperation(
                             +
                            ) [PlusOperation]
                            TermClass(
                              NumberConst(
                               3
                              ) [NumberConst]
                              TermOptionalListClass(
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                                MultiplyOperationClass(
                                 *
                                ) [MultiplyOperationClass]
                                ParenFactorClass(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           4
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        ExprOptionalListClass(
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                          PlusOperation(
                                           +
                                          ) [PlusOperation]
                                          TermClass(
                                            NumberConst(
                                             5
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                        ) [ExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ParenFactorClass]
                              ) [TermOptionalListClass]
                            ) [TermClass]
                          ) [ExprOptionalListClass]
                          PlusOperation(
                           +
                          ) [PlusOperation]
                          TermClass(
                            FactorOptionalParams(
                              Designator(
                                DesigIdent(
                                 k
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              Actuals(
                                ActualParams(
                                  ActualParam(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ActualParam]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           1
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParams]
                              ) [Actuals]
                            ) [FactorOptionalParams]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                        ) [ExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           x
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 xx
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NewFactorClass(
                        Type(
                         int
                        ) [Type]
                        FactorOptionalSecondClass(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   5
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [FactorOptionalSecondClass]
                      ) [NewFactorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        Assignment(
          DesignatorStatementOptionsClassAssignExpression(
            Designator(
              DesigIdent(
               xx
              ) [DesigIdent]
              OptionalDesignatorArray(
                HelperClass(
                ) [HelperClass]
                LSquareClass(
                ) [LSquareClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         0
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [OptionalDesignatorArray]
            ) [Designator]
            AssignOpClass(
              AssignOperationClass(
              ) [AssignOperationClass]
            ) [AssignOpClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    NumberConst(
                     3
                    ) [NumberConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [DesignatorStatementOptionsClassAssignExpression]
        ) [Assignment]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:02:55,893 - ===================================
INFO  18:02:55,898 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:02:55,898 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:02:55,899 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:02:55,899 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:02:55,899 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:02:55,899 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:02:55,899 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  18:02:55,899 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  18:02:55,899 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  18:02:55,899 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:02:55,900 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:02:55,900 - METHOD BODY STARTING!
INFO  18:02:55,901 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  18:02:55,901 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  18:02:55,901 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:02:55,902 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:02:55,902 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  18:02:55,902 - METHOD BODY ENDING!
INFO  18:02:55,902 - END OF DEFINING FUNCTION k
INFO  18:02:55,902 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:02:55,902 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  18:02:55,902 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  18:02:55,902 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  18:02:55,902 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 15
INFO  18:02:55,902 - METHOD BODY STARTING!
INFO  18:02:55,903 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:02:55,903 - BEGINNING OF AN ASSIGNEMENT! ON LINE 20
INFO  18:02:55,903 - CONST NUMBER 2 ON LINE 20
INFO  18:02:55,903 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,903 - CONST NUMBER 3 ON LINE 20
INFO  18:02:55,904 - CONST NUMBER 4 ON LINE 20
INFO  18:02:55,904 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,904 - CONST NUMBER 5 ON LINE 20
INFO  18:02:55,904 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,904 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  18:02:55,904 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:02:55,904 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  18:02:55,904 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:02:55,904 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  18:02:55,904 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  18:02:55,905 - CONST NUMBER 0 ON LINE 20
INFO  18:02:55,905 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,905 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,905 - CONST NUMBER 1 ON LINE 20
INFO  18:02:55,905 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,905 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,905 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:02:55,905 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:02:55,905 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:02:55,905 - USING INTEGERS IN TERM! ON LINE 6
INFO  18:02:55,905 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:02:55,905 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 20
INFO  18:02:55,906 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:02:55,906 - WE ARE USING A VARIABLE OF TYPE int ON LINE 21
INFO  18:02:55,906 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:02:55,906 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:02:55,906 - PRINT FUNCTION CALL IN USE! ON LINE 21
INFO  18:02:55,907 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:02:55,907 - BEGINNING OF AN ASSIGNEMENT! ON LINE 23
INFO  18:02:55,907 - CONST NUMBER 5 ON LINE 23
INFO  18:02:55,908 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:02:55,908 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:02:55,908 - USAGE OF KEYWORD NEW! ON LINE 23
INFO  18:02:55,908 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:02:55,908 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:02:55,909 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 23
INFO  18:02:55,909 - CONST NUMBER 0 ON LINE 24
INFO  18:02:55,909 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:02:55,909 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:02:55,909 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:02:55,909 - BEGINNING OF AN ASSIGNEMENT! ON LINE 24
INFO  18:02:55,909 - CONST NUMBER 3 ON LINE 24
INFO  18:02:55,909 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:02:55,910 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:02:55,910 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 24
INFO  18:02:55,910 - METHOD BODY ENDING!
INFO  18:02:55,910 - END OF DEFINING FUNCTION main
INFO  18:02:55,910 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:02:55,910 -  Deklarisanih promenljivih ima = 6
INFO  18:02:55,910 - ===================================
INFO  18:02:55,918 - Parsiranje uspesno zavrseno!
