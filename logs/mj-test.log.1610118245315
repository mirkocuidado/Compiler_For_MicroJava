INFO  23:02:24,958 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  23:02:25,017 - #2 program
INFO  23:02:25,018 - #48 MJProgram
INFO  23:02:25,018 - #48 int
INFO  23:02:25,019 - #48 a
INFO  23:02:25,020 - #36 ,
INFO  23:02:25,020 - #48 b
INFO  23:02:25,020 - #44 [
INFO  23:02:25,020 - #45 ]
INFO  23:02:25,020 - #36 ,
INFO  23:02:25,020 - #48 c
INFO  23:02:25,021 - #36 ,
INFO  23:02:25,021 - #48 d
INFO  23:02:25,021 - #38 ;
INFO  23:02:25,021 - #48 char
INFO  23:02:25,021 - #48 e
INFO  23:02:25,021 - #36 ,
INFO  23:02:25,021 - #48 f
INFO  23:02:25,021 - #44 [
INFO  23:02:25,021 - #45 ]
INFO  23:02:25,022 - #36 ,
INFO  23:02:25,022 - #48 g
INFO  23:02:25,022 - #38 ;
INFO  23:02:25,022 - #48 bool
INFO  23:02:25,022 - #48 h
INFO  23:02:25,022 - #36 ,
INFO  23:02:25,022 - #48 i
INFO  23:02:25,022 - #44 [
INFO  23:02:25,022 - #45 ]
INFO  23:02:25,022 - #38 ;
INFO  23:02:25,023 - #9 const
INFO  23:02:25,023 - #48 int
INFO  23:02:25,023 - #48 aa
INFO  23:02:25,023 - #24 =
INFO  23:02:25,023 - #47 2
INFO  23:02:25,023 - #36 ,
INFO  23:02:25,023 - #48 bb
INFO  23:02:25,023 - #24 =
INFO  23:02:25,023 - #47 6
INFO  23:02:25,024 - #38 ;
INFO  23:02:25,024 - #9 const
INFO  23:02:25,024 - #48 char
INFO  23:02:25,024 - #48 cc
INFO  23:02:25,024 - #24 =
INFO  23:02:25,024 - #49 c
INFO  23:02:25,024 - #36 ,
INFO  23:02:25,024 - #48 dd
INFO  23:02:25,025 - #24 =
INFO  23:02:25,025 - #49 d
INFO  23:02:25,025 - #38 ;
INFO  23:02:25,025 - #9 const
INFO  23:02:25,025 - #48 bool
INFO  23:02:25,025 - #48 ee
INFO  23:02:25,025 - #24 =
INFO  23:02:25,025 - #50 true
INFO  23:02:25,025 - #36 ,
INFO  23:02:25,025 - #48 ff
INFO  23:02:25,025 - #24 =
INFO  23:02:25,025 - #50 false
INFO  23:02:25,025 - #38 ;
INFO  23:02:25,025 - #40 {
INFO  23:02:25,025 - #5 void
INFO  23:02:25,026 - #48 func
INFO  23:02:25,026 - #42 (
INFO  23:02:25,026 - #43 )
INFO  23:02:25,027 - #40 {
INFO  23:02:25,028 - #41 }
INFO  23:02:25,028 - #5 void
INFO  23:02:25,029 - #48 main
INFO  23:02:25,029 - #42 (
INFO  23:02:25,029 - #48 int
INFO  23:02:25,029 - #48 a
INFO  23:02:25,029 - #36 ,
INFO  23:02:25,030 - #48 int
INFO  23:02:25,030 - #48 b
INFO  23:02:25,030 - #44 [
INFO  23:02:25,030 - #45 ]
INFO  23:02:25,030 - #36 ,
INFO  23:02:25,030 - #48 char
INFO  23:02:25,030 - #48 c
INFO  23:02:25,030 - #36 ,
INFO  23:02:25,030 - #48 char
INFO  23:02:25,030 - #48 d
INFO  23:02:25,030 - #44 [
INFO  23:02:25,030 - #45 ]
INFO  23:02:25,030 - #36 ,
INFO  23:02:25,030 - #48 bool
INFO  23:02:25,030 - #48 e
INFO  23:02:25,031 - #36 ,
INFO  23:02:25,031 - #48 bool
INFO  23:02:25,031 - #48 f
INFO  23:02:25,031 - #44 [
INFO  23:02:25,031 - #45 ]
INFO  23:02:25,031 - #43 )
INFO  23:02:25,031 - #40 {
INFO  23:02:25,031 - #48 a
INFO  23:02:25,031 - #33 ++
INFO  23:02:25,033 - #38 ;
INFO  23:02:25,033 - #48 b
INFO  23:02:25,034 - #44 [
INFO  23:02:25,034 - #47 0
INFO  23:02:25,034 - #45 ]
INFO  23:02:25,035 - #33 ++
INFO  23:02:25,035 - #38 ;
INFO  23:02:25,035 - #48 func
INFO  23:02:25,035 - #42 (
INFO  23:02:25,035 - #43 )
INFO  23:02:25,036 - #38 ;
INFO  23:02:25,036 - #17 read
INFO  23:02:25,036 - #42 (
INFO  23:02:25,036 - #48 a
INFO  23:02:25,036 - #43 )
INFO  23:02:25,036 - #38 ;
INFO  23:02:25,036 - #17 read
INFO  23:02:25,037 - #42 (
INFO  23:02:25,037 - #48 b
INFO  23:02:25,037 - #44 [
INFO  23:02:25,037 - #47 0
INFO  23:02:25,037 - #45 ]
INFO  23:02:25,037 - #43 )
INFO  23:02:25,037 - #38 ;
INFO  23:02:25,037 - #41 }
INFO  23:02:25,037 - #41 }
INFO  23:02:25,044 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassVoid(
         func
        ) [ReturnValueClassVoid]
        NoFormParam(
        ) [NoFormParam]
        NoVarDeclList(
        ) [NoVarDeclList]
        NoStmt(
        ) [NoStmt]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      FormParams(
        FormalParamDecls(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  SingleFormalParamDecl(
                    FormalParamDeclClassNoArray(
                      Type(
                       int
                      ) [Type]
                     a
                    ) [FormalParamDeclClassNoArray]
                  ) [SingleFormalParamDecl]
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   b
                  ) [FormalParamDeclClassArray]
                ) [FormalParamDecls]
                FormalParamDeclClassNoArray(
                  Type(
                   char
                  ) [Type]
                 c
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               d
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             e
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
          FormalParamDeclClassArray(
            Type(
             bool
            ) [Type]
           f
          ) [FormalParamDeclClassArray]
        ) [FormalParamDecls]
      ) [FormParams]
      NoVarDeclList(
      ) [NoVarDeclList]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementClass(
                    Designator(
                     a
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    DesignatorStatementPlusPlus(
                    ) [DesignatorStatementPlusPlus]
                  ) [DesignatorStatementClass]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementClass(
                  Designator(
                   b
                    OptionalDesignatorArray(
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               0
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [OptionalDesignatorArray]
                  ) [Designator]
                  DesignatorStatementPlusPlus(
                  ) [DesignatorStatementPlusPlus]
                ) [DesignatorStatementClass]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementClass(
                Designator(
                 func
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                DesignatorStatementActualParameters(
                  NoActuals(
                  ) [NoActuals]
                ) [DesignatorStatementActualParameters]
              ) [DesignatorStatementClass]
            ) [Assignment]
          ) [Statements]
          ReadClass(
            Designator(
             a
              NoOptionalDesignatorClass(
              ) [NoOptionalDesignatorClass]
            ) [Designator]
          ) [ReadClass]
        ) [Statements]
        ReadClass(
          Designator(
           b
            OptionalDesignatorArray(
              NoOptionalDesignatorClass(
              ) [NoOptionalDesignatorClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       0
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [OptionalDesignatorArray]
          ) [Designator]
        ) [ReadClass]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  23:02:25,075 - ===================================
INFO  23:02:25,082 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  23:02:25,082 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  23:02:25,082 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  23:02:25,082 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  23:02:25,082 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  23:02:25,082 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  23:02:25,082 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  23:02:25,082 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  23:02:25,082 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  23:02:25,082 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  23:02:25,082 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  23:02:25,082 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  23:02:25,082 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  23:02:25,082 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  23:02:25,082 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  23:02:25,083 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  23:02:25,083 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  23:02:25,083 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  23:02:25,083 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  23:02:25,083 - FUNCTION func WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  23:02:25,083 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 13
INFO  23:02:25,083 - USING DESIGNATOR a ON LINE 14
INFO  23:02:25,083 - USING ++ ON a
INFO  23:02:25,083 - USING DESIGNATOR b ON LINE 15
INFO  23:02:25,083 - USING ++ ON b
INFO  23:02:25,083 - USING DESIGNATOR func ON LINE 17
INFO  23:02:25,084 - GLOBAL METHOD func HAS BEEN CALLED!
INFO  23:02:25,084 - USING DESIGNATOR a ON LINE 19
INFO  23:02:25,084 - USING DESIGNATOR b ON LINE 20
INFO  23:02:25,084 - ARRAY b IN USE IN FUNCTION READ ON LINE 20
INFO  23:02:25,084 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  23:02:25,084 -  Deklarisanih promenljivih ima = 9
INFO  23:02:25,084 - ===================================
INFO  23:02:25,085 - Parsiranje uspesno zavrseno!
