INFO  23:30:43,528 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  23:30:43,775 - #2 program
INFO  23:30:43,776 - #48 MJProgram
INFO  23:30:43,776 - #48 int
INFO  23:30:43,783 - #48 a
INFO  23:30:43,791 - #36 ,
INFO  23:30:43,793 - #48 b
INFO  23:30:43,796 - #36 ,
INFO  23:30:43,797 - #48 c
INFO  23:30:43,798 - #36 ,
INFO  23:30:43,798 - #48 d
INFO  23:30:43,798 - #38 ;
INFO  23:30:43,798 - #9 const
INFO  23:30:43,799 - #48 int
INFO  23:30:43,799 - #48 y
INFO  23:30:43,799 - #24 =
INFO  23:30:43,799 - #47 3
INFO  23:30:43,799 - #38 ;
INFO  23:30:43,800 - #40 {
INFO  23:30:43,800 - #48 int
INFO  23:30:43,802 - #48 k
INFO  23:30:43,802 - #42 (
INFO  23:30:43,812 - #48 int
INFO  23:30:43,813 - #48 a
INFO  23:30:43,813 - #36 ,
INFO  23:30:43,813 - #48 int
INFO  23:30:43,813 - #48 b
INFO  23:30:43,813 - #43 )
INFO  23:30:43,814 - #40 {
INFO  23:30:43,816 - #46 return
INFO  23:30:43,819 - #48 b
INFO  23:30:43,835 - #38 ;
INFO  23:30:43,839 - #41 }
INFO  23:30:43,839 - #48 char
INFO  23:30:43,843 - #48 s
INFO  23:30:43,843 - #42 (
INFO  23:30:43,843 - #43 )
INFO  23:30:43,844 - #40 {
INFO  23:30:43,845 - #46 return
INFO  23:30:43,845 - #49 c
INFO  23:30:43,845 - #38 ;
INFO  23:30:43,845 - #41 }
INFO  23:30:43,845 - #5 void
INFO  23:30:43,846 - #48 main
INFO  23:30:43,846 - #42 (
INFO  23:30:43,846 - #43 )
INFO  23:30:43,846 - #48 int
INFO  23:30:43,846 - #48 x
INFO  23:30:43,846 - #38 ;
INFO  23:30:43,846 - #48 char
INFO  23:30:43,846 - #48 z
INFO  23:30:43,846 - #38 ;
INFO  23:30:43,847 - #48 bool
INFO  23:30:43,847 - #48 p
INFO  23:30:43,847 - #38 ;
INFO  23:30:43,847 - #48 int
INFO  23:30:43,847 - #48 xx
INFO  23:30:43,847 - #44 [
INFO  23:30:43,847 - #45 ]
INFO  23:30:43,847 - #38 ;
INFO  23:30:43,847 - #48 int
INFO  23:30:43,847 - #48 dd
INFO  23:30:43,848 - #38 ;
INFO  23:30:43,848 - #40 {
INFO  23:30:43,848 - #48 x
INFO  23:30:43,848 - #24 =
INFO  23:30:43,848 - #47 2
INFO  23:30:43,849 - #19 +
INFO  23:30:43,850 - #47 3
INFO  23:30:43,855 - #19 +
INFO  23:30:43,856 - #47 4
INFO  23:30:43,856 - #19 +
INFO  23:30:43,856 - #47 5
INFO  23:30:43,858 - #38 ;
INFO  23:30:43,859 - #18 print
INFO  23:30:43,860 - #42 (
INFO  23:30:43,860 - #48 x
INFO  23:30:43,860 - #43 )
INFO  23:30:43,862 - #38 ;
INFO  23:30:43,862 - #41 }
INFO  23:30:43,863 - #41 }
INFO  23:30:43,882 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           k
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassNoArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        HelperClass(
                        ) [HelperClass]
                        Designator(
                         b
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           char
          ) [Type]
         s
        ) [ReturnValueClassNoVoid]
        NoFormParam(
        ) [NoFormParam]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    CharConst(
                     c
                    ) [CharConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                NoVarDeclList(
                ) [NoVarDeclList]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   z
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 p
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassArray(
               xx
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             dd
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
               x
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              HelperClass(
              ) [HelperClass]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       2
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    ExprOptionalListClass(
                      ExprOptionalListClass(
                        ExprOptionalListClass(
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                          PlusOperation(
                          ) [PlusOperation]
                          TermClass(
                            NumberConst(
                             3
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                        ) [ExprOptionalListClass]
                        PlusOperation(
                        ) [PlusOperation]
                        TermClass(
                          NumberConst(
                           4
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                      ) [ExprOptionalListClass]
                      PlusOperation(
                      ) [PlusOperation]
                      TermClass(
                        NumberConst(
                         5
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                    ) [ExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    HelperClass(
                    ) [HelperClass]
                    Designator(
                     x
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  23:30:43,882 - ===================================
INFO  23:30:43,890 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  23:30:43,891 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  23:30:43,891 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  23:30:43,891 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  23:30:43,891 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  23:30:43,891 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  23:30:43,891 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  23:30:43,892 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  23:30:43,892 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  23:30:43,892 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  23:30:43,892 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  23:30:43,893 - METHOD BODY STARTING!
INFO  23:30:43,893 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  23:30:43,894 - WE ARE USING A VARIABLE OF TYPE int ON LINE 23
INFO  23:30:43,894 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  23:30:43,894 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  23:30:43,895 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  23:30:43,895 - METHOD BODY ENDING!
INFO  23:30:43,895 - END OF DEFINING FUNCTION k
INFO  23:30:43,896 - FUNCTION s WITH RETURN VALUE OF TYPE char ON LINE 9
INFO  23:30:43,896 - METHOD BODY STARTING!
INFO  23:30:43,896 - CONST CHAR c ON LINE 9
INFO  23:30:43,897 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:30:43,897 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:30:43,897 - SUCCESSFUL RETURN! TYPES: char AND char ! ON LINE 9
INFO  23:30:43,897 - METHOD BODY ENDING!
INFO  23:30:43,897 - END OF DEFINING FUNCTION s
INFO  23:30:43,897 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  23:30:43,897 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  23:30:43,897 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  23:30:43,897 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  23:30:43,897 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  23:30:43,898 - VARIABLE p IS BEING DEFINED! ON LINE 14
INFO  23:30:43,898 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 14
INFO  23:30:43,899 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  23:30:43,900 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 15
INFO  23:30:43,900 - VARIABLE dd IS BEING DEFINED! ON LINE 16
INFO  23:30:43,900 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 16
INFO  23:30:43,900 - METHOD BODY STARTING!
INFO  23:30:43,901 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  23:30:43,901 - BEGINNING OF AN ASSIGNEMENT! ON LINE 20
INFO  23:30:43,901 - CONST NUMBER 2 ON LINE 20
INFO  23:30:43,901 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  23:30:43,902 - CONST NUMBER 3 ON LINE 20
INFO  23:30:43,902 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  23:30:43,902 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  23:30:43,903 - CONST NUMBER 4 ON LINE 20
INFO  23:30:43,903 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  23:30:43,903 - USING INTEGERS IN TERM! ON LINE 6
INFO  23:30:43,903 - CONST NUMBER 5 ON LINE 20
INFO  23:30:43,903 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  23:30:43,903 - USING INTEGERS IN TERM! ON LINE 6
INFO  23:30:43,903 - USING INTEGERS IN TERM! ON LINE 20
INFO  23:30:43,904 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 20
INFO  23:30:43,904 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  23:30:43,904 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  23:30:43,904 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  23:30:43,904 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  23:30:43,904 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  23:30:43,904 - METHOD BODY ENDING!
INFO  23:30:43,904 - END OF DEFINING FUNCTION main
INFO  23:30:43,904 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  23:30:43,905 -  Deklarisanih promenljivih ima = 9
INFO  23:30:43,905 - ===================================
INFO  23:30:43,910 - Parsiranje uspesno zavrseno!
