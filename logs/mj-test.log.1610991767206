INFO  18:40:29,348 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:40:29,418 - #2 program
INFO  18:40:29,418 - #44 MJProgram
INFO  18:40:29,418 - #44 int
INFO  18:40:29,420 - #44 a
INFO  18:40:29,421 - #31 ,
INFO  18:40:29,421 - #44 b
INFO  18:40:29,421 - #39 [
INFO  18:40:29,422 - #40 ]
INFO  18:40:29,422 - #31 ,
INFO  18:40:29,422 - #44 c
INFO  18:40:29,422 - #31 ,
INFO  18:40:29,422 - #44 d
INFO  18:40:29,422 - #33 ;
INFO  18:40:29,422 - #44 char
INFO  18:40:29,423 - #44 e
INFO  18:40:29,423 - #31 ,
INFO  18:40:29,423 - #44 f
INFO  18:40:29,423 - #39 [
INFO  18:40:29,423 - #40 ]
INFO  18:40:29,424 - #31 ,
INFO  18:40:29,424 - #44 g
INFO  18:40:29,424 - #33 ;
INFO  18:40:29,433 - #44 bool
INFO  18:40:29,433 - #44 h
INFO  18:40:29,433 - #31 ,
INFO  18:40:29,433 - #44 i
INFO  18:40:29,434 - #39 [
INFO  18:40:29,434 - #40 ]
INFO  18:40:29,434 - #33 ;
INFO  18:40:29,434 - #9 const
INFO  18:40:29,434 - #44 int
INFO  18:40:29,434 - #44 aa
INFO  18:40:29,434 - #19 =
INFO  18:40:29,434 - #43 2
INFO  18:40:29,435 - #31 ,
INFO  18:40:29,435 - #44 bb
INFO  18:40:29,435 - #19 =
INFO  18:40:29,435 - #43 6
INFO  18:40:29,436 - #33 ;
INFO  18:40:29,436 - #9 const
INFO  18:40:29,436 - #44 char
INFO  18:40:29,436 - #44 cc
INFO  18:40:29,436 - #19 =
INFO  18:40:29,437 - #45 c
INFO  18:40:29,437 - #31 ,
INFO  18:40:29,437 - #44 dd
INFO  18:40:29,437 - #19 =
INFO  18:40:29,437 - #45 d
INFO  18:40:29,437 - #33 ;
INFO  18:40:29,437 - #9 const
INFO  18:40:29,437 - #44 bool
INFO  18:40:29,438 - #44 ee
INFO  18:40:29,438 - #19 =
INFO  18:40:29,438 - #46 true
INFO  18:40:29,438 - #31 ,
INFO  18:40:29,438 - #44 ff
INFO  18:40:29,438 - #19 =
INFO  18:40:29,438 - #46 false
INFO  18:40:29,438 - #33 ;
INFO  18:40:29,438 - #35 {
INFO  18:40:29,439 - #5 void
INFO  18:40:29,440 - #44 m
INFO  18:40:29,440 - #37 (
INFO  18:40:29,440 - #38 )
INFO  18:40:29,441 - #35 {
INFO  18:40:29,442 - #36 }
INFO  18:40:29,444 - #5 void
INFO  18:40:29,446 - #44 k
INFO  18:40:29,446 - #37 (
INFO  18:40:29,446 - #44 int
INFO  18:40:29,446 - #44 z
INFO  18:40:29,446 - #38 )
INFO  18:40:29,446 - #35 {
INFO  18:40:29,446 - #44 z
INFO  18:40:29,447 - #19 =
INFO  18:40:29,450 - #43 400
INFO  18:40:29,452 - #33 ;
INFO  18:40:29,454 - #41 return
INFO  18:40:29,455 - #33 ;
INFO  18:40:29,455 - #36 }
INFO  18:40:29,455 - #44 int
INFO  18:40:29,456 - #44 func
INFO  18:40:29,456 - #37 (
INFO  18:40:29,456 - #44 int
INFO  18:40:29,456 - #44 a
INFO  18:40:29,456 - #39 [
INFO  18:40:29,456 - #40 ]
INFO  18:40:29,456 - #31 ,
INFO  18:40:29,456 - #44 int
INFO  18:40:29,456 - #44 b
INFO  18:40:29,456 - #38 )
INFO  18:40:29,457 - #35 {
INFO  18:40:29,457 - #41 return
INFO  18:40:29,457 - #43 0
INFO  18:40:29,459 - #33 ;
INFO  18:40:29,459 - #36 }
INFO  18:40:29,459 - #5 void
INFO  18:40:29,459 - #44 main
INFO  18:40:29,459 - #37 (
INFO  18:40:29,459 - #44 int
INFO  18:40:29,459 - #44 a
INFO  18:40:29,459 - #31 ,
INFO  18:40:29,459 - #44 int
INFO  18:40:29,459 - #44 b
INFO  18:40:29,460 - #39 [
INFO  18:40:29,460 - #40 ]
INFO  18:40:29,460 - #31 ,
INFO  18:40:29,460 - #44 char
INFO  18:40:29,460 - #44 c
INFO  18:40:29,460 - #31 ,
INFO  18:40:29,460 - #44 char
INFO  18:40:29,460 - #44 d
INFO  18:40:29,460 - #39 [
INFO  18:40:29,460 - #40 ]
INFO  18:40:29,460 - #31 ,
INFO  18:40:29,460 - #44 bool
INFO  18:40:29,460 - #44 e
INFO  18:40:29,461 - #31 ,
INFO  18:40:29,461 - #44 bool
INFO  18:40:29,461 - #44 f
INFO  18:40:29,461 - #39 [
INFO  18:40:29,461 - #40 ]
INFO  18:40:29,461 - #38 )
INFO  18:40:29,461 - #44 int
INFO  18:40:29,461 - #44 x
INFO  18:40:29,461 - #31 ,
INFO  18:40:29,461 - #44 y
INFO  18:40:29,461 - #31 ,
INFO  18:40:29,461 - #44 z
INFO  18:40:29,462 - #33 ;
INFO  18:40:29,462 - #44 char
INFO  18:40:29,462 - #44 xx
INFO  18:40:29,462 - #31 ,
INFO  18:40:29,462 - #44 yy
INFO  18:40:29,462 - #31 ,
INFO  18:40:29,462 - #44 zz
INFO  18:40:29,462 - #33 ;
INFO  18:40:29,462 - #35 {
INFO  18:40:29,462 - #44 x
INFO  18:40:29,462 - #19 =
INFO  18:40:29,463 - #43 123
INFO  18:40:29,463 - #33 ;
INFO  18:40:29,463 - #44 xx
INFO  18:40:29,463 - #19 =
INFO  18:40:29,463 - #45 c
INFO  18:40:29,463 - #33 ;
INFO  18:40:29,463 - #14 if
INFO  18:40:29,463 - #37 (
INFO  18:40:29,463 - #44 a
INFO  18:40:29,463 - #20 ==
INFO  18:40:29,463 - #44 x
INFO  18:40:29,464 - #38 )
INFO  18:40:29,466 - #35 {
INFO  18:40:29,466 - #14 if
INFO  18:40:29,466 - #37 (
INFO  18:40:29,466 - #44 c
INFO  18:40:29,466 - #20 ==
INFO  18:40:29,467 - #44 d
INFO  18:40:29,467 - #39 [
INFO  18:40:29,468 - #43 3
INFO  18:40:29,469 - #40 ]
INFO  18:40:29,469 - #26 &&
INFO  18:40:29,470 - #44 a
INFO  18:40:29,471 - #24 >=
INFO  18:40:29,472 - #44 b
INFO  18:40:29,473 - #39 [
INFO  18:40:29,473 - #44 y
INFO  18:40:29,473 - #40 ]
INFO  18:40:29,473 - #38 )
INFO  18:40:29,473 - #35 {
INFO  18:40:29,474 - #44 z
INFO  18:40:29,474 - #19 =
INFO  18:40:29,474 - #43 300
INFO  18:40:29,474 - #33 ;
INFO  18:40:29,474 - #36 }
INFO  18:40:29,474 - #15 else
INFO  18:40:29,475 - #44 z
INFO  18:40:29,475 - #19 =
INFO  18:40:29,475 - #43 400
INFO  18:40:29,476 - #33 ;
INFO  18:40:29,476 - #36 }
INFO  18:40:29,476 - #15 else
INFO  18:40:29,476 - #44 z
INFO  18:40:29,476 - #19 =
INFO  18:40:29,476 - #43 500
INFO  18:40:29,476 - #33 ;
INFO  18:40:29,476 - #44 b
INFO  18:40:29,476 - #19 =
INFO  18:40:29,476 - #44 e
INFO  18:40:29,476 - #34 ?
INFO  18:40:29,476 - #44 b
INFO  18:40:29,477 - #32 :
INFO  18:40:29,478 - #44 b
INFO  18:40:29,479 - #33 ;
INFO  18:40:29,479 - #12 do
INFO  18:40:29,479 - #35 {
INFO  18:40:29,480 - #44 a
INFO  18:40:29,480 - #19 =
INFO  18:40:29,480 - #43 2
INFO  18:40:29,480 - #33 ;
INFO  18:40:29,480 - #36 }
INFO  18:40:29,480 - #13 while
INFO  18:40:29,480 - #37 (
INFO  18:40:29,480 - #44 a
INFO  18:40:29,482 - #20 ==
INFO  18:40:29,482 - #44 func
INFO  18:40:29,482 - #37 (
INFO  18:40:29,482 - #44 b
INFO  18:40:29,482 - #31 ,
INFO  18:40:29,482 - #44 a
INFO  18:40:29,482 - #38 )
INFO  18:40:29,483 - #38 )
INFO  18:40:29,483 - #33 ;
INFO  18:40:29,484 - #44 func
INFO  18:40:29,484 - #37 (
INFO  18:40:29,484 - #44 b
INFO  18:40:29,485 - #31 ,
INFO  18:40:29,485 - #44 func
INFO  18:40:29,485 - #37 (
INFO  18:40:29,485 - #44 b
INFO  18:40:29,485 - #31 ,
INFO  18:40:29,485 - #44 b
INFO  18:40:29,485 - #39 [
INFO  18:40:29,485 - #43 0
INFO  18:40:29,485 - #40 ]
INFO  18:40:29,485 - #38 )
INFO  18:40:29,485 - #38 )
INFO  18:40:29,485 - #33 ;
INFO  18:40:29,485 - #44 d
INFO  18:40:29,485 - #39 [
INFO  18:40:29,485 - #43 0
INFO  18:40:29,486 - #40 ]
INFO  18:40:29,486 - #19 =
INFO  18:40:29,486 - #44 d
INFO  18:40:29,486 - #39 [
INFO  18:40:29,486 - #43 1
INFO  18:40:29,486 - #40 ]
INFO  18:40:29,486 - #33 ;
INFO  18:40:29,486 - #36 }
INFO  18:40:29,486 - #36 }
INFO  18:40:29,495 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassVoid(
             m
            ) [ReturnValueClassVoid]
            NoFormParam(
            ) [NoFormParam]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            NoStmt(
            ) [NoStmt]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassVoid(
           k
          ) [ReturnValueClassVoid]
          FormParams(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               z
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     z
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           400
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            ReturnNoExpr(
            ) [ReturnNoExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         func
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    NumberConst(
                     0
                    ) [NumberConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      FormParams(
        FormalParamDecls(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  SingleFormalParamDecl(
                    FormalParamDeclClassNoArray(
                      Type(
                       int
                      ) [Type]
                     a
                    ) [FormalParamDeclClassNoArray]
                  ) [SingleFormalParamDecl]
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   b
                  ) [FormalParamDeclClassArray]
                ) [FormalParamDecls]
                FormalParamDeclClassNoArray(
                  Type(
                   char
                  ) [Type]
                 c
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               d
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             e
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
          FormalParamDeclClassArray(
            Type(
             bool
            ) [Type]
           f
          ) [FormalParamDeclClassArray]
        ) [FormalParamDecls]
      ) [FormParams]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   x
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 y
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               z
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           char
          ) [Type]
          VarListClass(
            VarListClass(
              VarListSingle(
                VarClassNoArray(
                 xx
                ) [VarClassNoArray]
              ) [VarListSingle]
              VarClassNoArray(
               yy
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             zz
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           x
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 123
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         xx
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              CharConst(
                               c
                              ) [CharConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                IfStatement(
                  IfConditionNoError(
                    ConditionClass(
                      CondTermClass(
                        CondFactClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     a
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                          CondFactOptionalClass(
                            RelationOperationClassEqualComparation(
                            ) [RelationOperationClassEqualComparation]
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       x
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [CondFactOptionalClass]
                        ) [CondFactClass]
                        NoCondTermOptionalClass(
                        ) [NoCondTermOptionalClass]
                      ) [CondTermClass]
                      NoConditionOptionalClass(
                      ) [NoConditionOptionalClass]
                    ) [ConditionClass]
                  ) [IfConditionNoError]
                  StatementStatement(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      IfStatement(
                        IfConditionNoError(
                          ConditionClass(
                            CondTermClass(
                              CondFactClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           c
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                                CondFactOptionalClass(
                                  RelationOperationClassEqualComparation(
                                  ) [RelationOperationClassEqualComparation]
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             d
                                            ) [DesigIdent]
                                            OptionalDesignatorArray(
                                              HelperClass(
                                              ) [HelperClass]
                                              LSquareClass(
                                              ) [LSquareClass]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      NumberConst(
                                                       3
                                                      ) [NumberConst]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [OptionalDesignatorArray]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [CondFactOptionalClass]
                              ) [CondFactClass]
                              CondTermOptionalClass(
                                NoCondTermOptionalClass(
                                ) [NoCondTermOptionalClass]
                                FakeAndClass(
                                ) [FakeAndClass]
                                CondFactClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             a
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                  CondFactOptionalClass(
                                    GreaterOrEqualOperationClass(
                                    ) [GreaterOrEqualOperationClass]
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               b
                                              ) [DesigIdent]
                                              OptionalDesignatorArray(
                                                HelperClass(
                                                ) [HelperClass]
                                                LSquareClass(
                                                ) [LSquareClass]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        DesignatorClass(
                                                          Designator(
                                                            DesigIdent(
                                                             y
                                                            ) [DesigIdent]
                                                            NoOptionalDesignatorClass(
                                                            ) [NoOptionalDesignatorClass]
                                                          ) [Designator]
                                                        ) [DesignatorClass]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [OptionalDesignatorArray]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [CondFactOptionalClass]
                                ) [CondFactClass]
                              ) [CondTermOptionalClass]
                            ) [CondTermClass]
                            NoConditionOptionalClass(
                            ) [NoConditionOptionalClass]
                          ) [ConditionClass]
                        ) [IfConditionNoError]
                        StatementStatement(
                          Statements(
                            NoStmt(
                            ) [NoStmt]
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                  DesigIdent(
                                   z
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         300
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [Statements]
                        ) [StatementStatement]
                        Empty(
                        ) [Empty]
                        YesOptionalStatement(
                          Assignment(
                            DesignatorStatementOptionsClassAssignExpression(
                              Designator(
                                DesigIdent(
                                 z
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              AssignOpClass(
                                AssignOperationClass(
                                ) [AssignOperationClass]
                              ) [AssignOpClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       400
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [DesignatorStatementOptionsClassAssignExpression]
                          ) [Assignment]
                        ) [YesOptionalStatement]
                      ) [IfStatement]
                    ) [Statements]
                  ) [StatementStatement]
                  Empty(
                  ) [Empty]
                  YesOptionalStatement(
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           z
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 500
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [YesOptionalStatement]
                ) [IfStatement]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     b
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassTwoClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               e
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    TernaryClass(
                    ) [TernaryClass]
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               b
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    ColonClass(
                    ) [ColonClass]
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               b
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassTwoClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         a
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               2
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               a
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      RelationOperationClassEqualComparation(
                      ) [RelationOperationClassEqualComparation]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            FactorOptionalParams(
                              Designator(
                                DesigIdent(
                                 func
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              Actuals(
                                ActualParams(
                                  ActualParam(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 b
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ActualParam]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               a
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParams]
                              ) [Actuals]
                            ) [FactorOptionalParams]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          Assignment(
            DesignatorStatementActualParameters(
              Designator(
                DesigIdent(
                 func
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              Actuals(
                ActualParams(
                  ActualParam(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 b
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [ActualParam]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          FactorOptionalParams(
                            Designator(
                              DesigIdent(
                               func
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                            Actuals(
                              ActualParams(
                                ActualParam(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               b
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParam]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             b
                                            ) [DesigIdent]
                                            OptionalDesignatorArray(
                                              HelperClass(
                                              ) [HelperClass]
                                              LSquareClass(
                                              ) [LSquareClass]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      NumberConst(
                                                       0
                                                      ) [NumberConst]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [OptionalDesignatorArray]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [ActualParams]
                            ) [Actuals]
                          ) [FactorOptionalParams]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [ActualParams]
              ) [Actuals]
            ) [DesignatorStatementActualParameters]
          ) [Assignment]
        ) [Statements]
        Assignment(
          DesignatorStatementOptionsClassAssignExpression(
            Designator(
              DesigIdent(
               d
              ) [DesigIdent]
              OptionalDesignatorArray(
                HelperClass(
                ) [HelperClass]
                LSquareClass(
                ) [LSquareClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         0
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [OptionalDesignatorArray]
            ) [Designator]
            AssignOpClass(
              AssignOperationClass(
              ) [AssignOperationClass]
            ) [AssignOpClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         d
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   1
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [DesignatorStatementOptionsClassAssignExpression]
        ) [Assignment]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:40:29,497 - ===================================
INFO  18:40:29,501 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:40:29,501 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:40:29,501 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:40:29,502 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:40:29,502 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:40:29,502 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:40:29,502 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  18:40:29,502 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  18:40:29,502 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  18:40:29,502 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  18:40:29,502 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  18:40:29,502 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  18:40:29,502 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  18:40:29,502 - CONST VALUE 2 IS BEING USED! ON LINE 6
INFO  18:40:29,502 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  18:40:29,502 - CONST VALUE 6 IS BEING USED! ON LINE 6
INFO  18:40:29,502 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  18:40:29,502 - CONST VALUE c IS BEING USED! ON LINE 7
INFO  18:40:29,502 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  18:40:29,502 - CONST VALUE d IS BEING USED! ON LINE 7
INFO  18:40:29,502 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  18:40:29,502 - CONST VALUE true IS BEING USED! ON LINE 8
INFO  18:40:29,503 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  18:40:29,503 - CONST VALUE false IS BEING USED! ON LINE 8
INFO  18:40:29,503 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  18:40:29,503 - FUNCTION m WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:40:29,503 - METHOD BODY STARTING!
INFO  18:40:29,503 - METHOD BODY ENDING!
INFO  18:40:29,503 - END OF DEFINING FUNCTION m
INFO  18:40:29,503 - FUNCTION k WITH VOID AS RETURN VALUE!  ON LINE 13
INFO  18:40:29,503 - FORMAL PARAMETER z DEFINED AND IT IS OF TYPE int ON LINE 13
INFO  18:40:29,503 - METHOD BODY STARTING!
INFO  18:40:29,503 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:40:29,503 - BEGINNING OF AN ASSIGNEMENT! ON LINE 15
INFO  18:40:29,503 - CONST NUMBER 400 ON LINE 15
INFO  18:40:29,503 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  18:40:29,503 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  18:40:29,503 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 15
INFO  18:40:29,503 - return; AND THE FUNCTION IS VOID!
INFO  18:40:29,503 - METHOD BODY ENDING!
INFO  18:40:29,503 - END OF DEFINING FUNCTION k
INFO  18:40:29,503 - FUNCTION func WITH RETURN VALUE OF TYPE int ON LINE 20
INFO  18:40:29,504 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 20
INFO  18:40:29,504 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 20
INFO  18:40:29,504 - METHOD BODY STARTING!
INFO  18:40:29,504 - CONST NUMBER 0 ON LINE 20
INFO  18:40:29,504 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:40:29,504 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:40:29,504 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 20
INFO  18:40:29,504 - METHOD BODY ENDING!
INFO  18:40:29,504 - END OF DEFINING FUNCTION func
INFO  18:40:29,504 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 22
INFO  18:40:29,504 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 22
INFO  18:40:29,504 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 22
INFO  18:40:29,504 - FORMAL PARAMETER c DEFINED AND IT IS OF TYPE char ON LINE 22
INFO  18:40:29,504 - FORMAL ARRAY PARAMETER d DEFINED AND IT IS OF TYPE char ON LINE 22
INFO  18:40:29,504 - FORMAL PARAMETER e DEFINED AND IT IS OF TYPE boolean ON LINE 22
INFO  18:40:29,504 - FORMAL ARRAY PARAMETER f DEFINED AND IT IS OF TYPE boolean ON LINE 22
INFO  18:40:29,504 - VARIABLE x IS BEING DEFINED! ON LINE 23
INFO  18:40:29,504 - VARIABLE y IS BEING DEFINED! ON LINE 23
INFO  18:40:29,504 - VARIABLE z IS BEING DEFINED! ON LINE 23
INFO  18:40:29,504 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 23
INFO  18:40:29,504 - VARIABLE xx IS BEING DEFINED! ON LINE 24
INFO  18:40:29,504 - VARIABLE yy IS BEING DEFINED! ON LINE 24
INFO  18:40:29,504 - VARIABLE zz IS BEING DEFINED! ON LINE 24
INFO  18:40:29,504 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 24
INFO  18:40:29,504 - METHOD BODY STARTING!
INFO  18:40:29,504 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:40:29,504 - BEGINNING OF AN ASSIGNEMENT! ON LINE 27
INFO  18:40:29,505 - CONST NUMBER 123 ON LINE 27
INFO  18:40:29,505 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:40:29,505 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:40:29,505 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 27
INFO  18:40:29,505 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE char
INFO  18:40:29,505 - BEGINNING OF AN ASSIGNEMENT! ON LINE 28
INFO  18:40:29,505 - CONST CHAR c ON LINE 28
INFO  18:40:29,505 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:40:29,505 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:40:29,505 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 28
INFO  18:40:29,505 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:40:29,505 - WE ARE USING A VARIABLE OF TYPE int ON LINE 30
INFO  18:40:29,505 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:40:29,505 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:40:29,506 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:40:29,506 - WE ARE USING A VARIABLE OF TYPE int ON LINE 30
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:40:29,506 - USING TWO EXPRESSIONS OF TYPE int ON LINE 30
INFO  18:40:29,506 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE char
INFO  18:40:29,506 - WE ARE USING A VARIABLE OF TYPE char ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - CONST NUMBER 3 ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  18:40:29,506 - WE ARE USING AN ARRAY OF TYPE char ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - USING TWO EXPRESSIONS OF TYPE char ON LINE 31
INFO  18:40:29,506 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:40:29,506 - WE ARE USING A VARIABLE OF TYPE int ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,506 - CURRENT VARIABLE IN USE IS y AND IT IS OF TYPE int
INFO  18:40:29,507 - WE ARE USING A VARIABLE OF TYPE int ON LINE 31
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,507 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,507 - WE ARE USING AN ARRAY OF TYPE int ON LINE 31
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  18:40:29,507 - USING TWO EXPRESSIONS OF TYPE int ON LINE 31
INFO  18:40:29,507 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:40:29,507 - BEGINNING OF AN ASSIGNEMENT! ON LINE 32
INFO  18:40:29,507 - CONST NUMBER 300 ON LINE 32
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  18:40:29,507 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 32
INFO  18:40:29,507 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:40:29,507 - BEGINNING OF AN ASSIGNEMENT! ON LINE 34
INFO  18:40:29,507 - CONST NUMBER 400 ON LINE 34
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  18:40:29,507 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 34
INFO  18:40:29,507 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:40:29,507 - BEGINNING OF AN ASSIGNEMENT! ON LINE 36
INFO  18:40:29,507 - CONST NUMBER 500 ON LINE 36
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  18:40:29,507 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  18:40:29,508 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 36
INFO  18:40:29,508 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,508 - BEGINNING OF AN ASSIGNEMENT! ON LINE 38
INFO  18:40:29,508 - CURRENT VARIABLE IN USE IS e AND IT IS OF TYPE boolean
INFO  18:40:29,508 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 38
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:40:29,508 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,508 - WE ARE USING A VARIABLE OF TYPE array ON LINE 38
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:40:29,508 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,508 - WE ARE USING A VARIABLE OF TYPE array ON LINE 38
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:40:29,508 - SUCCESSFUL TERNARY! TYPES: int AND int ! ON LINE 38
INFO  18:40:29,508 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 38
INFO  18:40:29,508 - BEGINNING OF A DO...WHILE LOOP!
INFO  18:40:29,508 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:40:29,508 - BEGINNING OF AN ASSIGNEMENT! ON LINE 41
INFO  18:40:29,508 - CONST NUMBER 2 ON LINE 41
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  18:40:29,508 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 41
INFO  18:40:29,508 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:40:29,508 - WE ARE USING A VARIABLE OF TYPE int ON LINE 43
INFO  18:40:29,508 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  18:40:29,509 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,509 - WE ARE USING A VARIABLE OF TYPE array ON LINE 43
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:40:29,509 - WE ARE USING A VARIABLE OF TYPE int ON LINE 43
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - TYPE -> array <- AND -> array <- ON LINE 43
INFO  18:40:29,509 - TYPE -> int <- AND -> int <- ON LINE 43
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:40:29,509 - USING TWO EXPRESSIONS OF TYPE int ON LINE 43
INFO  18:40:29,509 - ENDING OF A DO...WHILE LOOP! ON LINE 40
INFO  18:40:29,509 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  18:40:29,509 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,509 - WE ARE USING A VARIABLE OF TYPE array ON LINE 45
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,509 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  18:40:29,509 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,509 - WE ARE USING A VARIABLE OF TYPE array ON LINE 45
INFO  18:40:29,509 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - CONST NUMBER 0 ON LINE 45
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:40:29,510 - WE ARE USING AN ARRAY OF TYPE int ON LINE 45
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - TYPE -> array <- AND -> array <- ON LINE 45
INFO  18:40:29,510 - TYPE -> int <- AND -> int <- ON LINE 45
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:40:29,510 - TYPE -> array <- AND -> array <- ON LINE 45
INFO  18:40:29,510 - TYPE -> int <- AND -> int <- ON LINE 45
INFO  18:40:29,510 - GLOBAL METHOD func HAS BEEN CALLED!
INFO  18:40:29,510 - CONST NUMBER 0 ON LINE 47
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:40:29,510 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  18:40:29,510 - BEGINNING OF AN ASSIGNEMENT! ON LINE 47
INFO  18:40:29,510 - CONST NUMBER 1 ON LINE 47
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:40:29,510 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  18:40:29,510 - WE ARE USING AN ARRAY OF TYPE char ON LINE 47
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:40:29,510 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:40:29,510 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 47
INFO  18:40:29,510 - METHOD BODY ENDING!
INFO  18:40:29,510 - END OF DEFINING FUNCTION main
INFO  18:40:29,510 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:40:29,510 -  Deklarisanih promenljivih ima = 15
INFO  18:40:29,511 - ===================================
INFO  18:40:29,517 - Parsiranje uspesno zavrseno!
