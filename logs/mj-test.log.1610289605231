INFO  15:38:59,427 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  15:38:59,499 - #2 program
INFO  15:38:59,499 - #48 MJProgram
INFO  15:38:59,499 - #48 int
INFO  15:38:59,501 - #48 a
INFO  15:38:59,502 - #36 ,
INFO  15:38:59,502 - #48 b
INFO  15:38:59,502 - #44 [
INFO  15:38:59,502 - #45 ]
INFO  15:38:59,502 - #36 ,
INFO  15:38:59,502 - #48 c
INFO  15:38:59,503 - #36 ,
INFO  15:38:59,503 - #48 d
INFO  15:38:59,503 - #38 ;
INFO  15:38:59,503 - #48 char
INFO  15:38:59,503 - #48 e
INFO  15:38:59,503 - #36 ,
INFO  15:38:59,503 - #48 f
INFO  15:38:59,503 - #44 [
INFO  15:38:59,504 - #45 ]
INFO  15:38:59,504 - #36 ,
INFO  15:38:59,504 - #48 g
INFO  15:38:59,504 - #38 ;
INFO  15:38:59,513 - #48 bool
INFO  15:38:59,513 - #48 h
INFO  15:38:59,513 - #36 ,
INFO  15:38:59,513 - #48 i
INFO  15:38:59,513 - #44 [
INFO  15:38:59,513 - #45 ]
INFO  15:38:59,513 - #38 ;
INFO  15:38:59,513 - #9 const
INFO  15:38:59,513 - #48 int
INFO  15:38:59,513 - #48 aa
INFO  15:38:59,514 - #24 =
INFO  15:38:59,514 - #47 2
INFO  15:38:59,514 - #36 ,
INFO  15:38:59,514 - #48 bb
INFO  15:38:59,514 - #24 =
INFO  15:38:59,514 - #47 6
INFO  15:38:59,514 - #38 ;
INFO  15:38:59,515 - #9 const
INFO  15:38:59,515 - #48 char
INFO  15:38:59,515 - #48 cc
INFO  15:38:59,515 - #24 =
INFO  15:38:59,515 - #49 c
INFO  15:38:59,515 - #36 ,
INFO  15:38:59,516 - #48 dd
INFO  15:38:59,516 - #24 =
INFO  15:38:59,516 - #49 d
INFO  15:38:59,516 - #38 ;
INFO  15:38:59,516 - #9 const
INFO  15:38:59,516 - #48 bool
INFO  15:38:59,516 - #48 ee
INFO  15:38:59,516 - #24 =
INFO  15:38:59,516 - #50 true
INFO  15:38:59,516 - #36 ,
INFO  15:38:59,516 - #48 ff
INFO  15:38:59,516 - #24 =
INFO  15:38:59,517 - #50 false
INFO  15:38:59,517 - #38 ;
INFO  15:38:59,517 - #40 {
INFO  15:38:59,517 - #5 void
INFO  15:38:59,519 - #48 m
INFO  15:38:59,519 - #42 (
INFO  15:38:59,519 - #43 )
INFO  15:38:59,520 - #40 {
INFO  15:38:59,520 - #41 }
INFO  15:38:59,523 - #48 int
INFO  15:38:59,525 - #48 func
INFO  15:38:59,525 - #42 (
INFO  15:38:59,525 - #48 int
INFO  15:38:59,525 - #48 a
INFO  15:38:59,525 - #44 [
INFO  15:38:59,525 - #45 ]
INFO  15:38:59,525 - #36 ,
INFO  15:38:59,525 - #48 int
INFO  15:38:59,526 - #48 b
INFO  15:38:59,526 - #43 )
INFO  15:38:59,526 - #40 {
INFO  15:38:59,526 - #46 return
INFO  15:38:59,526 - #47 0
INFO  15:38:59,527 - #38 ;
INFO  15:38:59,529 - #41 }
INFO  15:38:59,529 - #5 void
INFO  15:38:59,529 - #48 main
INFO  15:38:59,529 - #42 (
INFO  15:38:59,529 - #48 int
INFO  15:38:59,529 - #48 a
INFO  15:38:59,529 - #36 ,
INFO  15:38:59,529 - #48 int
INFO  15:38:59,529 - #48 b
INFO  15:38:59,529 - #44 [
INFO  15:38:59,529 - #45 ]
INFO  15:38:59,530 - #36 ,
INFO  15:38:59,530 - #48 char
INFO  15:38:59,530 - #48 c
INFO  15:38:59,530 - #36 ,
INFO  15:38:59,530 - #48 char
INFO  15:38:59,530 - #48 d
INFO  15:38:59,530 - #44 [
INFO  15:38:59,530 - #45 ]
INFO  15:38:59,530 - #36 ,
INFO  15:38:59,530 - #48 bool
INFO  15:38:59,530 - #48 e
INFO  15:38:59,530 - #36 ,
INFO  15:38:59,530 - #48 bool
INFO  15:38:59,530 - #48 f
INFO  15:38:59,530 - #44 [
INFO  15:38:59,530 - #45 ]
INFO  15:38:59,530 - #43 )
INFO  15:38:59,530 - #48 int
INFO  15:38:59,531 - #48 x
INFO  15:38:59,531 - #36 ,
INFO  15:38:59,531 - #48 y
INFO  15:38:59,531 - #36 ,
INFO  15:38:59,531 - #48 z
INFO  15:38:59,531 - #38 ;
INFO  15:38:59,531 - #48 char
INFO  15:38:59,531 - #48 xx
INFO  15:38:59,531 - #36 ,
INFO  15:38:59,531 - #48 yy
INFO  15:38:59,531 - #36 ,
INFO  15:38:59,531 - #48 zz
INFO  15:38:59,531 - #38 ;
INFO  15:38:59,531 - #40 {
INFO  15:38:59,531 - #48 x
INFO  15:38:59,531 - #24 =
INFO  15:38:59,533 - #47 123
INFO  15:38:59,534 - #38 ;
INFO  15:38:59,534 - #48 xx
INFO  15:38:59,535 - #24 =
INFO  15:38:59,535 - #49 c
INFO  15:38:59,535 - #38 ;
INFO  15:38:59,535 - #14 if
INFO  15:38:59,535 - #42 (
INFO  15:38:59,535 - #48 a
INFO  15:38:59,535 - #25 ==
INFO  15:38:59,536 - #48 x
INFO  15:38:59,537 - #43 )
INFO  15:38:59,539 - #40 {
INFO  15:38:59,539 - #14 if
INFO  15:38:59,539 - #42 (
INFO  15:38:59,539 - #48 c
INFO  15:38:59,539 - #25 ==
INFO  15:38:59,539 - #48 d
INFO  15:38:59,539 - #44 [
INFO  15:38:59,539 - #47 3
INFO  15:38:59,540 - #45 ]
INFO  15:38:59,540 - #31 &&
INFO  15:38:59,541 - #48 a
INFO  15:38:59,541 - #29 >=
INFO  15:38:59,541 - #48 b
INFO  15:38:59,541 - #44 [
INFO  15:38:59,541 - #48 y
INFO  15:38:59,542 - #45 ]
INFO  15:38:59,542 - #43 )
INFO  15:38:59,542 - #40 {
INFO  15:38:59,542 - #48 z
INFO  15:38:59,542 - #24 =
INFO  15:38:59,542 - #47 300
INFO  15:38:59,542 - #38 ;
INFO  15:38:59,542 - #41 }
INFO  15:38:59,542 - #15 else
INFO  15:38:59,542 - #48 z
INFO  15:38:59,542 - #24 =
INFO  15:38:59,542 - #47 400
INFO  15:38:59,542 - #38 ;
INFO  15:38:59,543 - #41 }
INFO  15:38:59,543 - #15 else
INFO  15:38:59,543 - #48 z
INFO  15:38:59,543 - #24 =
INFO  15:38:59,543 - #47 500
INFO  15:38:59,543 - #38 ;
INFO  15:38:59,543 - #48 b
INFO  15:38:59,543 - #24 =
INFO  15:38:59,543 - #48 e
INFO  15:38:59,543 - #39 ?
INFO  15:38:59,544 - #48 b
INFO  15:38:59,544 - #37 :
INFO  15:38:59,544 - #48 b
INFO  15:38:59,544 - #38 ;
INFO  15:38:59,544 - #12 do
INFO  15:38:59,544 - #40 {
INFO  15:38:59,545 - #48 a
INFO  15:38:59,546 - #24 =
INFO  15:38:59,546 - #47 2
INFO  15:38:59,546 - #38 ;
INFO  15:38:59,546 - #41 }
INFO  15:38:59,546 - #13 while
INFO  15:38:59,546 - #42 (
INFO  15:38:59,546 - #48 a
INFO  15:38:59,546 - #25 ==
INFO  15:38:59,546 - #48 func
INFO  15:38:59,546 - #42 (
INFO  15:38:59,546 - #48 b
INFO  15:38:59,546 - #36 ,
INFO  15:38:59,546 - #48 a
INFO  15:38:59,546 - #43 )
INFO  15:38:59,547 - #43 )
INFO  15:38:59,547 - #38 ;
INFO  15:38:59,547 - #48 func
INFO  15:38:59,547 - #42 (
INFO  15:38:59,547 - #48 b
INFO  15:38:59,547 - #36 ,
INFO  15:38:59,547 - #48 func
INFO  15:38:59,547 - #42 (
INFO  15:38:59,547 - #48 b
INFO  15:38:59,547 - #36 ,
INFO  15:38:59,547 - #48 b
INFO  15:38:59,547 - #44 [
INFO  15:38:59,547 - #47 0
INFO  15:38:59,547 - #45 ]
INFO  15:38:59,547 - #43 )
INFO  15:38:59,548 - #43 )
INFO  15:38:59,548 - #38 ;
INFO  15:38:59,548 - #48 d
INFO  15:38:59,548 - #44 [
INFO  15:38:59,548 - #47 0
INFO  15:38:59,548 - #45 ]
INFO  15:38:59,548 - #24 =
INFO  15:38:59,548 - #48 d
INFO  15:38:59,548 - #44 [
INFO  15:38:59,548 - #47 1
INFO  15:38:59,548 - #45 ]
INFO  15:38:59,548 - #38 ;
INFO  15:38:59,551 - #41 }
INFO  15:38:59,551 - #5 void
INFO  15:38:59,551 - #48 k
INFO  15:38:59,551 - #42 (
INFO  15:38:59,551 - #48 int
INFO  15:38:59,552 - #48 z
INFO  15:38:59,552 - #43 )
INFO  15:38:59,552 - #40 {
INFO  15:38:59,552 - #48 z
INFO  15:38:59,552 - #24 =
INFO  15:38:59,552 - #47 400
INFO  15:38:59,552 - #38 ;
INFO  15:38:59,552 - #46 return
INFO  15:38:59,552 - #38 ;
INFO  15:38:59,552 - #41 }
INFO  15:38:59,553 - #41 }
INFO  15:38:59,563 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  ProgramLBraceClass(
  ) [ProgramLBraceClass]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassVoid(
             m
            ) [ReturnValueClassVoid]
            NoFormParam(
            ) [NoFormParam]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            NoStmt(
            ) [NoStmt]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           func
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       0
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassVoid(
         main
        ) [ReturnValueClassVoid]
        FormParams(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  FormalParamDecls(
                    SingleFormalParamDecl(
                      FormalParamDeclClassNoArray(
                        Type(
                         int
                        ) [Type]
                       a
                      ) [FormalParamDeclClassNoArray]
                    ) [SingleFormalParamDecl]
                    FormalParamDeclClassArray(
                      Type(
                       int
                      ) [Type]
                     b
                    ) [FormalParamDeclClassArray]
                  ) [FormalParamDecls]
                  FormalParamDeclClassNoArray(
                    Type(
                     char
                    ) [Type]
                   c
                  ) [FormalParamDeclClassNoArray]
                ) [FormalParamDecls]
                FormalParamDeclClassArray(
                  Type(
                   char
                  ) [Type]
                 d
                ) [FormalParamDeclClassArray]
              ) [FormalParamDecls]
              FormalParamDeclClassNoArray(
                Type(
                 bool
                ) [Type]
               e
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
            FormalParamDeclClassArray(
              Type(
               bool
              ) [Type]
             f
            ) [FormalParamDeclClassArray]
          ) [FormalParamDecls]
        ) [FormParams]
        VarDeclListClass(
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   y
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 z
                ) [VarClassNoArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   xx
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 yy
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               zz
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementClass(
                          Designator(
                           x
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          DesignatorStatementOptionsClassAssignExpression(
                            AssignOpClass(
                              AssignOperationClass(
                              ) [AssignOperationClass]
                            ) [AssignOpClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     123
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [DesignatorStatementOptionsClassAssignExpression]
                        ) [DesignatorStatementClass]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementClass(
                        Designator(
                         xx
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        DesignatorStatementOptionsClassAssignExpression(
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  CharConst(
                                   c
                                  ) [CharConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [DesignatorStatementClass]
                    ) [Assignment]
                  ) [Statements]
                  IfStatement(
                    IfConditionNoError(
                      ConditionClass(
                        CondTermClass(
                          CondFactClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                     a
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                    NoFactorOptional(
                                    ) [NoFactorOptional]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                            CondFactOptionalClass(
                              RelationOperationClassEqualComparation(
                              ) [RelationOperationClassEqualComparation]
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                       x
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                      NoFactorOptional(
                                      ) [NoFactorOptional]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [CondFactOptionalClass]
                          ) [CondFactClass]
                          NoCondTermOptionalClass(
                          ) [NoCondTermOptionalClass]
                        ) [CondTermClass]
                        NoConditionOptionalClass(
                        ) [NoConditionOptionalClass]
                      ) [ConditionClass]
                    ) [IfConditionNoError]
                    StatementStatement(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        IfStatement(
                          IfConditionNoError(
                            ConditionClass(
                              CondTermClass(
                                CondFactClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                           c
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                          NoFactorOptional(
                                          ) [NoFactorOptional]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                  CondFactOptionalClass(
                                    RelationOperationClassEqualComparation(
                                    ) [RelationOperationClassEqualComparation]
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                             d
                                              OptionalDesignatorArray(
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                                LSquareClass(
                                                ) [LSquareClass]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         3
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [OptionalDesignatorArray]
                                            ) [Designator]
                                            NoFactorOptional(
                                            ) [NoFactorOptional]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [CondFactOptionalClass]
                                ) [CondFactClass]
                                CondTermOptionalClass(
                                  NoCondTermOptionalClass(
                                  ) [NoCondTermOptionalClass]
                                  CondFactClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                             a
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                            NoFactorOptional(
                                            ) [NoFactorOptional]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                    CondFactOptionalClass(
                                      GreaterOrEqualOperationClass(
                                      ) [GreaterOrEqualOperationClass]
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                               b
                                                OptionalDesignatorArray(
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                  LSquareClass(
                                                  ) [LSquareClass]
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          DesignatorClass(
                                                            Designator(
                                                             y
                                                              NoOptionalDesignatorClass(
                                                              ) [NoOptionalDesignatorClass]
                                                            ) [Designator]
                                                            NoFactorOptional(
                                                            ) [NoFactorOptional]
                                                          ) [DesignatorClass]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [OptionalDesignatorArray]
                                              ) [Designator]
                                              NoFactorOptional(
                                              ) [NoFactorOptional]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [CondFactOptionalClass]
                                  ) [CondFactClass]
                                ) [CondTermOptionalClass]
                              ) [CondTermClass]
                              NoConditionOptionalClass(
                              ) [NoConditionOptionalClass]
                            ) [ConditionClass]
                          ) [IfConditionNoError]
                          StatementStatement(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              Assignment(
                                DesignatorStatementClass(
                                  Designator(
                                   z
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  DesignatorStatementOptionsClassAssignExpression(
                                    AssignOpClass(
                                      AssignOperationClass(
                                      ) [AssignOperationClass]
                                    ) [AssignOpClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             300
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [DesignatorStatementOptionsClassAssignExpression]
                                ) [DesignatorStatementClass]
                              ) [Assignment]
                            ) [Statements]
                          ) [StatementStatement]
                          YesOptionalStatement(
                            Assignment(
                              DesignatorStatementClass(
                                Designator(
                                 z
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                DesignatorStatementOptionsClassAssignExpression(
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           400
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [DesignatorStatementClass]
                            ) [Assignment]
                          ) [YesOptionalStatement]
                        ) [IfStatement]
                      ) [Statements]
                    ) [StatementStatement]
                    YesOptionalStatement(
                      Assignment(
                        DesignatorStatementClass(
                          Designator(
                           z
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          DesignatorStatementOptionsClassAssignExpression(
                            AssignOpClass(
                              AssignOperationClass(
                              ) [AssignOperationClass]
                            ) [AssignOpClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     500
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [DesignatorStatementOptionsClassAssignExpression]
                        ) [DesignatorStatementClass]
                      ) [Assignment]
                    ) [YesOptionalStatement]
                  ) [IfStatement]
                ) [Statements]
                Assignment(
                  DesignatorStatementClass(
                    Designator(
                     b
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    DesignatorStatementOptionsClassAssignExpression(
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassTwoClass(
                        CondFactClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                   e
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  NoFactorOptional(
                                  ) [NoFactorOptional]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                          NoCondFactOptionalClass(
                          ) [NoCondFactOptionalClass]
                        ) [CondFactClass]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                 b
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                NoFactorOptional(
                                ) [NoFactorOptional]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                 b
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                NoFactorOptional(
                                ) [NoFactorOptional]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassTwoClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [DesignatorStatementClass]
                ) [Assignment]
              ) [Statements]
              DoWhileStatement(
                DoClass(
                ) [DoClass]
                StatementStatement(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementClass(
                        Designator(
                         a
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        DesignatorStatementOptionsClassAssignExpression(
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   2
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [DesignatorStatementClass]
                    ) [Assignment]
                  ) [Statements]
                ) [StatementStatement]
                ConditionClass(
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                               a
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              NoFactorOptional(
                              ) [NoFactorOptional]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      CondFactOptionalClass(
                        RelationOperationClassEqualComparation(
                        ) [RelationOperationClassEqualComparation]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                 func
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                FactorOptionalParams(
                                  Actuals(
                                    ActualParams(
                                      ActualParam(
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                   b
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                  NoFactorOptional(
                                                  ) [NoFactorOptional]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [ActualParam]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                 a
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                                NoFactorOptional(
                                                ) [NoFactorOptional]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ActualParams]
                                  ) [Actuals]
                                ) [FactorOptionalParams]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [CondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                ) [ConditionClass]
              ) [DoWhileStatement]
            ) [Statements]
            Assignment(
              DesignatorStatementClass(
                Designator(
                 func
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                DesignatorStatementActualParameters(
                  Actuals(
                    ActualParams(
                      ActualParam(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                   b
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  NoFactorOptional(
                                  ) [NoFactorOptional]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [ActualParam]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                 func
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                FactorOptionalParams(
                                  Actuals(
                                    ActualParams(
                                      ActualParam(
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                   b
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                  NoFactorOptional(
                                                  ) [NoFactorOptional]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [ActualParam]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                 b
                                                  OptionalDesignatorArray(
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                    LSquareClass(
                                                    ) [LSquareClass]
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            NumberConst(
                                                             0
                                                            ) [NumberConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                  ) [OptionalDesignatorArray]
                                                ) [Designator]
                                                NoFactorOptional(
                                                ) [NoFactorOptional]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ActualParams]
                                  ) [Actuals]
                                ) [FactorOptionalParams]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [ActualParams]
                  ) [Actuals]
                ) [DesignatorStatementActualParameters]
              ) [DesignatorStatementClass]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementClass(
              Designator(
               d
                OptionalDesignatorArray(
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                  LSquareClass(
                  ) [LSquareClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [OptionalDesignatorArray]
              ) [Designator]
              DesignatorStatementOptionsClassAssignExpression(
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                           d
                            OptionalDesignatorArray(
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       1
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                          NoFactorOptional(
                          ) [NoFactorOptional]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [DesignatorStatementClass]
          ) [Assignment]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       k
      ) [ReturnValueClassVoid]
      FormParams(
        SingleFormalParamDecl(
          FormalParamDeclClassNoArray(
            Type(
             int
            ) [Type]
           z
          ) [FormalParamDeclClassNoArray]
        ) [SingleFormalParamDecl]
      ) [FormParams]
      NoVarDeclList(
      ) [NoVarDeclList]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          Assignment(
            DesignatorStatementClass(
              Designator(
               z
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              DesignatorStatementOptionsClassAssignExpression(
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         400
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [DesignatorStatementClass]
          ) [Assignment]
        ) [Statements]
        ReturnNoExpr(
        ) [ReturnNoExpr]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  15:38:59,565 - ===================================
INFO  15:38:59,569 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  15:38:59,569 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  15:38:59,569 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  15:38:59,569 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  15:38:59,569 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  15:38:59,569 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  15:38:59,569 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  15:38:59,569 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  15:38:59,569 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  15:38:59,570 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  15:38:59,570 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  15:38:59,570 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  15:38:59,570 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  15:38:59,570 - CONST VALUE 2 IS BEING USED! ON LINE 6
INFO  15:38:59,570 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  15:38:59,570 - CONST VALUE 6 IS BEING USED! ON LINE 6
INFO  15:38:59,570 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  15:38:59,570 - CONST VALUE c IS BEING USED! ON LINE 7
INFO  15:38:59,570 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  15:38:59,570 - CONST VALUE d IS BEING USED! ON LINE 7
INFO  15:38:59,570 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  15:38:59,571 - CONST VALUE true IS BEING USED! ON LINE 8
INFO  15:38:59,571 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  15:38:59,571 - CONST VALUE false IS BEING USED! ON LINE 8
INFO  15:38:59,571 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  15:38:59,571 - FUNCTION m WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  15:38:59,571 - METHOD BODY STARTING!
INFO  15:38:59,571 - METHOD BODY ENDING!
INFO  15:38:59,571 - END OF DEFINING FUNCTION m
INFO  15:38:59,571 - FUNCTION func WITH RETURN VALUE OF TYPE int ON LINE 13
INFO  15:38:59,571 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 13
INFO  15:38:59,572 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 13
INFO  15:38:59,572 - METHOD BODY STARTING!
INFO  15:38:59,572 - CONST NUMBER 0 ON LINE 13
INFO  15:38:59,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  15:38:59,572 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  15:38:59,572 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 13
INFO  15:38:59,572 - METHOD BODY ENDING!
INFO  15:38:59,572 - END OF DEFINING FUNCTION func
INFO  15:38:59,572 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 15
INFO  15:38:59,572 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 15
INFO  15:38:59,572 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 15
INFO  15:38:59,572 - FORMAL PARAMETER c DEFINED AND IT IS OF TYPE char ON LINE 15
INFO  15:38:59,573 - FORMAL ARRAY PARAMETER d DEFINED AND IT IS OF TYPE char ON LINE 15
INFO  15:38:59,573 - FORMAL PARAMETER e DEFINED AND IT IS OF TYPE boolean ON LINE 15
INFO  15:38:59,573 - FORMAL ARRAY PARAMETER f DEFINED AND IT IS OF TYPE boolean ON LINE 15
INFO  15:38:59,573 - VARIABLE x IS BEING DEFINED! ON LINE 16
INFO  15:38:59,573 - VARIABLE y IS BEING DEFINED! ON LINE 16
INFO  15:38:59,573 - VARIABLE z IS BEING DEFINED! ON LINE 16
INFO  15:38:59,573 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 16
INFO  15:38:59,573 - VARIABLE xx IS BEING DEFINED! ON LINE 17
INFO  15:38:59,573 - VARIABLE yy IS BEING DEFINED! ON LINE 17
INFO  15:38:59,573 - VARIABLE zz IS BEING DEFINED! ON LINE 17
INFO  15:38:59,573 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 17
INFO  15:38:59,573 - METHOD BODY STARTING!
INFO  15:38:59,573 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  15:38:59,573 - BEGINNING OF AN ASSIGNEMENT! ON LINE 21
INFO  15:38:59,573 - CONST NUMBER 123 ON LINE 21
INFO  15:38:59,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  15:38:59,573 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  15:38:59,574 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 21
INFO  15:38:59,574 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE char
INFO  15:38:59,574 - BEGINNING OF AN ASSIGNEMENT! ON LINE 22
INFO  15:38:59,574 - CONST CHAR c ON LINE 22
INFO  15:38:59,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  15:38:59,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  15:38:59,574 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 22
INFO  15:38:59,574 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  15:38:59,574 - WE ARE USING A VARIABLE OF TYPE int ON LINE 24
INFO  15:38:59,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  15:38:59,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  15:38:59,574 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  15:38:59,574 - WE ARE USING A VARIABLE OF TYPE int ON LINE 24
INFO  15:38:59,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  15:38:59,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  15:38:59,574 - USING TWO EXPRESSIONS OF TYPE int ON LINE 24
INFO  15:38:59,574 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE char
INFO  15:38:59,575 - WE ARE USING A VARIABLE OF TYPE char ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - CONST NUMBER 3 ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  15:38:59,575 - WE ARE USING AN ARRAY OF TYPE char ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - USING TWO EXPRESSIONS OF TYPE char ON LINE 25
INFO  15:38:59,575 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  15:38:59,575 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - CURRENT VARIABLE IN USE IS y AND IT IS OF TYPE int
INFO  15:38:59,575 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,576 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,576 - WE ARE USING AN ARRAY OF TYPE int ON LINE 25
INFO  15:38:59,576 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,576 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  15:38:59,576 - USING TWO EXPRESSIONS OF TYPE int ON LINE 25
INFO  15:38:59,576 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  15:38:59,576 - BEGINNING OF AN ASSIGNEMENT! ON LINE 26
INFO  15:38:59,576 - CONST NUMBER 300 ON LINE 26
INFO  15:38:59,576 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  15:38:59,576 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  15:38:59,576 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 26
INFO  15:38:59,576 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  15:38:59,576 - BEGINNING OF AN ASSIGNEMENT! ON LINE 28
INFO  15:38:59,576 - CONST NUMBER 400 ON LINE 28
INFO  15:38:59,576 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  15:38:59,576 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  15:38:59,576 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 28
INFO  15:38:59,576 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  15:38:59,576 - BEGINNING OF AN ASSIGNEMENT! ON LINE 30
INFO  15:38:59,577 - CONST NUMBER 500 ON LINE 30
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  15:38:59,577 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 30
INFO  15:38:59,577 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,577 - BEGINNING OF AN ASSIGNEMENT! ON LINE 33
INFO  15:38:59,577 - CURRENT VARIABLE IN USE IS e AND IT IS OF TYPE boolean
INFO  15:38:59,577 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 33
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  15:38:59,577 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 33
INFO  15:38:59,577 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,577 - WE ARE USING A VARIABLE OF TYPE array ON LINE 33
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  15:38:59,577 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,577 - WE ARE USING A VARIABLE OF TYPE array ON LINE 33
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  15:38:59,577 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  15:38:59,577 - SUCCESSFUL TERNARY! TYPES: int AND int ! ON LINE 33
INFO  15:38:59,578 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 33
INFO  15:38:59,578 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  15:38:59,578 - BEGINNING OF AN ASSIGNEMENT! ON LINE 36
INFO  15:38:59,578 - CONST NUMBER 2 ON LINE 36
INFO  15:38:59,578 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  15:38:59,578 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  15:38:59,578 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 36
INFO  15:38:59,578 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  15:38:59,578 - WE ARE USING A VARIABLE OF TYPE int ON LINE 38
INFO  15:38:59,578 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,578 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,578 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  15:38:59,578 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,578 - WE ARE USING A VARIABLE OF TYPE array ON LINE 38
INFO  15:38:59,578 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,578 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,578 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  15:38:59,578 - WE ARE USING A VARIABLE OF TYPE int ON LINE 38
INFO  15:38:59,579 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,579 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,579 - TYPE -> array <- AND -> array <- ON LINE 38
INFO  15:38:59,579 - TYPE -> int <- AND -> int <- ON LINE 38
INFO  15:38:59,579 - WE ARE USING A VARIABLE OF TYPE int ON LINE 38
INFO  15:38:59,579 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,579 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  15:38:59,579 - USING TWO EXPRESSIONS OF TYPE int ON LINE 38
INFO  15:38:59,579 - ENDING OF A DO...WHILE LOOP! ON LINE 35
INFO  15:38:59,579 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  15:38:59,579 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,579 - WE ARE USING A VARIABLE OF TYPE array ON LINE 40
INFO  15:38:59,579 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,579 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,579 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  15:38:59,579 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,579 - WE ARE USING A VARIABLE OF TYPE array ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - CONST NUMBER 0 ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  15:38:59,580 - WE ARE USING AN ARRAY OF TYPE int ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - TYPE -> array <- AND -> array <- ON LINE 40
INFO  15:38:59,580 - TYPE -> int <- AND -> int <- ON LINE 40
INFO  15:38:59,580 - WE ARE USING AN ARRAY OF TYPE int ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  15:38:59,580 - TYPE -> array <- AND -> array <- ON LINE 40
INFO  15:38:59,580 - TYPE -> int <- AND -> int <- ON LINE 40
INFO  15:38:59,580 - GLOBAL METHOD func HAS BEEN CALLED!
INFO  15:38:59,580 - CONST NUMBER 0 ON LINE 42
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  15:38:59,580 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  15:38:59,580 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  15:38:59,581 - BEGINNING OF AN ASSIGNEMENT! ON LINE 42
INFO  15:38:59,581 - CONST NUMBER 1 ON LINE 42
INFO  15:38:59,581 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  15:38:59,581 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  15:38:59,581 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  15:38:59,581 - WE ARE USING AN ARRAY OF TYPE char ON LINE 42
INFO  15:38:59,581 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  15:38:59,581 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  15:38:59,581 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 42
INFO  15:38:59,581 - METHOD BODY ENDING!
INFO  15:38:59,581 - END OF DEFINING FUNCTION main
INFO  15:38:59,581 - FUNCTION k WITH VOID AS RETURN VALUE!  ON LINE 45
INFO  15:38:59,581 - FORMAL PARAMETER z DEFINED AND IT IS OF TYPE int ON LINE 45
INFO  15:38:59,581 - METHOD BODY STARTING!
INFO  15:38:59,581 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  15:38:59,581 - BEGINNING OF AN ASSIGNEMENT! ON LINE 47
INFO  15:38:59,581 - CONST NUMBER 400 ON LINE 47
INFO  15:38:59,581 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  15:38:59,581 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  15:38:59,581 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 47
INFO  15:38:59,581 - return; AND THE FUNCTION IS VOID!
INFO  15:38:59,581 - METHOD BODY ENDING!
INFO  15:38:59,581 - END OF DEFINING FUNCTION k
INFO  15:38:59,581 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  15:38:59,581 -  Deklarisanih promenljivih ima = 15
INFO  15:38:59,581 - ===================================
INFO  15:38:59,585 - Parsiranje uspesno zavrseno!
