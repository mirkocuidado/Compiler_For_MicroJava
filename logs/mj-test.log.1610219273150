INFO  20:02:41,138 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  20:02:41,215 - #2 program
INFO  20:02:41,215 - #48 MJProgram
INFO  20:02:41,215 - #48 int
INFO  20:02:41,216 - #48 a
INFO  20:02:41,217 - #36 ,
INFO  20:02:41,218 - #48 b
INFO  20:02:41,218 - #44 [
INFO  20:02:41,218 - #45 ]
INFO  20:02:41,218 - #36 ,
INFO  20:02:41,218 - #48 c
INFO  20:02:41,218 - #36 ,
INFO  20:02:41,218 - #48 d
INFO  20:02:41,219 - #38 ;
INFO  20:02:41,219 - #48 char
INFO  20:02:41,219 - #48 e
INFO  20:02:41,219 - #36 ,
INFO  20:02:41,219 - #48 f
INFO  20:02:41,219 - #44 [
INFO  20:02:41,219 - #45 ]
INFO  20:02:41,220 - #36 ,
INFO  20:02:41,220 - #48 g
INFO  20:02:41,220 - #38 ;
INFO  20:02:41,222 - #48 bool
INFO  20:02:41,222 - #48 h
INFO  20:02:41,222 - #36 ,
INFO  20:02:41,222 - #48 i
INFO  20:02:41,222 - #44 [
INFO  20:02:41,222 - #45 ]
INFO  20:02:41,222 - #38 ;
INFO  20:02:41,222 - #9 const
INFO  20:02:41,223 - #48 int
INFO  20:02:41,223 - #48 aa
INFO  20:02:41,223 - #24 =
INFO  20:02:41,223 - #47 2
INFO  20:02:41,223 - #36 ,
INFO  20:02:41,223 - #48 bb
INFO  20:02:41,223 - #24 =
INFO  20:02:41,223 - #47 6
INFO  20:02:41,224 - #38 ;
INFO  20:02:41,224 - #9 const
INFO  20:02:41,224 - #48 char
INFO  20:02:41,224 - #48 cc
INFO  20:02:41,224 - #24 =
INFO  20:02:41,224 - #49 c
INFO  20:02:41,224 - #36 ,
INFO  20:02:41,225 - #48 dd
INFO  20:02:41,225 - #24 =
INFO  20:02:41,225 - #49 d
INFO  20:02:41,225 - #38 ;
INFO  20:02:41,225 - #9 const
INFO  20:02:41,225 - #48 bool
INFO  20:02:41,225 - #48 ee
INFO  20:02:41,225 - #24 =
INFO  20:02:41,225 - #50 true
INFO  20:02:41,225 - #36 ,
INFO  20:02:41,225 - #48 ff
INFO  20:02:41,226 - #24 =
INFO  20:02:41,226 - #50 false
INFO  20:02:41,226 - #38 ;
INFO  20:02:41,226 - #40 {
INFO  20:02:41,226 - #5 void
INFO  20:02:41,227 - #48 m
INFO  20:02:41,227 - #42 (
INFO  20:02:41,227 - #43 )
INFO  20:02:41,228 - #40 {
INFO  20:02:41,228 - #41 }
INFO  20:02:41,230 - #48 int
INFO  20:02:41,232 - #48 func
INFO  20:02:41,232 - #42 (
INFO  20:02:41,232 - #48 int
INFO  20:02:41,232 - #48 a
INFO  20:02:41,232 - #44 [
INFO  20:02:41,232 - #45 ]
INFO  20:02:41,232 - #36 ,
INFO  20:02:41,233 - #48 int
INFO  20:02:41,233 - #48 b
INFO  20:02:41,233 - #43 )
INFO  20:02:41,233 - #40 {
INFO  20:02:41,233 - #46 return
INFO  20:02:41,233 - #47 0
INFO  20:02:41,235 - #38 ;
INFO  20:02:41,237 - #41 }
INFO  20:02:41,237 - #5 void
INFO  20:02:41,238 - #48 main
INFO  20:02:41,238 - #42 (
INFO  20:02:41,238 - #48 int
INFO  20:02:41,238 - #48 a
INFO  20:02:41,238 - #36 ,
INFO  20:02:41,238 - #48 int
INFO  20:02:41,238 - #48 b
INFO  20:02:41,239 - #44 [
INFO  20:02:41,239 - #45 ]
INFO  20:02:41,239 - #36 ,
INFO  20:02:41,239 - #48 char
INFO  20:02:41,239 - #48 c
INFO  20:02:41,239 - #36 ,
INFO  20:02:41,239 - #48 char
INFO  20:02:41,239 - #48 d
INFO  20:02:41,239 - #44 [
INFO  20:02:41,239 - #45 ]
INFO  20:02:41,240 - #36 ,
INFO  20:02:41,240 - #48 bool
INFO  20:02:41,241 - #48 e
INFO  20:02:41,241 - #36 ,
INFO  20:02:41,241 - #48 bool
INFO  20:02:41,241 - #48 f
INFO  20:02:41,241 - #44 [
INFO  20:02:41,241 - #45 ]
INFO  20:02:41,241 - #43 )
INFO  20:02:41,241 - #48 int
INFO  20:02:41,241 - #48 x
INFO  20:02:41,241 - #36 ,
INFO  20:02:41,241 - #48 y
INFO  20:02:41,241 - #36 ,
INFO  20:02:41,241 - #48 z
INFO  20:02:41,242 - #38 ;
INFO  20:02:41,242 - #48 char
INFO  20:02:41,242 - #48 xx
INFO  20:02:41,242 - #36 ,
INFO  20:02:41,242 - #48 yy
INFO  20:02:41,242 - #36 ,
INFO  20:02:41,242 - #48 zz
INFO  20:02:41,242 - #38 ;
INFO  20:02:41,242 - #40 {
INFO  20:02:41,242 - #48 x
INFO  20:02:41,242 - #24 =
INFO  20:02:41,244 - #47 123
INFO  20:02:41,246 - #38 ;
INFO  20:02:41,246 - #48 xx
INFO  20:02:41,246 - #24 =
INFO  20:02:41,247 - #49 c
INFO  20:02:41,247 - #38 ;
INFO  20:02:41,247 - #48 z
INFO  20:02:41,247 - #24 =
INFO  20:02:41,247 - #48 func
INFO  20:02:41,247 - #42 (
INFO  20:02:41,247 - #48 b
INFO  20:02:41,247 - #36 ,
INFO  20:02:41,248 - #48 a
INFO  20:02:41,248 - #43 )
INFO  20:02:41,248 - #38 ;
INFO  20:02:41,248 - #41 }
INFO  20:02:41,249 - #41 }
INFO  20:02:41,257 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassVoid(
           m
          ) [ReturnValueClassVoid]
          NoFormParam(
          ) [NoFormParam]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          NoStmt(
          ) [NoStmt]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         func
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    NumberConst(
                     0
                    ) [NumberConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      FormParams(
        FormalParamDecls(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  SingleFormalParamDecl(
                    FormalParamDeclClassNoArray(
                      Type(
                       int
                      ) [Type]
                     a
                    ) [FormalParamDeclClassNoArray]
                  ) [SingleFormalParamDecl]
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   b
                  ) [FormalParamDeclClassArray]
                ) [FormalParamDecls]
                FormalParamDeclClassNoArray(
                  Type(
                   char
                  ) [Type]
                 c
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               d
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             e
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
          FormalParamDeclClassArray(
            Type(
             bool
            ) [Type]
           f
          ) [FormalParamDeclClassArray]
        ) [FormalParamDecls]
      ) [FormParams]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   x
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 y
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               z
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           char
          ) [Type]
          VarListClass(
            VarListClass(
              VarListSingle(
                VarClassNoArray(
                 xx
                ) [VarClassNoArray]
              ) [VarListSingle]
              VarClassNoArray(
               yy
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             zz
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            Assignment(
              DesignatorStatementClass(
                Designator(
                 x
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                DesignatorStatementOptionsClassAssignExpression(
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           123
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [DesignatorStatementClass]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementClass(
              Designator(
               xx
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              DesignatorStatementOptionsClassAssignExpression(
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        CharConst(
                         c
                        ) [CharConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [DesignatorStatementClass]
          ) [Assignment]
        ) [Statements]
        Assignment(
          DesignatorStatementClass(
            Designator(
             z
              NoOptionalDesignatorClass(
              ) [NoOptionalDesignatorClass]
            ) [Designator]
            DesignatorStatementOptionsClassAssignExpression(
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                         func
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        FactorOptionalParams(
                          Actuals(
                            ActualParams(
                              ActualParam(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                           b
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                          NoFactorOptional(
                                          ) [NoFactorOptional]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [ActualParam]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                         a
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                        NoFactorOptional(
                                        ) [NoFactorOptional]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParams]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [DesignatorStatementClass]
        ) [Assignment]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  20:02:41,257 - ===================================
INFO  20:02:41,261 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  20:02:41,261 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  20:02:41,261 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  20:02:41,262 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  20:02:41,262 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  20:02:41,262 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  20:02:41,262 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  20:02:41,262 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  20:02:41,262 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  20:02:41,262 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  20:02:41,262 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  20:02:41,262 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  20:02:41,262 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  20:02:41,262 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  20:02:41,262 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  20:02:41,262 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  20:02:41,262 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  20:02:41,262 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  20:02:41,262 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  20:02:41,263 - FUNCTION m WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  20:02:41,263 - FUNCTION func WITH RETURN VALUE!  ON LINE 13
INFO  20:02:41,264 - RETURN ASSIGNEMENT! ON LINE 13
INFO  20:02:41,264 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 15
INFO  20:02:41,264 - VARIABLE x IS BEING DEFINED! ON LINE 16
INFO  20:02:41,264 - VARIABLE y IS BEING DEFINED! ON LINE 16
INFO  20:02:41,264 - VARIABLE z IS BEING DEFINED! ON LINE 16
INFO  20:02:41,264 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 16
INFO  20:02:41,264 - VARIABLE xx IS BEING DEFINED! ON LINE 17
INFO  20:02:41,264 - VARIABLE yy IS BEING DEFINED! ON LINE 17
INFO  20:02:41,264 - VARIABLE zz IS BEING DEFINED! ON LINE 17
INFO  20:02:41,264 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 17
INFO  20:02:41,264 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE 1
INFO  20:02:41,264 - SUCCESSFUL ASSIGNEMENT! ON LINE 21
INFO  20:02:41,264 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE 2
INFO  20:02:41,264 - SUCCESSFUL ASSIGNEMENT! ON LINE 22
INFO  20:02:41,264 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE 1
INFO  20:02:41,264 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE 1
INFO  20:02:41,265 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  20:02:41,265 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE 1
INFO  20:02:41,265 - SUCCESSFUL ASSIGNEMENT! ON LINE 24
INFO  20:02:41,265 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  20:02:41,265 -  Deklarisanih promenljivih ima = 15
INFO  20:02:41,265 - ===================================
INFO  20:02:41,265 - Parsiranje uspesno zavrseno!
