INFO  01:41:59,661 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  01:41:59,729 - #2 program
INFO  01:41:59,729 - #43 MJProgram
INFO  01:41:59,729 - #43 int
INFO  01:41:59,730 - #43 a
INFO  01:41:59,731 - #31 ,
INFO  01:41:59,731 - #43 b
INFO  01:41:59,731 - #31 ,
INFO  01:41:59,732 - #43 c
INFO  01:41:59,732 - #31 ,
INFO  01:41:59,732 - #43 d
INFO  01:41:59,732 - #33 ;
INFO  01:41:59,732 - #9 const
INFO  01:41:59,732 - #43 int
INFO  01:41:59,732 - #43 term
INFO  01:41:59,732 - #19 =
INFO  01:41:59,732 - #42 0
INFO  01:41:59,733 - #33 ;
INFO  01:41:59,733 - #9 const
INFO  01:41:59,733 - #43 int
INFO  01:41:59,733 - #43 y
INFO  01:41:59,733 - #19 =
INFO  01:41:59,733 - #42 3
INFO  01:41:59,734 - #33 ;
INFO  01:41:59,734 - #35 {
INFO  01:41:59,734 - #43 int
INFO  01:41:59,734 - #43 k
INFO  01:41:59,734 - #37 (
INFO  01:41:59,735 - #43 int
INFO  01:41:59,735 - #43 a
INFO  01:41:59,735 - #31 ,
INFO  01:41:59,735 - #43 int
INFO  01:41:59,735 - #43 b
INFO  01:41:59,735 - #38 )
INFO  01:41:59,735 - #35 {
INFO  01:41:59,736 - #41 return
INFO  01:41:59,737 - #43 b
INFO  01:41:59,738 - #33 ;
INFO  01:41:59,741 - #36 }
INFO  01:41:59,741 - #5 void
INFO  01:41:59,742 - #43 main
INFO  01:41:59,742 - #37 (
INFO  01:41:59,742 - #38 )
INFO  01:41:59,743 - #43 int
INFO  01:41:59,743 - #43 x
INFO  01:41:59,743 - #33 ;
INFO  01:41:59,743 - #43 bool
INFO  01:41:59,743 - #43 p
INFO  01:41:59,743 - #33 ;
INFO  01:41:59,743 - #43 bool
INFO  01:41:59,743 - #43 r
INFO  01:41:59,743 - #33 ;
INFO  01:41:59,744 - #43 bool
INFO  01:41:59,744 - #43 q
INFO  01:41:59,744 - #33 ;
INFO  01:41:59,744 - #35 {
INFO  01:41:59,744 - #43 p
INFO  01:41:59,744 - #19 =
INFO  01:41:59,744 - #45 false
INFO  01:41:59,745 - #33 ;
INFO  01:41:59,745 - #43 q
INFO  01:41:59,745 - #19 =
INFO  01:41:59,745 - #45 false
INFO  01:41:59,746 - #33 ;
INFO  01:41:59,746 - #43 r
INFO  01:41:59,746 - #19 =
INFO  01:41:59,746 - #45 false
INFO  01:41:59,746 - #33 ;
INFO  01:41:59,746 - #14 if
INFO  01:41:59,746 - #37 (
INFO  01:41:59,746 - #43 p
INFO  01:41:59,746 - #38 )
INFO  01:41:59,748 - #35 {
INFO  01:41:59,748 - #18 print
INFO  01:41:59,748 - #37 (
INFO  01:41:59,748 - #42 100
INFO  01:41:59,748 - #38 )
INFO  01:41:59,749 - #33 ;
INFO  01:41:59,749 - #14 if
INFO  01:41:59,749 - #37 (
INFO  01:41:59,749 - #43 q
INFO  01:41:59,749 - #38 )
INFO  01:41:59,749 - #35 {
INFO  01:41:59,749 - #18 print
INFO  01:41:59,749 - #37 (
INFO  01:41:59,749 - #42 101
INFO  01:41:59,749 - #38 )
INFO  01:41:59,749 - #33 ;
INFO  01:41:59,749 - #36 }
INFO  01:41:59,749 - #15 else
INFO  01:41:59,750 - #14 if
INFO  01:41:59,750 - #37 (
INFO  01:41:59,751 - #43 q
INFO  01:41:59,751 - #38 )
INFO  01:41:59,751 - #35 {
INFO  01:41:59,751 - #18 print
INFO  01:41:59,751 - #37 (
INFO  01:41:59,751 - #42 102
INFO  01:41:59,751 - #38 )
INFO  01:41:59,751 - #33 ;
INFO  01:41:59,751 - #36 }
INFO  01:41:59,751 - #15 else
INFO  01:41:59,751 - #35 {
INFO  01:41:59,751 - #18 print
INFO  01:41:59,751 - #37 (
INFO  01:41:59,751 - #42 103
INFO  01:41:59,751 - #38 )
INFO  01:41:59,751 - #33 ;
INFO  01:41:59,751 - #36 }
INFO  01:41:59,751 - #36 }
INFO  01:41:59,752 - #15 else
INFO  01:41:59,752 - #14 if
INFO  01:41:59,752 - #37 (
INFO  01:41:59,752 - #43 r
INFO  01:41:59,752 - #38 )
INFO  01:41:59,752 - #35 {
INFO  01:41:59,752 - #18 print
INFO  01:41:59,752 - #37 (
INFO  01:41:59,752 - #42 200
INFO  01:41:59,752 - #38 )
INFO  01:41:59,752 - #33 ;
INFO  01:41:59,752 - #14 if
INFO  01:41:59,752 - #37 (
INFO  01:41:59,752 - #43 q
INFO  01:41:59,752 - #38 )
INFO  01:41:59,752 - #35 {
INFO  01:41:59,753 - #18 print
INFO  01:41:59,753 - #37 (
INFO  01:41:59,753 - #42 201
INFO  01:41:59,753 - #38 )
INFO  01:41:59,753 - #33 ;
INFO  01:41:59,753 - #36 }
INFO  01:41:59,753 - #15 else
INFO  01:41:59,753 - #35 {
INFO  01:41:59,753 - #18 print
INFO  01:41:59,753 - #37 (
INFO  01:41:59,753 - #42 202
INFO  01:41:59,753 - #38 )
INFO  01:41:59,753 - #33 ;
INFO  01:41:59,753 - #36 }
INFO  01:41:59,753 - #36 }
INFO  01:41:59,753 - #15 else
INFO  01:41:59,753 - #35 {
INFO  01:41:59,753 - #18 print
INFO  01:41:59,753 - #37 (
INFO  01:41:59,754 - #42 300
INFO  01:41:59,754 - #38 )
INFO  01:41:59,754 - #33 ;
INFO  01:41:59,754 - #36 }
INFO  01:41:59,754 - #36 }
INFO  01:41:59,754 - #36 }
INFO  01:41:59,761 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              NoVarDeclList(
              ) [NoVarDeclList]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   x
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 p
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             bool
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               r
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           bool
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             q
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     p
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          BooleanClassConstFactor(
                           false
                          ) [BooleanClassConstFactor]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   q
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        BooleanClassConstFactor(
                         false
                        ) [BooleanClassConstFactor]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 r
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      BooleanClassConstFactor(
                       false
                      ) [BooleanClassConstFactor]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        IfStatement(
          IfConditionNoError(
            ConditionClass(
              CondTermClass(
                CondFactClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             p
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                  NoCondFactOptionalClass(
                  ) [NoCondFactOptionalClass]
                ) [CondFactClass]
                NoCondTermOptionalClass(
                ) [NoCondTermOptionalClass]
              ) [CondTermClass]
              NoConditionOptionalClass(
              ) [NoConditionOptionalClass]
            ) [ConditionClass]
          ) [IfConditionNoError]
          StatementStatement(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           100
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              IfStatement(
                IfConditionNoError(
                  ConditionClass(
                    CondTermClass(
                      CondFactClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   q
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                        NoCondFactOptionalClass(
                        ) [NoCondFactOptionalClass]
                      ) [CondFactClass]
                      NoCondTermOptionalClass(
                      ) [NoCondTermOptionalClass]
                    ) [CondTermClass]
                    NoConditionOptionalClass(
                    ) [NoConditionOptionalClass]
                  ) [ConditionClass]
                ) [IfConditionNoError]
                StatementStatement(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               101
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                ) [StatementStatement]
                Empty(
                ) [Empty]
                YesOptionalStatement(
                  IfStatement(
                    IfConditionNoError(
                      ConditionClass(
                        CondTermClass(
                          CondFactClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       q
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                            NoCondFactOptionalClass(
                            ) [NoCondFactOptionalClass]
                          ) [CondFactClass]
                          NoCondTermOptionalClass(
                          ) [NoCondTermOptionalClass]
                        ) [CondTermClass]
                        NoConditionOptionalClass(
                        ) [NoConditionOptionalClass]
                      ) [ConditionClass]
                    ) [IfConditionNoError]
                    StatementStatement(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   102
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                    ) [StatementStatement]
                    Empty(
                    ) [Empty]
                    YesOptionalStatement(
                      StatementStatement(
                        Statements(
                          NoStmt(
                          ) [NoStmt]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     103
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                      ) [StatementStatement]
                    ) [YesOptionalStatement]
                  ) [IfStatement]
                ) [YesOptionalStatement]
              ) [IfStatement]
            ) [Statements]
          ) [StatementStatement]
          Empty(
          ) [Empty]
          YesOptionalStatement(
            IfStatement(
              IfConditionNoError(
                ConditionClass(
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 r
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      NoCondFactOptionalClass(
                      ) [NoCondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                ) [ConditionClass]
              ) [IfConditionNoError]
              StatementStatement(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               200
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                  IfStatement(
                    IfConditionNoError(
                      ConditionClass(
                        CondTermClass(
                          CondFactClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       q
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                            NoCondFactOptionalClass(
                            ) [NoCondFactOptionalClass]
                          ) [CondFactClass]
                          NoCondTermOptionalClass(
                          ) [NoCondTermOptionalClass]
                        ) [CondTermClass]
                        NoConditionOptionalClass(
                        ) [NoConditionOptionalClass]
                      ) [ConditionClass]
                    ) [IfConditionNoError]
                    StatementStatement(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   201
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                    ) [StatementStatement]
                    Empty(
                    ) [Empty]
                    YesOptionalStatement(
                      StatementStatement(
                        Statements(
                          NoStmt(
                          ) [NoStmt]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     202
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                      ) [StatementStatement]
                    ) [YesOptionalStatement]
                  ) [IfStatement]
                ) [Statements]
              ) [StatementStatement]
              Empty(
              ) [Empty]
              YesOptionalStatement(
                StatementStatement(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               300
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                ) [StatementStatement]
              ) [YesOptionalStatement]
            ) [IfStatement]
          ) [YesOptionalStatement]
        ) [IfStatement]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  01:41:59,762 - ===================================
INFO  01:41:59,766 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  01:41:59,766 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  01:41:59,766 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  01:41:59,766 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  01:41:59,766 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  01:41:59,766 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  01:41:59,766 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  01:41:59,766 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  01:41:59,766 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  01:41:59,766 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  01:41:59,766 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  01:41:59,767 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  01:41:59,767 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  01:41:59,767 - METHOD BODY STARTING!
INFO  01:41:59,768 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  01:41:59,768 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  01:41:59,768 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  01:41:59,768 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  01:41:59,768 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  01:41:59,768 - METHOD BODY ENDING!
INFO  01:41:59,768 - END OF DEFINING FUNCTION k
INFO  01:41:59,768 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  01:41:59,768 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  01:41:59,768 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  01:41:59,768 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  01:41:59,768 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  01:41:59,769 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  01:41:59,769 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  01:41:59,769 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  01:41:59,769 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  01:41:59,769 - METHOD BODY STARTING!
INFO  01:41:59,769 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  01:41:59,769 - BEGINNING OF AN ASSIGNEMENT! ON LINE 64
INFO  01:41:59,769 - CONST CHAR false ON LINE 64
INFO  01:41:59,769 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  01:41:59,769 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  01:41:59,769 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 64
INFO  01:41:59,769 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  01:41:59,769 - BEGINNING OF AN ASSIGNEMENT! ON LINE 65
INFO  01:41:59,769 - CONST CHAR false ON LINE 65
INFO  01:41:59,769 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  01:41:59,769 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  01:41:59,769 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 65
INFO  01:41:59,770 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  01:41:59,770 - BEGINNING OF AN ASSIGNEMENT! ON LINE 66
INFO  01:41:59,770 - CONST CHAR false ON LINE 66
INFO  01:41:59,770 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  01:41:59,770 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  01:41:59,770 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 66
INFO  01:41:59,770 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  01:41:59,770 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 68
INFO  01:41:59,770 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  01:41:59,770 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  01:41:59,770 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 68
INFO  01:41:59,770 - CONST NUMBER 100 ON LINE 69
INFO  01:41:59,770 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  01:41:59,770 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  01:41:59,770 - PRINT FUNCTION CALL IN USE! ON LINE 69
INFO  01:41:59,770 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  01:41:59,770 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 70
INFO  01:41:59,770 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  01:41:59,771 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 70
INFO  01:41:59,771 - CONST NUMBER 101 ON LINE 71
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  01:41:59,771 - PRINT FUNCTION CALL IN USE! ON LINE 71
INFO  01:41:59,771 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  01:41:59,771 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 73
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  01:41:59,771 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 73
INFO  01:41:59,771 - CONST NUMBER 102 ON LINE 74
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  01:41:59,771 - PRINT FUNCTION CALL IN USE! ON LINE 74
INFO  01:41:59,771 - CONST NUMBER 103 ON LINE 77
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  01:41:59,771 - PRINT FUNCTION CALL IN USE! ON LINE 77
INFO  01:41:59,771 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  01:41:59,771 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 80
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  01:41:59,771 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  01:41:59,771 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 80
INFO  01:41:59,771 - CONST NUMBER 200 ON LINE 81
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 81
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 81
INFO  01:41:59,772 - PRINT FUNCTION CALL IN USE! ON LINE 81
INFO  01:41:59,772 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  01:41:59,772 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 82
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  01:41:59,772 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 82
INFO  01:41:59,772 - CONST NUMBER 201 ON LINE 83
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 83
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 83
INFO  01:41:59,772 - PRINT FUNCTION CALL IN USE! ON LINE 83
INFO  01:41:59,772 - CONST NUMBER 202 ON LINE 86
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 86
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 86
INFO  01:41:59,772 - PRINT FUNCTION CALL IN USE! ON LINE 86
INFO  01:41:59,772 - CONST NUMBER 300 ON LINE 89
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 89
INFO  01:41:59,772 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 89
INFO  01:41:59,773 - PRINT FUNCTION CALL IN USE! ON LINE 89
INFO  01:41:59,773 - METHOD BODY ENDING!
INFO  01:41:59,773 - END OF DEFINING FUNCTION main
INFO  01:41:59,773 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  01:41:59,773 -  Deklarisanih promenljivih ima = 8
INFO  01:41:59,773 - ===================================
INFO  01:41:59,780 - Parsiranje uspesno zavrseno!
