INFO  16:08:31,298 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  16:08:31,373 - #2 program
INFO  16:08:31,373 - #43 MJProgram
INFO  16:08:31,373 - #43 int
INFO  16:08:31,375 - #43 a
INFO  16:08:31,375 - #31 ,
INFO  16:08:31,376 - #43 b
INFO  16:08:31,376 - #31 ,
INFO  16:08:31,376 - #43 c
INFO  16:08:31,376 - #31 ,
INFO  16:08:31,376 - #43 d
INFO  16:08:31,376 - #33 ;
INFO  16:08:31,377 - #9 const
INFO  16:08:31,377 - #43 int
INFO  16:08:31,377 - #43 term
INFO  16:08:31,377 - #19 =
INFO  16:08:31,377 - #42 0
INFO  16:08:31,377 - #33 ;
INFO  16:08:31,378 - #9 const
INFO  16:08:31,378 - #43 int
INFO  16:08:31,378 - #43 y
INFO  16:08:31,378 - #19 =
INFO  16:08:31,388 - #42 3
INFO  16:08:31,388 - #33 ;
INFO  16:08:31,388 - #35 {
INFO  16:08:31,388 - #43 int
INFO  16:08:31,389 - #43 k
INFO  16:08:31,389 - #37 (
INFO  16:08:31,389 - #43 int
INFO  16:08:31,389 - #43 a
INFO  16:08:31,389 - #31 ,
INFO  16:08:31,390 - #43 int
INFO  16:08:31,390 - #43 b
INFO  16:08:31,390 - #38 )
INFO  16:08:31,390 - #35 {
INFO  16:08:31,391 - #41 return
INFO  16:08:31,393 - #43 b
INFO  16:08:31,394 - #33 ;
INFO  16:08:31,397 - #36 }
INFO  16:08:31,397 - #5 void
INFO  16:08:31,399 - #43 main
INFO  16:08:31,399 - #37 (
INFO  16:08:31,399 - #38 )
INFO  16:08:31,400 - #43 int
INFO  16:08:31,400 - #43 x
INFO  16:08:31,400 - #33 ;
INFO  16:08:31,400 - #43 bool
INFO  16:08:31,401 - #43 p
INFO  16:08:31,401 - #33 ;
INFO  16:08:31,401 - #43 bool
INFO  16:08:31,401 - #43 r
INFO  16:08:31,401 - #33 ;
INFO  16:08:31,401 - #43 bool
INFO  16:08:31,401 - #43 q
INFO  16:08:31,401 - #33 ;
INFO  16:08:31,401 - #43 int
INFO  16:08:31,401 - #43 br
INFO  16:08:31,401 - #39 [
INFO  16:08:31,402 - #40 ]
INFO  16:08:31,402 - #33 ;
INFO  16:08:31,402 - #43 int
INFO  16:08:31,402 - #43 dd
INFO  16:08:31,402 - #33 ;
INFO  16:08:31,402 - #43 int
INFO  16:08:31,402 - #43 ee
INFO  16:08:31,402 - #33 ;
INFO  16:08:31,402 - #43 int
INFO  16:08:31,402 - #43 ff
INFO  16:08:31,402 - #33 ;
INFO  16:08:31,402 - #43 int
INFO  16:08:31,402 - #43 gg
INFO  16:08:31,402 - #33 ;
INFO  16:08:31,403 - #43 char
INFO  16:08:31,403 - #43 hh
INFO  16:08:31,403 - #33 ;
INFO  16:08:31,403 - #43 int
INFO  16:08:31,403 - #43 ii
INFO  16:08:31,403 - #33 ;
INFO  16:08:31,403 - #35 {
INFO  16:08:31,403 - #43 x
INFO  16:08:31,403 - #19 =
INFO  16:08:31,403 - #42 0
INFO  16:08:31,405 - #33 ;
INFO  16:08:31,405 - #43 br
INFO  16:08:31,405 - #19 =
INFO  16:08:31,405 - #16 new
INFO  16:08:31,405 - #43 int
INFO  16:08:31,405 - #39 [
INFO  16:08:31,405 - #42 10
INFO  16:08:31,405 - #40 ]
INFO  16:08:31,406 - #33 ;
INFO  16:08:31,406 - #43 br
INFO  16:08:31,406 - #39 [
INFO  16:08:31,407 - #43 x
INFO  16:08:31,408 - #40 ]
INFO  16:08:31,408 - #19 =
INFO  16:08:31,408 - #42 1
INFO  16:08:31,409 - #33 ;
INFO  16:08:31,409 - #43 x
INFO  16:08:31,409 - #28 ++
INFO  16:08:31,409 - #33 ;
INFO  16:08:31,409 - #43 br
INFO  16:08:31,409 - #39 [
INFO  16:08:31,409 - #43 x
INFO  16:08:31,409 - #40 ]
INFO  16:08:31,409 - #19 =
INFO  16:08:31,409 - #42 2
INFO  16:08:31,409 - #33 ;
INFO  16:08:31,409 - #43 x
INFO  16:08:31,409 - #28 ++
INFO  16:08:31,410 - #33 ;
INFO  16:08:31,410 - #43 br
INFO  16:08:31,410 - #39 [
INFO  16:08:31,410 - #43 x
INFO  16:08:31,410 - #40 ]
INFO  16:08:31,410 - #19 =
INFO  16:08:31,410 - #42 3
INFO  16:08:31,410 - #33 ;
INFO  16:08:31,410 - #18 print
INFO  16:08:31,410 - #37 (
INFO  16:08:31,410 - #43 br
INFO  16:08:31,410 - #39 [
INFO  16:08:31,410 - #42 0
INFO  16:08:31,411 - #40 ]
INFO  16:08:31,411 - #38 )
INFO  16:08:31,412 - #33 ;
INFO  16:08:31,413 - #36 }
INFO  16:08:31,413 - #36 }
INFO  16:08:31,425 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          VarDeclListClass(
                            NoVarDeclList(
                            ) [NoVarDeclList]
                            VarDeclClass(
                              Type(
                               int
                              ) [Type]
                              VarListSingle(
                                VarClassNoArray(
                                 x
                                ) [VarClassNoArray]
                              ) [VarListSingle]
                            ) [VarDeclClass]
                          ) [VarDeclListClass]
                          VarDeclClass(
                            Type(
                             bool
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               p
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             r
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         bool
                        ) [Type]
                        VarListSingle(
                          VarClassNoArray(
                           q
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         br
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   0
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           br
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NewFactorClass(
                                  Type(
                                   int
                                  ) [Type]
                                  FactorOptionalSecondClass(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             10
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [FactorOptionalSecondClass]
                                ) [NewFactorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         br
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       x
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               1
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementPlusPlus(
                    Designator(
                      DesigIdent(
                       x
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorStatementPlusPlus]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     br
                    ) [DesigIdent]
                    OptionalDesignatorArray(
                      HelperClass(
                      ) [HelperClass]
                      LSquareClass(
                      ) [LSquareClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   x
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [OptionalDesignatorArray]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           2
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementPlusPlus(
                Designator(
                  DesigIdent(
                   x
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
              ) [DesignatorStatementPlusPlus]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 br
                ) [DesigIdent]
                OptionalDesignatorArray(
                  HelperClass(
                  ) [HelperClass]
                  LSquareClass(
                  ) [LSquareClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               x
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [OptionalDesignatorArray]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       3
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  16:08:31,426 - ===================================
INFO  16:08:31,430 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  16:08:31,430 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  16:08:31,430 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  16:08:31,430 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  16:08:31,430 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  16:08:31,430 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  16:08:31,430 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  16:08:31,430 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  16:08:31,430 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  16:08:31,430 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  16:08:31,431 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  16:08:31,431 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  16:08:31,431 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  16:08:31,431 - METHOD BODY STARTING!
INFO  16:08:31,431 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  16:08:31,431 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  16:08:31,431 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:08:31,431 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:08:31,431 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  16:08:31,431 - METHOD BODY ENDING!
INFO  16:08:31,431 - END OF DEFINING FUNCTION k
INFO  16:08:31,431 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  16:08:31,432 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  16:08:31,432 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  16:08:31,432 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  16:08:31,432 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  16:08:31,432 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  16:08:31,432 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  16:08:31,432 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  16:08:31,432 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  16:08:31,432 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 31
INFO  16:08:31,432 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 31
INFO  16:08:31,432 - VARIABLE dd IS BEING DEFINED! ON LINE 32
INFO  16:08:31,432 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  16:08:31,432 - VARIABLE ee IS BEING DEFINED! ON LINE 33
INFO  16:08:31,432 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  16:08:31,432 - VARIABLE ff IS BEING DEFINED! ON LINE 34
INFO  16:08:31,432 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  16:08:31,433 - VARIABLE gg IS BEING DEFINED! ON LINE 35
INFO  16:08:31,433 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  16:08:31,433 - VARIABLE hh IS BEING DEFINED! ON LINE 36
INFO  16:08:31,433 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 36
INFO  16:08:31,433 - VARIABLE ii IS BEING DEFINED! ON LINE 37
INFO  16:08:31,433 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 37
INFO  16:08:31,433 - METHOD BODY STARTING!
INFO  16:08:31,433 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:08:31,433 - BEGINNING OF AN ASSIGNEMENT! ON LINE 40
INFO  16:08:31,433 - CONST NUMBER 0 ON LINE 40
INFO  16:08:31,433 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  16:08:31,433 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  16:08:31,433 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 40
INFO  16:08:31,434 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:08:31,434 - BEGINNING OF AN ASSIGNEMENT! ON LINE 41
INFO  16:08:31,434 - CONST NUMBER 10 ON LINE 41
INFO  16:08:31,434 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:08:31,434 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:08:31,434 - USAGE OF KEYWORD NEW! ON LINE 41
INFO  16:08:31,434 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:08:31,434 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:08:31,434 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 41
INFO  16:08:31,434 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:08:31,434 - WE ARE USING A VARIABLE OF TYPE int ON LINE 42
INFO  16:08:31,434 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  16:08:31,434 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  16:08:31,434 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:08:31,435 - BEGINNING OF AN ASSIGNEMENT! ON LINE 42
INFO  16:08:31,435 - CONST NUMBER 1 ON LINE 42
INFO  16:08:31,435 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  16:08:31,435 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  16:08:31,435 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 42
INFO  16:08:31,435 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:08:31,435 - USING ++ ON x ON LINE 43
INFO  16:08:31,435 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:08:31,435 - WE ARE USING A VARIABLE OF TYPE int ON LINE 44
INFO  16:08:31,435 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  16:08:31,435 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  16:08:31,435 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:08:31,435 - BEGINNING OF AN ASSIGNEMENT! ON LINE 44
INFO  16:08:31,435 - CONST NUMBER 2 ON LINE 44
INFO  16:08:31,436 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  16:08:31,436 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  16:08:31,436 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 44
INFO  16:08:31,436 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:08:31,436 - USING ++ ON x ON LINE 45
INFO  16:08:31,436 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:08:31,436 - WE ARE USING A VARIABLE OF TYPE int ON LINE 46
INFO  16:08:31,436 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:08:31,436 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:08:31,436 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:08:31,436 - BEGINNING OF AN ASSIGNEMENT! ON LINE 46
INFO  16:08:31,436 - CONST NUMBER 3 ON LINE 46
INFO  16:08:31,436 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:08:31,436 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:08:31,436 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 46
INFO  16:08:31,436 - CONST NUMBER 0 ON LINE 47
INFO  16:08:31,436 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  16:08:31,437 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  16:08:31,437 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:08:31,437 - WE ARE USING AN ARRAY OF TYPE int ON LINE 47
INFO  16:08:31,437 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  16:08:31,437 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  16:08:31,437 - PRINT FUNCTION CALL IN USE! ON LINE 47
INFO  16:08:31,437 - METHOD BODY ENDING!
INFO  16:08:31,437 - END OF DEFINING FUNCTION main
INFO  16:08:31,437 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  16:08:31,437 -  Deklarisanih promenljivih ima = 15
INFO  16:08:31,437 - ===================================
INFO  16:08:31,442 - Parsiranje uspesno zavrseno!
