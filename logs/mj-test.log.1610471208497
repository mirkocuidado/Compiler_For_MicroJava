INFO  18:06:25,789 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:06:25,891 - #2 program
INFO  18:06:25,891 - #43 MJProgram
INFO  18:06:25,891 - #43 int
INFO  18:06:25,893 - #43 a
INFO  18:06:25,894 - #31 ,
INFO  18:06:25,894 - #43 b
INFO  18:06:25,894 - #31 ,
INFO  18:06:25,895 - #43 c
INFO  18:06:25,895 - #31 ,
INFO  18:06:25,895 - #43 d
INFO  18:06:25,895 - #33 ;
INFO  18:06:25,895 - #9 const
INFO  18:06:25,895 - #43 int
INFO  18:06:25,895 - #43 y
INFO  18:06:25,896 - #19 =
INFO  18:06:25,896 - #42 3
INFO  18:06:25,896 - #33 ;
INFO  18:06:25,896 - #35 {
INFO  18:06:25,896 - #43 int
INFO  18:06:25,897 - #43 k
INFO  18:06:25,897 - #37 (
INFO  18:06:25,898 - #43 int
INFO  18:06:25,898 - #43 a
INFO  18:06:25,898 - #31 ,
INFO  18:06:25,898 - #43 int
INFO  18:06:25,898 - #43 b
INFO  18:06:25,898 - #38 )
INFO  18:06:25,898 - #35 {
INFO  18:06:25,899 - #41 return
INFO  18:06:25,901 - #43 b
INFO  18:06:25,902 - #33 ;
INFO  18:06:25,905 - #36 }
INFO  18:06:25,905 - #5 void
INFO  18:06:25,908 - #43 main
INFO  18:06:25,909 - #37 (
INFO  18:06:25,909 - #38 )
INFO  18:06:25,911 - #43 int
INFO  18:06:25,911 - #43 x
INFO  18:06:25,911 - #33 ;
INFO  18:06:25,911 - #43 int
INFO  18:06:25,912 - #43 xx
INFO  18:06:25,912 - #39 [
INFO  18:06:25,912 - #40 ]
INFO  18:06:25,912 - #33 ;
INFO  18:06:25,912 - #35 {
INFO  18:06:25,912 - #43 x
INFO  18:06:25,912 - #19 =
INFO  18:06:25,912 - #42 2
INFO  18:06:25,914 - #49 +
INFO  18:06:25,914 - #42 3
INFO  18:06:25,915 - #46 *
INFO  18:06:25,915 - #37 (
INFO  18:06:25,915 - #42 4
INFO  18:06:25,915 - #49 +
INFO  18:06:25,915 - #42 5
INFO  18:06:25,915 - #38 )
INFO  18:06:25,915 - #49 +
INFO  18:06:25,916 - #43 k
INFO  18:06:25,916 - #37 (
INFO  18:06:25,916 - #42 0
INFO  18:06:25,916 - #31 ,
INFO  18:06:25,916 - #42 1
INFO  18:06:25,916 - #38 )
INFO  18:06:25,917 - #33 ;
INFO  18:06:25,917 - #18 print
INFO  18:06:25,917 - #37 (
INFO  18:06:25,918 - #43 x
INFO  18:06:25,918 - #38 )
INFO  18:06:25,919 - #33 ;
INFO  18:06:25,919 - #43 xx
INFO  18:06:25,919 - #19 =
INFO  18:06:25,919 - #16 new
INFO  18:06:25,920 - #43 int
INFO  18:06:25,920 - #39 [
INFO  18:06:25,920 - #42 5
INFO  18:06:25,920 - #40 ]
INFO  18:06:25,920 - #33 ;
INFO  18:06:25,921 - #43 xx
INFO  18:06:25,921 - #39 [
INFO  18:06:25,922 - #42 0
INFO  18:06:25,925 - #40 ]
INFO  18:06:25,925 - #19 =
INFO  18:06:25,925 - #42 3
INFO  18:06:25,925 - #33 ;
INFO  18:06:25,926 - #18 print
INFO  18:06:25,926 - #37 (
INFO  18:06:25,926 - #43 xx
INFO  18:06:25,926 - #39 [
INFO  18:06:25,926 - #42 0
INFO  18:06:25,926 - #40 ]
INFO  18:06:25,926 - #38 )
INFO  18:06:25,926 - #33 ;
INFO  18:06:25,927 - #36 }
INFO  18:06:25,927 - #36 }
INFO  18:06:25,936 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               x
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             xx
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       x
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             2
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          ExprOptionalListClass(
                            ExprOptionalListClass(
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                              PlusOperation(
                               +
                              ) [PlusOperation]
                              TermClass(
                                NumberConst(
                                 3
                                ) [NumberConst]
                                TermOptionalListClass(
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                  MultiplyOperationClass(
                                   *
                                  ) [MultiplyOperationClass]
                                  ParenFactorClass(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             4
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          ExprOptionalListClass(
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                            PlusOperation(
                                             +
                                            ) [PlusOperation]
                                            TermClass(
                                              NumberConst(
                                               5
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                          ) [ExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ParenFactorClass]
                                ) [TermOptionalListClass]
                              ) [TermClass]
                            ) [ExprOptionalListClass]
                            PlusOperation(
                             +
                            ) [PlusOperation]
                            TermClass(
                              FactorOptionalParams(
                                Designator(
                                  DesigIdent(
                                   k
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                Actuals(
                                  ActualParams(
                                    ActualParam(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ActualParam]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             1
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ActualParams]
                                ) [Actuals]
                              ) [FactorOptionalParams]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                          ) [ExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   xx
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NewFactorClass(
                          Type(
                           int
                          ) [Type]
                          FactorOptionalSecondClass(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     5
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [FactorOptionalSecondClass]
                        ) [NewFactorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 xx
                ) [DesigIdent]
                OptionalDesignatorArray(
                  HelperClass(
                  ) [HelperClass]
                  LSquareClass(
                  ) [LSquareClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [OptionalDesignatorArray]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       3
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       xx
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:06:25,937 - ===================================
INFO  18:06:25,941 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:06:25,942 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:06:25,942 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:06:25,942 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:06:25,943 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:06:25,943 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:06:25,943 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  18:06:25,943 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  18:06:25,943 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  18:06:25,944 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:06:25,944 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:06:25,944 - METHOD BODY STARTING!
INFO  18:06:25,944 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  18:06:25,944 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  18:06:25,944 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:06:25,944 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:06:25,944 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  18:06:25,944 - METHOD BODY ENDING!
INFO  18:06:25,944 - END OF DEFINING FUNCTION k
INFO  18:06:25,945 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:06:25,945 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  18:06:25,945 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  18:06:25,945 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  18:06:25,945 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 15
INFO  18:06:25,945 - METHOD BODY STARTING!
INFO  18:06:25,945 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:06:25,945 - BEGINNING OF AN ASSIGNEMENT! ON LINE 20
INFO  18:06:25,945 - CONST NUMBER 2 ON LINE 20
INFO  18:06:25,946 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,946 - CONST NUMBER 3 ON LINE 20
INFO  18:06:25,946 - CONST NUMBER 4 ON LINE 20
INFO  18:06:25,947 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,947 - CONST NUMBER 5 ON LINE 20
INFO  18:06:25,947 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  18:06:25,948 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:06:25,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  18:06:25,948 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:06:25,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  18:06:25,948 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  18:06:25,948 - CONST NUMBER 0 ON LINE 20
INFO  18:06:25,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,949 - CONST NUMBER 1 ON LINE 20
INFO  18:06:25,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,949 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:06:25,949 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:06:25,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:06:25,949 - USING INTEGERS IN TERM! ON LINE 6
INFO  18:06:25,949 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:06:25,950 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 20
INFO  18:06:25,950 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:06:25,950 - WE ARE USING A VARIABLE OF TYPE int ON LINE 21
INFO  18:06:25,950 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:06:25,950 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:06:25,950 - PRINT FUNCTION CALL IN USE! ON LINE 21
INFO  18:06:25,950 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:06:25,950 - BEGINNING OF AN ASSIGNEMENT! ON LINE 23
INFO  18:06:25,950 - CONST NUMBER 5 ON LINE 23
INFO  18:06:25,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:06:25,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:06:25,951 - USAGE OF KEYWORD NEW! ON LINE 23
INFO  18:06:25,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:06:25,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  18:06:25,951 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 23
INFO  18:06:25,951 - CONST NUMBER 0 ON LINE 24
INFO  18:06:25,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:06:25,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:06:25,951 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:06:25,952 - BEGINNING OF AN ASSIGNEMENT! ON LINE 24
INFO  18:06:25,952 - CONST NUMBER 3 ON LINE 24
INFO  18:06:25,952 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:06:25,952 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:06:25,952 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 24
INFO  18:06:25,952 - CONST NUMBER 0 ON LINE 25
INFO  18:06:25,952 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:06:25,952 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:06:25,952 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:06:25,952 - WE ARE USING AN ARRAY OF TYPE int ON LINE 25
INFO  18:06:25,952 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:06:25,952 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:06:25,952 - PRINT FUNCTION CALL IN USE! ON LINE 25
INFO  18:06:25,952 - METHOD BODY ENDING!
INFO  18:06:25,953 - END OF DEFINING FUNCTION main
INFO  18:06:25,953 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:06:25,953 -  Deklarisanih promenljivih ima = 6
INFO  18:06:25,953 - ===================================
INFO  18:06:25,964 - Parsiranje uspesno zavrseno!
