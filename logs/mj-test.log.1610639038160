INFO  16:39:06,610 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  16:39:06,683 - #2 program
INFO  16:39:06,683 - #43 test302
INFO  16:39:06,684 - #9 const
INFO  16:39:06,685 - #43 int
INFO  16:39:06,685 - #43 jedan
INFO  16:39:06,686 - #19 =
INFO  16:39:06,686 - #42 1
INFO  16:39:06,686 - #33 ;
INFO  16:39:06,687 - #43 int
INFO  16:39:06,687 - #43 i
INFO  16:39:06,687 - #33 ;
INFO  16:39:06,687 - #43 bool
INFO  16:39:06,687 - #43 ibool
INFO  16:39:06,688 - #33 ;
INFO  16:39:06,688 - #43 int
INFO  16:39:06,688 - #43 niz
INFO  16:39:06,688 - #39 [
INFO  16:39:06,688 - #40 ]
INFO  16:39:06,688 - #33 ;
INFO  16:39:06,688 - #35 {
INFO  16:39:06,688 - #43 int
INFO  16:39:06,699 - #43 sum
INFO  16:39:06,699 - #37 (
INFO  16:39:06,699 - #43 int
INFO  16:39:06,700 - #43 z
INFO  16:39:06,700 - #31 ,
INFO  16:39:06,700 - #43 int
INFO  16:39:06,700 - #43 d
INFO  16:39:06,700 - #38 )
INFO  16:39:06,701 - #35 {
INFO  16:39:06,702 - #41 return
INFO  16:39:06,704 - #43 z
INFO  16:39:06,705 - #49 +
INFO  16:39:06,708 - #43 d
INFO  16:39:06,708 - #33 ;
INFO  16:39:06,709 - #36 }
INFO  16:39:06,709 - #43 int
INFO  16:39:06,711 - #43 inkrement
INFO  16:39:06,712 - #37 (
INFO  16:39:06,712 - #43 int
INFO  16:39:06,712 - #43 a
INFO  16:39:06,712 - #31 ,
INFO  16:39:06,712 - #43 int
INFO  16:39:06,712 - #43 inc
INFO  16:39:06,712 - #38 )
INFO  16:39:06,712 - #43 int
INFO  16:39:06,712 - #43 pom
INFO  16:39:06,712 - #33 ;
INFO  16:39:06,712 - #35 {
INFO  16:39:06,713 - #14 if
INFO  16:39:06,713 - #37 (
INFO  16:39:06,713 - #43 inc
INFO  16:39:06,713 - #20 ==
INFO  16:39:06,713 - #43 jedan
INFO  16:39:06,714 - #38 )
INFO  16:39:06,716 - #43 pom
INFO  16:39:06,716 - #19 =
INFO  16:39:06,717 - #42 1
INFO  16:39:06,718 - #33 ;
INFO  16:39:06,718 - #15 else
INFO  16:39:06,719 - #14 if
INFO  16:39:06,719 - #37 (
INFO  16:39:06,720 - #43 inc
INFO  16:39:06,720 - #20 ==
INFO  16:39:06,720 - #42 2
INFO  16:39:06,720 - #38 )
INFO  16:39:06,720 - #43 pom
INFO  16:39:06,720 - #19 =
INFO  16:39:06,720 - #43 a
INFO  16:39:06,720 - #33 ;
INFO  16:39:06,720 - #41 return
INFO  16:39:06,721 - #43 sum
INFO  16:39:06,721 - #37 (
INFO  16:39:06,721 - #43 a
INFO  16:39:06,721 - #31 ,
INFO  16:39:06,722 - #43 pom
INFO  16:39:06,722 - #38 )
INFO  16:39:06,722 - #33 ;
INFO  16:39:06,722 - #36 }
INFO  16:39:06,722 - #43 bool
INFO  16:39:06,722 - #43 verify
INFO  16:39:06,722 - #37 (
INFO  16:39:06,722 - #38 )
INFO  16:39:06,723 - #35 {
INFO  16:39:06,724 - #18 print
INFO  16:39:06,724 - #37 (
INFO  16:39:06,724 - #44 v
INFO  16:39:06,724 - #38 )
INFO  16:39:06,725 - #33 ;
INFO  16:39:06,725 - #41 return
INFO  16:39:06,725 - #45 false
INFO  16:39:06,725 - #33 ;
INFO  16:39:06,725 - #36 }
INFO  16:39:06,725 - #5 void
INFO  16:39:06,725 - #43 main
INFO  16:39:06,726 - #37 (
INFO  16:39:06,726 - #38 )
INFO  16:39:06,726 - #35 {
INFO  16:39:06,726 - #14 if
INFO  16:39:06,726 - #37 (
INFO  16:39:06,726 - #42 1
INFO  16:39:06,726 - #21 !=
INFO  16:39:06,726 - #42 1
INFO  16:39:06,727 - #38 )
INFO  16:39:06,727 - #18 print
INFO  16:39:06,727 - #37 (
INFO  16:39:06,727 - #50 -
INFO  16:39:06,727 - #42 6
INFO  16:39:06,727 - #38 )
INFO  16:39:06,728 - #33 ;
INFO  16:39:06,728 - #15 else
INFO  16:39:06,728 - #18 print
INFO  16:39:06,728 - #37 (
INFO  16:39:06,728 - #42 0
INFO  16:39:06,728 - #38 )
INFO  16:39:06,728 - #33 ;
INFO  16:39:06,728 - #43 ibool
INFO  16:39:06,728 - #19 =
INFO  16:39:06,728 - #45 false
INFO  16:39:06,728 - #33 ;
INFO  16:39:06,728 - #43 i
INFO  16:39:06,728 - #19 =
INFO  16:39:06,728 - #42 0
INFO  16:39:06,728 - #33 ;
INFO  16:39:06,728 - #12 do
INFO  16:39:06,729 - #35 {
INFO  16:39:06,730 - #14 if
INFO  16:39:06,730 - #37 (
INFO  16:39:06,730 - #43 i
INFO  16:39:06,730 - #20 ==
INFO  16:39:06,730 - #42 2
INFO  16:39:06,730 - #38 )
INFO  16:39:06,730 - #43 ibool
INFO  16:39:06,730 - #19 =
INFO  16:39:06,730 - #45 true
INFO  16:39:06,730 - #33 ;
INFO  16:39:06,730 - #43 i
INFO  16:39:06,730 - #28 ++
INFO  16:39:06,731 - #33 ;
INFO  16:39:06,731 - #36 }
INFO  16:39:06,731 - #13 while
INFO  16:39:06,731 - #37 (
INFO  16:39:06,731 - #43 i
INFO  16:39:06,732 - #23 <
INFO  16:39:06,732 - #42 5
INFO  16:39:06,733 - #38 )
INFO  16:39:06,733 - #33 ;
INFO  16:39:06,734 - #14 if
INFO  16:39:06,734 - #37 (
INFO  16:39:06,734 - #43 ibool
INFO  16:39:06,735 - #38 )
INFO  16:39:06,735 - #14 if
INFO  16:39:06,735 - #37 (
INFO  16:39:06,735 - #43 i
INFO  16:39:06,735 - #20 ==
INFO  16:39:06,735 - #42 5
INFO  16:39:06,735 - #38 )
INFO  16:39:06,735 - #18 print
INFO  16:39:06,736 - #37 (
INFO  16:39:06,736 - #42 1
INFO  16:39:06,736 - #38 )
INFO  16:39:06,736 - #33 ;
INFO  16:39:06,736 - #15 else
INFO  16:39:06,736 - #18 print
INFO  16:39:06,737 - #37 (
INFO  16:39:06,737 - #50 -
INFO  16:39:06,737 - #42 1
INFO  16:39:06,737 - #38 )
INFO  16:39:06,737 - #33 ;
INFO  16:39:06,737 - #43 niz
INFO  16:39:06,737 - #19 =
INFO  16:39:06,737 - #16 new
INFO  16:39:06,737 - #43 int
INFO  16:39:06,737 - #39 [
INFO  16:39:06,737 - #42 3
INFO  16:39:06,737 - #40 ]
INFO  16:39:06,737 - #33 ;
INFO  16:39:06,738 - #43 niz
INFO  16:39:06,738 - #39 [
INFO  16:39:06,739 - #42 0
INFO  16:39:06,740 - #40 ]
INFO  16:39:06,740 - #19 =
INFO  16:39:06,741 - #42 1
INFO  16:39:06,741 - #33 ;
INFO  16:39:06,741 - #43 niz
INFO  16:39:06,741 - #39 [
INFO  16:39:06,741 - #42 1
INFO  16:39:06,741 - #40 ]
INFO  16:39:06,741 - #19 =
INFO  16:39:06,741 - #42 2
INFO  16:39:06,741 - #33 ;
INFO  16:39:06,741 - #43 niz
INFO  16:39:06,741 - #39 [
INFO  16:39:06,741 - #42 2
INFO  16:39:06,741 - #40 ]
INFO  16:39:06,742 - #19 =
INFO  16:39:06,742 - #43 sum
INFO  16:39:06,742 - #37 (
INFO  16:39:06,742 - #43 niz
INFO  16:39:06,742 - #39 [
INFO  16:39:06,742 - #42 1
INFO  16:39:06,742 - #40 ]
INFO  16:39:06,742 - #31 ,
INFO  16:39:06,742 - #43 niz
INFO  16:39:06,742 - #39 [
INFO  16:39:06,742 - #42 0
INFO  16:39:06,742 - #40 ]
INFO  16:39:06,742 - #38 )
INFO  16:39:06,742 - #49 +
INFO  16:39:06,742 - #42 1
INFO  16:39:06,742 - #33 ;
INFO  16:39:06,743 - #18 print
INFO  16:39:06,743 - #37 (
INFO  16:39:06,743 - #43 eol
INFO  16:39:06,743 - #38 )
INFO  16:39:06,743 - #33 ;
INFO  16:39:06,743 - #43 i
INFO  16:39:06,743 - #19 =
INFO  16:39:06,743 - #42 0
INFO  16:39:06,743 - #33 ;
INFO  16:39:06,743 - #12 do
INFO  16:39:06,743 - #35 {
INFO  16:39:06,743 - #14 if
INFO  16:39:06,743 - #37 (
INFO  16:39:06,743 - #43 i
INFO  16:39:06,743 - #20 ==
INFO  16:39:06,743 - #42 3
INFO  16:39:06,743 - #38 )
INFO  16:39:06,743 - #35 {
INFO  16:39:06,743 - #43 i
INFO  16:39:06,744 - #28 ++
INFO  16:39:06,744 - #33 ;
INFO  16:39:06,744 - #4 continue
INFO  16:39:06,744 - #33 ;
INFO  16:39:06,744 - #36 }
INFO  16:39:06,745 - #14 if
INFO  16:39:06,745 - #37 (
INFO  16:39:06,745 - #43 i
INFO  16:39:06,745 - #20 ==
INFO  16:39:06,745 - #42 4
INFO  16:39:06,745 - #38 )
INFO  16:39:06,745 - #3 break
INFO  16:39:06,745 - #33 ;
INFO  16:39:06,746 - #43 i
INFO  16:39:06,747 - #19 =
INFO  16:39:06,747 - #43 inkrement
INFO  16:39:06,747 - #37 (
INFO  16:39:06,747 - #43 i
INFO  16:39:06,747 - #31 ,
INFO  16:39:06,747 - #42 1
INFO  16:39:06,747 - #38 )
INFO  16:39:06,747 - #33 ;
INFO  16:39:06,747 - #36 }
INFO  16:39:06,747 - #13 while
INFO  16:39:06,747 - #37 (
INFO  16:39:06,747 - #43 i
INFO  16:39:06,747 - #23 <
INFO  16:39:06,748 - #42 10
INFO  16:39:06,748 - #38 )
INFO  16:39:06,748 - #33 ;
INFO  16:39:06,748 - #17 read
INFO  16:39:06,748 - #37 (
INFO  16:39:06,748 - #43 niz
INFO  16:39:06,748 - #39 [
INFO  16:39:06,748 - #42 0
INFO  16:39:06,748 - #40 ]
INFO  16:39:06,748 - #38 )
INFO  16:39:06,748 - #33 ;
INFO  16:39:06,748 - #17 read
INFO  16:39:06,748 - #37 (
INFO  16:39:06,748 - #43 niz
INFO  16:39:06,748 - #39 [
INFO  16:39:06,748 - #42 1
INFO  16:39:06,748 - #40 ]
INFO  16:39:06,748 - #38 )
INFO  16:39:06,748 - #33 ;
INFO  16:39:06,748 - #17 read
INFO  16:39:06,748 - #37 (
INFO  16:39:06,748 - #43 niz
INFO  16:39:06,748 - #39 [
INFO  16:39:06,749 - #42 2
INFO  16:39:06,749 - #40 ]
INFO  16:39:06,749 - #38 )
INFO  16:39:06,749 - #33 ;
INFO  16:39:06,749 - #18 print
INFO  16:39:06,749 - #37 (
INFO  16:39:06,749 - #43 eol
INFO  16:39:06,749 - #38 )
INFO  16:39:06,749 - #33 ;
INFO  16:39:06,749 - #18 print
INFO  16:39:06,749 - #37 (
INFO  16:39:06,749 - #43 sum
INFO  16:39:06,749 - #37 (
INFO  16:39:06,749 - #43 sum
INFO  16:39:06,749 - #37 (
INFO  16:39:06,749 - #43 niz
INFO  16:39:06,749 - #39 [
INFO  16:39:06,749 - #42 0
INFO  16:39:06,749 - #40 ]
INFO  16:39:06,749 - #31 ,
INFO  16:39:06,749 - #43 niz
INFO  16:39:06,750 - #39 [
INFO  16:39:06,750 - #42 1
INFO  16:39:06,750 - #40 ]
INFO  16:39:06,750 - #38 )
INFO  16:39:06,750 - #31 ,
INFO  16:39:06,750 - #43 niz
INFO  16:39:06,750 - #39 [
INFO  16:39:06,750 - #42 2
INFO  16:39:06,750 - #40 ]
INFO  16:39:06,750 - #38 )
INFO  16:39:06,750 - #38 )
INFO  16:39:06,750 - #33 ;
INFO  16:39:06,750 - #18 print
INFO  16:39:06,750 - #37 (
INFO  16:39:06,750 - #43 eol
INFO  16:39:06,750 - #38 )
INFO  16:39:06,750 - #33 ;
INFO  16:39:06,750 - #18 print
INFO  16:39:06,751 - #37 (
INFO  16:39:06,751 - #43 inkrement
INFO  16:39:06,751 - #37 (
INFO  16:39:06,751 - #43 niz
INFO  16:39:06,751 - #39 [
INFO  16:39:06,751 - #42 2
INFO  16:39:06,751 - #40 ]
INFO  16:39:06,751 - #31 ,
INFO  16:39:06,751 - #42 2
INFO  16:39:06,751 - #38 )
INFO  16:39:06,751 - #38 )
INFO  16:39:06,751 - #33 ;
INFO  16:39:06,751 - #18 print
INFO  16:39:06,751 - #37 (
INFO  16:39:06,751 - #43 verify
INFO  16:39:06,751 - #37 (
INFO  16:39:06,752 - #38 )
INFO  16:39:06,752 - #34 ?
INFO  16:39:06,753 - #44 t
INFO  16:39:06,754 - #32 :
INFO  16:39:06,754 - #44 f
INFO  16:39:06,755 - #38 )
INFO  16:39:06,756 - #33 ;
INFO  16:39:06,756 - #36 }
INFO  16:39:06,756 - #36 }
INFO  16:39:06,771 - Program(
  ProgramName(
   test302
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          NoGroupDecl(
          ) [NoGroupDecl]
          GroupDeclarationsConsts(
            ConstDeclClass(
              Type(
               int
              ) [Type]
              ConstListSingle(
                ConstListNoArray(
                 jedan
                  ValuesNumber(
                   1
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
            ) [ConstDeclClass]
          ) [GroupDeclarationsConsts]
        ) [GroupDeclarations]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               i
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           bool
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ibool
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationVars(
      VarDeclClass(
        Type(
         int
        ) [Type]
        VarListSingle(
          VarClassArray(
           niz
          ) [VarClassArray]
        ) [VarListSingle]
      ) [VarDeclClass]
    ) [GroupDeclarationVars]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassNoVoid(
              Type(
               int
              ) [Type]
             sum
            ) [ReturnValueClassNoVoid]
            FormParams(
              FormalParamDecls(
                SingleFormalParamDecl(
                  FormalParamDeclClassNoArray(
                    Type(
                     int
                    ) [Type]
                   z
                  ) [FormalParamDeclClassNoArray]
                ) [SingleFormalParamDecl]
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 d
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
            ) [FormParams]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            Statements(
              NoStmt(
              ) [NoStmt]
              ReturnExpr(
                ReturnNonTerminalClass(
                ) [ReturnNonTerminalClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             z
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      ExprOptionalListClass(
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                        PlusOperation(
                         +
                        ) [PlusOperation]
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               d
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                      ) [ExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [ReturnExpr]
            ) [Statements]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           inkrement
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassNoArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassNoArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               inc
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 pom
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              IfStatement(
                IfConditionNoError(
                  ConditionClass(
                    CondTermClass(
                      CondFactClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   inc
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                        CondFactOptionalClass(
                          RelationOperationClassEqualComparation(
                          ) [RelationOperationClassEqualComparation]
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     jedan
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [CondFactOptionalClass]
                      ) [CondFactClass]
                      NoCondTermOptionalClass(
                      ) [NoCondTermOptionalClass]
                    ) [CondTermClass]
                    NoConditionOptionalClass(
                    ) [NoConditionOptionalClass]
                  ) [ConditionClass]
                ) [IfConditionNoError]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       pom
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             1
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
                Empty(
                ) [Empty]
                YesOptionalStatement(
                  IfStatement(
                    IfConditionNoError(
                      ConditionClass(
                        CondTermClass(
                          CondFactClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       inc
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                            CondFactOptionalClass(
                              RelationOperationClassEqualComparation(
                              ) [RelationOperationClassEqualComparation]
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     2
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [CondFactOptionalClass]
                          ) [CondFactClass]
                          NoCondTermOptionalClass(
                          ) [NoCondTermOptionalClass]
                        ) [CondTermClass]
                        NoConditionOptionalClass(
                        ) [NoConditionOptionalClass]
                      ) [ConditionClass]
                    ) [IfConditionNoError]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           pom
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     a
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                    Empty(
                    ) [Empty]
                    NoOptionalStatement(
                    ) [NoOptionalStatement]
                  ) [IfStatement]
                ) [YesOptionalStatement]
              ) [IfStatement]
            ) [Statements]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      FactorOptionalParams(
                        Designator(
                          DesigIdent(
                           sum
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        Actuals(
                          ActualParams(
                            ActualParam(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           a
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParam]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         pom
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [ActualParams]
                        ) [Actuals]
                      ) [FactorOptionalParams]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           bool
          ) [Type]
         verify
        ) [ReturnValueClassNoVoid]
        NoFormParam(
        ) [NoFormParam]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      CharConst(
                       v
                      ) [CharConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    BooleanClassConstFactor(
                     false
                    ) [BooleanClassConstFactor]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      NoVarDeclList(
      ) [NoVarDeclList]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                Statements(
                                  Statements(
                                    Statements(
                                      Statements(
                                        Statements(
                                          Statements(
                                            Statements(
                                              NoStmt(
                                              ) [NoStmt]
                                              IfStatement(
                                                IfConditionNoError(
                                                  ConditionClass(
                                                    CondTermClass(
                                                      CondFactClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              NumberConst(
                                                               1
                                                              ) [NumberConst]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                        CondFactOptionalClass(
                                                          RelationOperationClassNotEqualComparation(
                                                          ) [RelationOperationClassNotEqualComparation]
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                NumberConst(
                                                                 1
                                                                ) [NumberConst]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                        ) [CondFactOptionalClass]
                                                      ) [CondFactClass]
                                                      NoCondTermOptionalClass(
                                                      ) [NoCondTermOptionalClass]
                                                    ) [CondTermClass]
                                                    NoConditionOptionalClass(
                                                    ) [NoConditionOptionalClass]
                                                  ) [ConditionClass]
                                                ) [IfConditionNoError]
                                                PrintStmt(
                                                  ClassOneClass(
                                                    ExprSecondOptionClassMinus(
                                                      ExprNegativeClass(
                                                       -
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            NumberConst(
                                                             6
                                                            ) [NumberConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [ExprNegativeClass]
                                                    ) [ExprSecondOptionClassMinus]
                                                  ) [ClassOneClass]
                                                  NoCommaNumberClass(
                                                  ) [NoCommaNumberClass]
                                                ) [PrintStmt]
                                                Empty(
                                                ) [Empty]
                                                YesOptionalStatement(
                                                  PrintStmt(
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            NumberConst(
                                                             0
                                                            ) [NumberConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                    NoCommaNumberClass(
                                                    ) [NoCommaNumberClass]
                                                  ) [PrintStmt]
                                                ) [YesOptionalStatement]
                                              ) [IfStatement]
                                            ) [Statements]
                                            Assignment(
                                              DesignatorStatementOptionsClassAssignExpression(
                                                Designator(
                                                  DesigIdent(
                                                   ibool
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                                AssignOpClass(
                                                  AssignOperationClass(
                                                  ) [AssignOperationClass]
                                                ) [AssignOpClass]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        BooleanClassConstFactor(
                                                         false
                                                        ) [BooleanClassConstFactor]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [DesignatorStatementOptionsClassAssignExpression]
                                            ) [Assignment]
                                          ) [Statements]
                                          Assignment(
                                            DesignatorStatementOptionsClassAssignExpression(
                                              Designator(
                                                DesigIdent(
                                                 i
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                              AssignOpClass(
                                                AssignOperationClass(
                                                ) [AssignOperationClass]
                                              ) [AssignOpClass]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      NumberConst(
                                                       0
                                                      ) [NumberConst]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [DesignatorStatementOptionsClassAssignExpression]
                                          ) [Assignment]
                                        ) [Statements]
                                        DoWhileStatement(
                                          DoClass(
                                          ) [DoClass]
                                          StatementStatement(
                                            Statements(
                                              Statements(
                                                NoStmt(
                                                ) [NoStmt]
                                                IfStatement(
                                                  IfConditionNoError(
                                                    ConditionClass(
                                                      CondTermClass(
                                                        CondFactClass(
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                DesignatorClass(
                                                                  Designator(
                                                                    DesigIdent(
                                                                     i
                                                                    ) [DesigIdent]
                                                                    NoOptionalDesignatorClass(
                                                                    ) [NoOptionalDesignatorClass]
                                                                  ) [Designator]
                                                                ) [DesignatorClass]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                          CondFactOptionalClass(
                                                            RelationOperationClassEqualComparation(
                                                            ) [RelationOperationClassEqualComparation]
                                                            NormalExpressionClass(
                                                              ExprFirstOptionClassWithMinus(
                                                                TermClass(
                                                                  NumberConst(
                                                                   2
                                                                  ) [NumberConst]
                                                                  NoTermOptionalListClass(
                                                                  ) [NoTermOptionalListClass]
                                                                ) [TermClass]
                                                                NoExprOptionalListClass(
                                                                ) [NoExprOptionalListClass]
                                                              ) [ExprFirstOptionClassWithMinus]
                                                            ) [NormalExpressionClass]
                                                          ) [CondFactOptionalClass]
                                                        ) [CondFactClass]
                                                        NoCondTermOptionalClass(
                                                        ) [NoCondTermOptionalClass]
                                                      ) [CondTermClass]
                                                      NoConditionOptionalClass(
                                                      ) [NoConditionOptionalClass]
                                                    ) [ConditionClass]
                                                  ) [IfConditionNoError]
                                                  Assignment(
                                                    DesignatorStatementOptionsClassAssignExpression(
                                                      Designator(
                                                        DesigIdent(
                                                         ibool
                                                        ) [DesigIdent]
                                                        NoOptionalDesignatorClass(
                                                        ) [NoOptionalDesignatorClass]
                                                      ) [Designator]
                                                      AssignOpClass(
                                                        AssignOperationClass(
                                                        ) [AssignOperationClass]
                                                      ) [AssignOpClass]
                                                      ClassOneClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              BooleanClassConstFactor(
                                                               true
                                                              ) [BooleanClassConstFactor]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [ClassOneClass]
                                                    ) [DesignatorStatementOptionsClassAssignExpression]
                                                  ) [Assignment]
                                                  Empty(
                                                  ) [Empty]
                                                  NoOptionalStatement(
                                                  ) [NoOptionalStatement]
                                                ) [IfStatement]
                                              ) [Statements]
                                              Assignment(
                                                DesignatorStatementPlusPlus(
                                                  Designator(
                                                    DesigIdent(
                                                     i
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorStatementPlusPlus]
                                              ) [Assignment]
                                            ) [Statements]
                                          ) [StatementStatement]
                                          LParenClass(
                                          ) [LParenClass]
                                          ConditionClass(
                                            CondTermClass(
                                              CondFactClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           i
                                                          ) [DesigIdent]
                                                          NoOptionalDesignatorClass(
                                                          ) [NoOptionalDesignatorClass]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                                CondFactOptionalClass(
                                                  LessOperationClass(
                                                  ) [LessOperationClass]
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         5
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [CondFactOptionalClass]
                                              ) [CondFactClass]
                                              NoCondTermOptionalClass(
                                              ) [NoCondTermOptionalClass]
                                            ) [CondTermClass]
                                            NoConditionOptionalClass(
                                            ) [NoConditionOptionalClass]
                                          ) [ConditionClass]
                                          RParenClass(
                                          ) [RParenClass]
                                        ) [DoWhileStatement]
                                      ) [Statements]
                                      IfStatement(
                                        IfConditionNoError(
                                          ConditionClass(
                                            CondTermClass(
                                              CondFactClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           ibool
                                                          ) [DesigIdent]
                                                          NoOptionalDesignatorClass(
                                                          ) [NoOptionalDesignatorClass]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                                NoCondFactOptionalClass(
                                                ) [NoCondFactOptionalClass]
                                              ) [CondFactClass]
                                              NoCondTermOptionalClass(
                                              ) [NoCondTermOptionalClass]
                                            ) [CondTermClass]
                                            NoConditionOptionalClass(
                                            ) [NoConditionOptionalClass]
                                          ) [ConditionClass]
                                        ) [IfConditionNoError]
                                        IfStatement(
                                          IfConditionNoError(
                                            ConditionClass(
                                              CondTermClass(
                                                CondFactClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        DesignatorClass(
                                                          Designator(
                                                            DesigIdent(
                                                             i
                                                            ) [DesigIdent]
                                                            NoOptionalDesignatorClass(
                                                            ) [NoOptionalDesignatorClass]
                                                          ) [Designator]
                                                        ) [DesignatorClass]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                  CondFactOptionalClass(
                                                    RelationOperationClassEqualComparation(
                                                    ) [RelationOperationClassEqualComparation]
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          NumberConst(
                                                           5
                                                          ) [NumberConst]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [CondFactOptionalClass]
                                                ) [CondFactClass]
                                                NoCondTermOptionalClass(
                                                ) [NoCondTermOptionalClass]
                                              ) [CondTermClass]
                                              NoConditionOptionalClass(
                                              ) [NoConditionOptionalClass]
                                            ) [ConditionClass]
                                          ) [IfConditionNoError]
                                          PrintStmt(
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     1
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                            NoCommaNumberClass(
                                            ) [NoCommaNumberClass]
                                          ) [PrintStmt]
                                          Empty(
                                          ) [Empty]
                                          YesOptionalStatement(
                                            PrintStmt(
                                              ClassOneClass(
                                                ExprSecondOptionClassMinus(
                                                  ExprNegativeClass(
                                                   -
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         1
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [ExprNegativeClass]
                                                ) [ExprSecondOptionClassMinus]
                                              ) [ClassOneClass]
                                              NoCommaNumberClass(
                                              ) [NoCommaNumberClass]
                                            ) [PrintStmt]
                                          ) [YesOptionalStatement]
                                        ) [IfStatement]
                                        Empty(
                                        ) [Empty]
                                        NoOptionalStatement(
                                        ) [NoOptionalStatement]
                                      ) [IfStatement]
                                    ) [Statements]
                                    Assignment(
                                      DesignatorStatementOptionsClassAssignExpression(
                                        Designator(
                                          DesigIdent(
                                           niz
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                        AssignOpClass(
                                          AssignOperationClass(
                                          ) [AssignOperationClass]
                                        ) [AssignOpClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NewFactorClass(
                                                  Type(
                                                   int
                                                  ) [Type]
                                                  FactorOptionalSecondClass(
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            NumberConst(
                                                             3
                                                            ) [NumberConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                  ) [FactorOptionalSecondClass]
                                                ) [NewFactorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [DesignatorStatementOptionsClassAssignExpression]
                                    ) [Assignment]
                                  ) [Statements]
                                  Assignment(
                                    DesignatorStatementOptionsClassAssignExpression(
                                      Designator(
                                        DesigIdent(
                                         niz
                                        ) [DesigIdent]
                                        OptionalDesignatorArray(
                                          HelperClass(
                                          ) [HelperClass]
                                          LSquareClass(
                                          ) [LSquareClass]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   0
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [OptionalDesignatorArray]
                                      ) [Designator]
                                      AssignOpClass(
                                        AssignOperationClass(
                                        ) [AssignOperationClass]
                                      ) [AssignOpClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               1
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [DesignatorStatementOptionsClassAssignExpression]
                                  ) [Assignment]
                                ) [Statements]
                                Assignment(
                                  DesignatorStatementOptionsClassAssignExpression(
                                    Designator(
                                      DesigIdent(
                                       niz
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 1
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                    AssignOpClass(
                                      AssignOperationClass(
                                      ) [AssignOperationClass]
                                    ) [AssignOpClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             2
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [DesignatorStatementOptionsClassAssignExpression]
                                ) [Assignment]
                              ) [Statements]
                              Assignment(
                                DesignatorStatementOptionsClassAssignExpression(
                                  Designator(
                                    DesigIdent(
                                     niz
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               2
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          FactorOptionalParams(
                                            Designator(
                                              DesigIdent(
                                               sum
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                            Actuals(
                                              ActualParams(
                                                ActualParam(
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          DesignatorClass(
                                                            Designator(
                                                              DesigIdent(
                                                               niz
                                                              ) [DesigIdent]
                                                              OptionalDesignatorArray(
                                                                HelperClass(
                                                                ) [HelperClass]
                                                                LSquareClass(
                                                                ) [LSquareClass]
                                                                ClassOneClass(
                                                                  NormalExpressionClass(
                                                                    ExprFirstOptionClassWithMinus(
                                                                      TermClass(
                                                                        NumberConst(
                                                                         1
                                                                        ) [NumberConst]
                                                                        NoTermOptionalListClass(
                                                                        ) [NoTermOptionalListClass]
                                                                      ) [TermClass]
                                                                      NoExprOptionalListClass(
                                                                      ) [NoExprOptionalListClass]
                                                                    ) [ExprFirstOptionClassWithMinus]
                                                                  ) [NormalExpressionClass]
                                                                ) [ClassOneClass]
                                                              ) [OptionalDesignatorArray]
                                                            ) [Designator]
                                                          ) [DesignatorClass]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [ActualParam]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        DesignatorClass(
                                                          Designator(
                                                            DesigIdent(
                                                             niz
                                                            ) [DesigIdent]
                                                            OptionalDesignatorArray(
                                                              HelperClass(
                                                              ) [HelperClass]
                                                              LSquareClass(
                                                              ) [LSquareClass]
                                                              ClassOneClass(
                                                                NormalExpressionClass(
                                                                  ExprFirstOptionClassWithMinus(
                                                                    TermClass(
                                                                      NumberConst(
                                                                       0
                                                                      ) [NumberConst]
                                                                      NoTermOptionalListClass(
                                                                      ) [NoTermOptionalListClass]
                                                                    ) [TermClass]
                                                                    NoExprOptionalListClass(
                                                                    ) [NoExprOptionalListClass]
                                                                  ) [ExprFirstOptionClassWithMinus]
                                                                ) [NormalExpressionClass]
                                                              ) [ClassOneClass]
                                                            ) [OptionalDesignatorArray]
                                                          ) [Designator]
                                                        ) [DesignatorClass]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [ActualParams]
                                            ) [Actuals]
                                          ) [FactorOptionalParams]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        ExprOptionalListClass(
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                          PlusOperation(
                                           +
                                          ) [PlusOperation]
                                          TermClass(
                                            NumberConst(
                                             1
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                        ) [ExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [Assignment]
                            ) [Statements]
                            PrintStmt(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           eol
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                              NoCommaNumberClass(
                              ) [NoCommaNumberClass]
                            ) [PrintStmt]
                          ) [Statements]
                          Assignment(
                            DesignatorStatementOptionsClassAssignExpression(
                              Designator(
                                DesigIdent(
                                 i
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              AssignOpClass(
                                AssignOperationClass(
                                ) [AssignOperationClass]
                              ) [AssignOpClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       0
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [DesignatorStatementOptionsClassAssignExpression]
                          ) [Assignment]
                        ) [Statements]
                        DoWhileStatement(
                          DoClass(
                          ) [DoClass]
                          StatementStatement(
                            Statements(
                              Statements(
                                Statements(
                                  NoStmt(
                                  ) [NoStmt]
                                  IfStatement(
                                    IfConditionNoError(
                                      ConditionClass(
                                        CondTermClass(
                                          CondFactClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  DesignatorClass(
                                                    Designator(
                                                      DesigIdent(
                                                       i
                                                      ) [DesigIdent]
                                                      NoOptionalDesignatorClass(
                                                      ) [NoOptionalDesignatorClass]
                                                    ) [Designator]
                                                  ) [DesignatorClass]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                            CondFactOptionalClass(
                                              RelationOperationClassEqualComparation(
                                              ) [RelationOperationClassEqualComparation]
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     3
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [CondFactOptionalClass]
                                          ) [CondFactClass]
                                          NoCondTermOptionalClass(
                                          ) [NoCondTermOptionalClass]
                                        ) [CondTermClass]
                                        NoConditionOptionalClass(
                                        ) [NoConditionOptionalClass]
                                      ) [ConditionClass]
                                    ) [IfConditionNoError]
                                    StatementStatement(
                                      Statements(
                                        Statements(
                                          NoStmt(
                                          ) [NoStmt]
                                          Assignment(
                                            DesignatorStatementPlusPlus(
                                              Designator(
                                                DesigIdent(
                                                 i
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorStatementPlusPlus]
                                          ) [Assignment]
                                        ) [Statements]
                                        ContinueClass(
                                          ContinueKeyWord(
                                          ) [ContinueKeyWord]
                                        ) [ContinueClass]
                                      ) [Statements]
                                    ) [StatementStatement]
                                    Empty(
                                    ) [Empty]
                                    NoOptionalStatement(
                                    ) [NoOptionalStatement]
                                  ) [IfStatement]
                                ) [Statements]
                                IfStatement(
                                  IfConditionNoError(
                                    ConditionClass(
                                      CondTermClass(
                                        CondFactClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     i
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                          CondFactOptionalClass(
                                            RelationOperationClassEqualComparation(
                                            ) [RelationOperationClassEqualComparation]
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   4
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [CondFactOptionalClass]
                                        ) [CondFactClass]
                                        NoCondTermOptionalClass(
                                        ) [NoCondTermOptionalClass]
                                      ) [CondTermClass]
                                      NoConditionOptionalClass(
                                      ) [NoConditionOptionalClass]
                                    ) [ConditionClass]
                                  ) [IfConditionNoError]
                                  BreakClass(
                                    BreakKeyWordClass(
                                    ) [BreakKeyWordClass]
                                  ) [BreakClass]
                                  Empty(
                                  ) [Empty]
                                  NoOptionalStatement(
                                  ) [NoOptionalStatement]
                                ) [IfStatement]
                              ) [Statements]
                              Assignment(
                                DesignatorStatementOptionsClassAssignExpression(
                                  Designator(
                                    DesigIdent(
                                     i
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          FactorOptionalParams(
                                            Designator(
                                              DesigIdent(
                                               inkrement
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                            Actuals(
                                              ActualParams(
                                                ActualParam(
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          DesignatorClass(
                                                            Designator(
                                                              DesigIdent(
                                                               i
                                                              ) [DesigIdent]
                                                              NoOptionalDesignatorClass(
                                                              ) [NoOptionalDesignatorClass]
                                                            ) [Designator]
                                                          ) [DesignatorClass]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [ActualParam]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         1
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [ActualParams]
                                            ) [Actuals]
                                          ) [FactorOptionalParams]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [Assignment]
                            ) [Statements]
                          ) [StatementStatement]
                          LParenClass(
                          ) [LParenClass]
                          ConditionClass(
                            CondTermClass(
                              CondFactClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           i
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                                CondFactOptionalClass(
                                  LessOperationClass(
                                  ) [LessOperationClass]
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         10
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [CondFactOptionalClass]
                              ) [CondFactClass]
                              NoCondTermOptionalClass(
                              ) [NoCondTermOptionalClass]
                            ) [CondTermClass]
                            NoConditionOptionalClass(
                            ) [NoConditionOptionalClass]
                          ) [ConditionClass]
                          RParenClass(
                          ) [RParenClass]
                        ) [DoWhileStatement]
                      ) [Statements]
                      ReadClass(
                        Designator(
                          DesigIdent(
                           niz
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [ReadClass]
                    ) [Statements]
                    ReadClass(
                      Designator(
                        DesigIdent(
                         niz
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   1
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                    ) [ReadClass]
                  ) [Statements]
                  ReadClass(
                    Designator(
                      DesigIdent(
                       niz
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 2
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [ReadClass]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               eol
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          Designator(
                            DesigIdent(
                             sum
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          Actuals(
                            ActualParams(
                              ActualParam(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        FactorOptionalParams(
                                          Designator(
                                            DesigIdent(
                                             sum
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                          Actuals(
                                            ActualParams(
                                              ActualParam(
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        DesignatorClass(
                                                          Designator(
                                                            DesigIdent(
                                                             niz
                                                            ) [DesigIdent]
                                                            OptionalDesignatorArray(
                                                              HelperClass(
                                                              ) [HelperClass]
                                                              LSquareClass(
                                                              ) [LSquareClass]
                                                              ClassOneClass(
                                                                NormalExpressionClass(
                                                                  ExprFirstOptionClassWithMinus(
                                                                    TermClass(
                                                                      NumberConst(
                                                                       0
                                                                      ) [NumberConst]
                                                                      NoTermOptionalListClass(
                                                                      ) [NoTermOptionalListClass]
                                                                    ) [TermClass]
                                                                    NoExprOptionalListClass(
                                                                    ) [NoExprOptionalListClass]
                                                                  ) [ExprFirstOptionClassWithMinus]
                                                                ) [NormalExpressionClass]
                                                              ) [ClassOneClass]
                                                            ) [OptionalDesignatorArray]
                                                          ) [Designator]
                                                        ) [DesignatorClass]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [ActualParam]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           niz
                                                          ) [DesigIdent]
                                                          OptionalDesignatorArray(
                                                            HelperClass(
                                                            ) [HelperClass]
                                                            LSquareClass(
                                                            ) [LSquareClass]
                                                            ClassOneClass(
                                                              NormalExpressionClass(
                                                                ExprFirstOptionClassWithMinus(
                                                                  TermClass(
                                                                    NumberConst(
                                                                     1
                                                                    ) [NumberConst]
                                                                    NoTermOptionalListClass(
                                                                    ) [NoTermOptionalListClass]
                                                                  ) [TermClass]
                                                                  NoExprOptionalListClass(
                                                                  ) [NoExprOptionalListClass]
                                                                ) [ExprFirstOptionClassWithMinus]
                                                              ) [NormalExpressionClass]
                                                            ) [ClassOneClass]
                                                          ) [OptionalDesignatorArray]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [ActualParams]
                                          ) [Actuals]
                                        ) [FactorOptionalParams]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [ActualParam]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           niz
                                          ) [DesigIdent]
                                          OptionalDesignatorArray(
                                            HelperClass(
                                            ) [HelperClass]
                                            LSquareClass(
                                            ) [LSquareClass]
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     2
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [OptionalDesignatorArray]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParams]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           eol
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    FactorOptionalParams(
                      Designator(
                        DesigIdent(
                         inkrement
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      Actuals(
                        ActualParams(
                          ActualParam(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         niz
                                        ) [DesigIdent]
                                        OptionalDesignatorArray(
                                          HelperClass(
                                          ) [HelperClass]
                                          LSquareClass(
                                          ) [LSquareClass]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   2
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [OptionalDesignatorArray]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [ActualParam]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   2
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [ActualParams]
                      ) [Actuals]
                    ) [FactorOptionalParams]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassTwoClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  FactorOptionalParams(
                    Designator(
                      DesigIdent(
                       verify
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    NoActuals(
                    ) [NoActuals]
                  ) [FactorOptionalParams]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
            TernaryClass(
            ) [TernaryClass]
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  CharConst(
                   t
                  ) [CharConst]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
            ColonClass(
            ) [ColonClass]
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  CharConst(
                   f
                  ) [CharConst]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassTwoClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  16:39:06,775 - ===================================
INFO  16:39:06,778 - PROGRAM NAME DETECTED => test302 ON LINE 3
INFO  16:39:06,778 - CONST VALUE 1 IS BEING USED! ON LINE 5
INFO  16:39:06,778 - CONST VARIABLE jedan IS BEING DEFINED! ON LINE 5
INFO  16:39:06,779 - VARIABLE i IS BEING DEFINED! ON LINE 7
INFO  16:39:06,779 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 7
INFO  16:39:06,779 - VARIABLE ibool IS BEING DEFINED! ON LINE 8
INFO  16:39:06,779 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 8
INFO  16:39:06,779 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 10
INFO  16:39:06,779 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 10
INFO  16:39:06,779 - FUNCTION sum WITH RETURN VALUE OF TYPE int ON LINE 14
INFO  16:39:06,779 - FORMAL PARAMETER z DEFINED AND IT IS OF TYPE int ON LINE 14
INFO  16:39:06,779 - FORMAL PARAMETER d DEFINED AND IT IS OF TYPE int ON LINE 14
INFO  16:39:06,779 - METHOD BODY STARTING!
INFO  16:39:06,779 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  16:39:06,779 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  16:39:06,779 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  16:39:06,779 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE int
INFO  16:39:06,779 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  16:39:06,779 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  16:39:06,779 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:39:06,779 - USING INTEGERS IN TERM! ON LINE 16
INFO  16:39:06,779 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 16
INFO  16:39:06,780 - METHOD BODY ENDING!
INFO  16:39:06,780 - END OF DEFINING FUNCTION sum
INFO  16:39:06,780 - FUNCTION inkrement WITH RETURN VALUE OF TYPE int ON LINE 19
INFO  16:39:06,780 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 19
INFO  16:39:06,780 - FORMAL PARAMETER inc DEFINED AND IT IS OF TYPE int ON LINE 19
INFO  16:39:06,780 - VARIABLE pom IS BEING DEFINED! ON LINE 20
INFO  16:39:06,780 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 20
INFO  16:39:06,780 - METHOD BODY STARTING!
INFO  16:39:06,780 - CURRENT VARIABLE IN USE IS inc AND IT IS OF TYPE int
INFO  16:39:06,780 - WE ARE USING A VARIABLE OF TYPE int ON LINE 22
INFO  16:39:06,780 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  16:39:06,780 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  16:39:06,780 - CURRENT VARIABLE IN USE IS jedan AND IT IS OF TYPE int
INFO  16:39:06,780 - WE ARE USING A VARIABLE OF TYPE int ON LINE 22
INFO  16:39:06,780 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  16:39:06,780 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  16:39:06,781 - USING TWO EXPRESSIONS OF TYPE int ON LINE 22
INFO  16:39:06,781 - CURRENT VARIABLE IN USE IS pom AND IT IS OF TYPE int
INFO  16:39:06,781 - BEGINNING OF AN ASSIGNEMENT! ON LINE 22
INFO  16:39:06,781 - CONST NUMBER 1 ON LINE 22
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  16:39:06,781 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 22
INFO  16:39:06,781 - CURRENT VARIABLE IN USE IS inc AND IT IS OF TYPE int
INFO  16:39:06,781 - WE ARE USING A VARIABLE OF TYPE int ON LINE 23
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  16:39:06,781 - CONST NUMBER 2 ON LINE 23
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  16:39:06,781 - USING TWO EXPRESSIONS OF TYPE int ON LINE 23
INFO  16:39:06,781 - CURRENT VARIABLE IN USE IS pom AND IT IS OF TYPE int
INFO  16:39:06,781 - BEGINNING OF AN ASSIGNEMENT! ON LINE 23
INFO  16:39:06,781 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  16:39:06,781 - WE ARE USING A VARIABLE OF TYPE int ON LINE 23
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  16:39:06,781 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 23
INFO  16:39:06,781 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 23
INFO  16:39:06,782 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  16:39:06,782 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  16:39:06,782 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  16:39:06,782 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  16:39:06,782 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  16:39:06,782 - CURRENT VARIABLE IN USE IS pom AND IT IS OF TYPE int
INFO  16:39:06,782 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  16:39:06,782 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  16:39:06,782 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  16:39:06,782 - TYPE -> int <- AND -> int <- ON LINE 25
INFO  16:39:06,782 - TYPE -> int <- AND -> int <- ON LINE 25
INFO  16:39:06,782 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  16:39:06,782 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  16:39:06,782 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 25
INFO  16:39:06,782 - METHOD BODY ENDING!
INFO  16:39:06,782 - END OF DEFINING FUNCTION inkrement
INFO  16:39:06,782 - FUNCTION verify WITH RETURN VALUE OF TYPE boolean ON LINE 28
INFO  16:39:06,782 - METHOD BODY STARTING!
INFO  16:39:06,782 - CONST CHAR v ON LINE 29
INFO  16:39:06,782 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  16:39:06,783 - PRINT FUNCTION CALL IN USE! ON LINE 29
INFO  16:39:06,783 - CONST CHAR false ON LINE 30
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  16:39:06,783 - SUCCESSFUL RETURN! TYPES: boolean AND boolean ! ON LINE 30
INFO  16:39:06,783 - METHOD BODY ENDING!
INFO  16:39:06,783 - END OF DEFINING FUNCTION verify
INFO  16:39:06,783 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 33
INFO  16:39:06,783 - METHOD BODY STARTING!
INFO  16:39:06,783 - CONST NUMBER 1 ON LINE 35
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 35
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 35
INFO  16:39:06,783 - CONST NUMBER 1 ON LINE 35
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 35
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 35
INFO  16:39:06,783 - USING TWO EXPRESSIONS OF TYPE int ON LINE 35
INFO  16:39:06,783 - CONST NUMBER 6 ON LINE 35
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 35
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 35
INFO  16:39:06,783 - PRINT FUNCTION CALL IN USE! ON LINE 35
INFO  16:39:06,783 - CONST NUMBER 0 ON LINE 36
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  16:39:06,783 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  16:39:06,783 - PRINT FUNCTION CALL IN USE! ON LINE 36
INFO  16:39:06,783 - CURRENT VARIABLE IN USE IS ibool AND IT IS OF TYPE boolean
INFO  16:39:06,784 - BEGINNING OF AN ASSIGNEMENT! ON LINE 38
INFO  16:39:06,784 - CONST CHAR false ON LINE 38
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  16:39:06,784 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 38
INFO  16:39:06,784 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,784 - BEGINNING OF AN ASSIGNEMENT! ON LINE 39
INFO  16:39:06,784 - CONST NUMBER 0 ON LINE 39
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  16:39:06,784 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 39
INFO  16:39:06,784 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:39:06,784 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,784 - WE ARE USING A VARIABLE OF TYPE int ON LINE 41
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:39:06,784 - CONST NUMBER 2 ON LINE 41
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:39:06,784 - USING TWO EXPRESSIONS OF TYPE int ON LINE 41
INFO  16:39:06,784 - CURRENT VARIABLE IN USE IS ibool AND IT IS OF TYPE boolean
INFO  16:39:06,784 - BEGINNING OF AN ASSIGNEMENT! ON LINE 41
INFO  16:39:06,784 - CONST CHAR true ON LINE 41
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:39:06,784 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  16:39:06,784 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 41
INFO  16:39:06,784 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,784 - USING ++ ON i ON LINE 42
INFO  16:39:06,785 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,785 - WE ARE USING A VARIABLE OF TYPE int ON LINE 43
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  16:39:06,785 - CONST NUMBER 5 ON LINE 43
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  16:39:06,785 - USING TWO EXPRESSIONS OF TYPE int ON LINE 43
INFO  16:39:06,785 - ENDING OF A DO...WHILE LOOP! ON LINE 40
INFO  16:39:06,785 - CURRENT VARIABLE IN USE IS ibool AND IT IS OF TYPE boolean
INFO  16:39:06,785 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 45
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  16:39:06,785 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 45
INFO  16:39:06,785 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,785 - WE ARE USING A VARIABLE OF TYPE int ON LINE 46
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:39:06,785 - CONST NUMBER 5 ON LINE 46
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:39:06,785 - USING TWO EXPRESSIONS OF TYPE int ON LINE 46
INFO  16:39:06,785 - CONST NUMBER 1 ON LINE 46
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:39:06,785 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  16:39:06,785 - PRINT FUNCTION CALL IN USE! ON LINE 46
INFO  16:39:06,786 - CONST NUMBER 1 ON LINE 47
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  16:39:06,786 - PRINT FUNCTION CALL IN USE! ON LINE 47
INFO  16:39:06,786 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,786 - BEGINNING OF AN ASSIGNEMENT! ON LINE 49
INFO  16:39:06,786 - CONST NUMBER 3 ON LINE 49
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:39:06,786 - USAGE OF KEYWORD NEW! ON LINE 49
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 49
INFO  16:39:06,786 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 49
INFO  16:39:06,786 - CONST NUMBER 0 ON LINE 50
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:39:06,786 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,786 - BEGINNING OF AN ASSIGNEMENT! ON LINE 50
INFO  16:39:06,786 - CONST NUMBER 1 ON LINE 50
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:39:06,786 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 50
INFO  16:39:06,786 - CONST NUMBER 1 ON LINE 51
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  16:39:06,786 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,786 - BEGINNING OF AN ASSIGNEMENT! ON LINE 51
INFO  16:39:06,786 - CONST NUMBER 2 ON LINE 51
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  16:39:06,786 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  16:39:06,787 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 51
INFO  16:39:06,787 - CONST NUMBER 2 ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,787 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  16:39:06,787 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  16:39:06,787 - CONST NUMBER 1 ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,787 - WE ARE USING AN ARRAY OF TYPE int ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - CONST NUMBER 0 ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,787 - WE ARE USING AN ARRAY OF TYPE int ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - TYPE -> int <- AND -> int <- ON LINE 52
INFO  16:39:06,787 - TYPE -> int <- AND -> int <- ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - CONST NUMBER 1 ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  16:39:06,787 - USING INTEGERS IN TERM! ON LINE 52
INFO  16:39:06,787 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  16:39:06,787 - CURRENT VARIABLE IN USE IS eol AND IT IS OF TYPE char
INFO  16:39:06,787 - WE ARE USING A VARIABLE OF TYPE char ON LINE 57
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  16:39:06,787 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  16:39:06,787 - PRINT FUNCTION CALL IN USE! ON LINE 57
INFO  16:39:06,787 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,787 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  16:39:06,788 - CONST NUMBER 0 ON LINE 58
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  16:39:06,788 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 58
INFO  16:39:06,788 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:39:06,788 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,788 - WE ARE USING A VARIABLE OF TYPE int ON LINE 60
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:39:06,788 - CONST NUMBER 3 ON LINE 60
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:39:06,788 - USING TWO EXPRESSIONS OF TYPE int ON LINE 60
INFO  16:39:06,788 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,788 - USING ++ ON i ON LINE 62
INFO  16:39:06,788 - USING CONTINUE KEYWORD!
INFO  16:39:06,788 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,788 - WE ARE USING A VARIABLE OF TYPE int ON LINE 65
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:39:06,788 - CONST NUMBER 4 ON LINE 65
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:39:06,788 - USING TWO EXPRESSIONS OF TYPE int ON LINE 65
INFO  16:39:06,788 - USING BREAK KEYWORD!
INFO  16:39:06,788 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,788 - BEGINNING OF AN ASSIGNEMENT! ON LINE 66
INFO  16:39:06,788 - CURRENT VARIABLE IN USE IS inkrement AND IT IS OF TYPE int
INFO  16:39:06,788 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,788 - WE ARE USING A VARIABLE OF TYPE int ON LINE 66
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:39:06,788 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:39:06,788 - CONST NUMBER 1 ON LINE 66
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:39:06,789 - TYPE -> int <- AND -> int <- ON LINE 66
INFO  16:39:06,789 - TYPE -> int <- AND -> int <- ON LINE 66
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:39:06,789 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 66
INFO  16:39:06,789 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  16:39:06,789 - WE ARE USING A VARIABLE OF TYPE int ON LINE 67
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  16:39:06,789 - CONST NUMBER 10 ON LINE 67
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  16:39:06,789 - USING TWO EXPRESSIONS OF TYPE int ON LINE 67
INFO  16:39:06,789 - ENDING OF A DO...WHILE LOOP! ON LINE 59
INFO  16:39:06,789 - CONST NUMBER 0 ON LINE 72
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  16:39:06,789 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,789 - ARRAY niz IN USE IN FUNCTION READ ON LINE 72
INFO  16:39:06,789 - CONST NUMBER 1 ON LINE 73
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  16:39:06,789 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,789 - ARRAY niz IN USE IN FUNCTION READ ON LINE 73
INFO  16:39:06,789 - CONST NUMBER 2 ON LINE 74
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  16:39:06,789 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,789 - ARRAY niz IN USE IN FUNCTION READ ON LINE 74
INFO  16:39:06,789 - CURRENT VARIABLE IN USE IS eol AND IT IS OF TYPE char
INFO  16:39:06,789 - WE ARE USING A VARIABLE OF TYPE char ON LINE 75
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  16:39:06,789 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  16:39:06,789 - PRINT FUNCTION CALL IN USE! ON LINE 75
INFO  16:39:06,789 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  16:39:06,790 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  16:39:06,790 - CONST NUMBER 0 ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,790 - WE ARE USING AN ARRAY OF TYPE int ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - CONST NUMBER 1 ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,790 - WE ARE USING AN ARRAY OF TYPE int ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - TYPE -> int <- AND -> int <- ON LINE 77
INFO  16:39:06,790 - TYPE -> int <- AND -> int <- ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - CONST NUMBER 2 ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,790 - WE ARE USING AN ARRAY OF TYPE int ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - TYPE -> int <- AND -> int <- ON LINE 77
INFO  16:39:06,790 - TYPE -> int <- AND -> int <- ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  16:39:06,790 - PRINT FUNCTION CALL IN USE! ON LINE 77
INFO  16:39:06,791 - CURRENT VARIABLE IN USE IS eol AND IT IS OF TYPE char
INFO  16:39:06,791 - WE ARE USING A VARIABLE OF TYPE char ON LINE 79
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 79
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 79
INFO  16:39:06,791 - PRINT FUNCTION CALL IN USE! ON LINE 79
INFO  16:39:06,791 - CURRENT VARIABLE IN USE IS inkrement AND IT IS OF TYPE int
INFO  16:39:06,791 - CONST NUMBER 2 ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  16:39:06,791 - WE ARE USING AN ARRAY OF TYPE int ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - CONST NUMBER 2 ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - TYPE -> int <- AND -> int <- ON LINE 80
INFO  16:39:06,791 - TYPE -> int <- AND -> int <- ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:39:06,791 - PRINT FUNCTION CALL IN USE! ON LINE 80
INFO  16:39:06,791 - CURRENT VARIABLE IN USE IS verify AND IT IS OF TYPE boolean
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  16:39:06,791 - CONST CHAR t ON LINE 82
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  16:39:06,791 - CONST CHAR f ON LINE 82
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  16:39:06,791 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  16:39:06,791 - SUCCESSFUL TERNARY! TYPES: char AND char ! ON LINE 82
INFO  16:39:06,791 - PRINT FUNCTION CALL IN USE! ON LINE 82
INFO  16:39:06,791 - METHOD BODY ENDING!
INFO  16:39:06,792 - END OF DEFINING FUNCTION main
INFO  16:39:06,792 - PROGRAM ENDED => test302 ON LINE 3
INFO  16:39:06,792 -  Deklarisanih promenljivih ima = 4
INFO  16:39:06,792 - ===================================
INFO  16:39:06,797 - Parsiranje uspesno zavrseno!
