INFO  18:50:01,187 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:50:01,275 - #2 program
INFO  18:50:01,275 - #43 MJProgram
INFO  18:50:01,275 - #43 int
INFO  18:50:01,277 - #43 a
INFO  18:50:01,278 - #31 ,
INFO  18:50:01,279 - #43 b
INFO  18:50:01,279 - #31 ,
INFO  18:50:01,279 - #43 c
INFO  18:50:01,279 - #31 ,
INFO  18:50:01,279 - #43 d
INFO  18:50:01,280 - #33 ;
INFO  18:50:01,280 - #9 const
INFO  18:50:01,280 - #43 int
INFO  18:50:01,281 - #43 y
INFO  18:50:01,281 - #19 =
INFO  18:50:01,281 - #42 3
INFO  18:50:01,281 - #33 ;
INFO  18:50:01,281 - #35 {
INFO  18:50:01,282 - #43 int
INFO  18:50:01,283 - #43 k
INFO  18:50:01,283 - #37 (
INFO  18:50:01,284 - #43 int
INFO  18:50:01,284 - #43 a
INFO  18:50:01,284 - #31 ,
INFO  18:50:01,284 - #43 int
INFO  18:50:01,284 - #43 b
INFO  18:50:01,284 - #38 )
INFO  18:50:01,284 - #35 {
INFO  18:50:01,286 - #41 return
INFO  18:50:01,289 - #43 b
INFO  18:50:01,292 - #33 ;
INFO  18:50:01,298 - #36 }
INFO  18:50:01,298 - #5 void
INFO  18:50:01,303 - #43 main
INFO  18:50:01,303 - #37 (
INFO  18:50:01,304 - #38 )
INFO  18:50:01,305 - #43 int
INFO  18:50:01,305 - #43 x
INFO  18:50:01,305 - #33 ;
INFO  18:50:01,305 - #43 char
INFO  18:50:01,305 - #43 z
INFO  18:50:01,305 - #33 ;
INFO  18:50:01,305 - #43 char
INFO  18:50:01,306 - #43 xx
INFO  18:50:01,306 - #39 [
INFO  18:50:01,306 - #40 ]
INFO  18:50:01,306 - #33 ;
INFO  18:50:01,306 - #43 char
INFO  18:50:01,306 - #43 yy
INFO  18:50:01,306 - #39 [
INFO  18:50:01,307 - #40 ]
INFO  18:50:01,307 - #33 ;
INFO  18:50:01,307 - #43 int
INFO  18:50:01,307 - #43 br
INFO  18:50:01,307 - #39 [
INFO  18:50:01,307 - #40 ]
INFO  18:50:01,307 - #33 ;
INFO  18:50:01,307 - #35 {
INFO  18:50:01,307 - #43 br
INFO  18:50:01,308 - #19 =
INFO  18:50:01,308 - #16 new
INFO  18:50:01,310 - #43 int
INFO  18:50:01,310 - #39 [
INFO  18:50:01,310 - #42 10
INFO  18:50:01,310 - #40 ]
INFO  18:50:01,311 - #33 ;
INFO  18:50:01,311 - #43 br
INFO  18:50:01,312 - #39 [
INFO  18:50:01,314 - #42 0
INFO  18:50:01,315 - #40 ]
INFO  18:50:01,315 - #19 =
INFO  18:50:01,316 - #42 0
INFO  18:50:01,316 - #33 ;
INFO  18:50:01,316 - #43 br
INFO  18:50:01,316 - #39 [
INFO  18:50:01,316 - #42 1
INFO  18:50:01,316 - #40 ]
INFO  18:50:01,316 - #19 =
INFO  18:50:01,316 - #42 2
INFO  18:50:01,316 - #33 ;
INFO  18:50:01,316 - #43 br
INFO  18:50:01,316 - #39 [
INFO  18:50:01,316 - #42 2
INFO  18:50:01,316 - #40 ]
INFO  18:50:01,317 - #19 =
INFO  18:50:01,317 - #42 100
INFO  18:50:01,317 - #33 ;
INFO  18:50:01,317 - #18 print
INFO  18:50:01,317 - #37 (
INFO  18:50:01,317 - #43 br
INFO  18:50:01,317 - #39 [
INFO  18:50:01,317 - #43 br
INFO  18:50:01,317 - #39 [
INFO  18:50:01,317 - #42 1
INFO  18:50:01,317 - #40 ]
INFO  18:50:01,318 - #40 ]
INFO  18:50:01,318 - #38 )
INFO  18:50:01,319 - #33 ;
INFO  18:50:01,319 - #18 print
INFO  18:50:01,319 - #37 (
INFO  18:50:01,320 - #43 br
INFO  18:50:01,320 - #39 [
INFO  18:50:01,320 - #42 0
INFO  18:50:01,320 - #40 ]
INFO  18:50:01,320 - #38 )
INFO  18:50:01,321 - #33 ;
INFO  18:50:01,321 - #43 br
INFO  18:50:01,321 - #39 [
INFO  18:50:01,321 - #42 0
INFO  18:50:01,321 - #40 ]
INFO  18:50:01,321 - #28 ++
INFO  18:50:01,321 - #33 ;
INFO  18:50:01,321 - #18 print
INFO  18:50:01,321 - #37 (
INFO  18:50:01,321 - #43 br
INFO  18:50:01,321 - #39 [
INFO  18:50:01,321 - #42 0
INFO  18:50:01,321 - #40 ]
INFO  18:50:01,322 - #38 )
INFO  18:50:01,322 - #33 ;
INFO  18:50:01,322 - #36 }
INFO  18:50:01,322 - #36 }
INFO  18:50:01,331 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                NoVarDeclList(
                ) [NoVarDeclList]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   z
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 xx
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassArray(
               yy
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             br
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             br
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NewFactorClass(
                                    Type(
                                     int
                                    ) [Type]
                                    FactorOptionalSecondClass(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               10
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [FactorOptionalSecondClass]
                                  ) [NewFactorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           br
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         br
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   1
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               2
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 2
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             100
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             br
                            ) [DesigIdent]
                            OptionalDesignatorArray(
                              HelperClass(
                              ) [HelperClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           br
                                          ) [DesigIdent]
                                          OptionalDesignatorArray(
                                            HelperClass(
                                            ) [HelperClass]
                                            LSquareClass(
                                            ) [LSquareClass]
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     1
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [OptionalDesignatorArray]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           br
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          Assignment(
            DesignatorStatementPlusPlus(
              Designator(
                DesigIdent(
                 br
                ) [DesigIdent]
                OptionalDesignatorArray(
                  HelperClass(
                  ) [HelperClass]
                  LSquareClass(
                  ) [LSquareClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [OptionalDesignatorArray]
              ) [Designator]
            ) [DesignatorStatementPlusPlus]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:50:01,334 - ===================================
INFO  18:50:01,338 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:50:01,339 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:50:01,339 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:50:01,339 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:50:01,339 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:50:01,340 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:50:01,340 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  18:50:01,341 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  18:50:01,341 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  18:50:01,341 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:50:01,341 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:50:01,341 - METHOD BODY STARTING!
INFO  18:50:01,341 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  18:50:01,341 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  18:50:01,341 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:50:01,341 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:50:01,341 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  18:50:01,342 - METHOD BODY ENDING!
INFO  18:50:01,342 - END OF DEFINING FUNCTION k
INFO  18:50:01,342 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:50:01,342 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  18:50:01,342 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  18:50:01,342 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  18:50:01,342 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  18:50:01,342 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  18:50:01,342 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  18:50:01,342 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 16
INFO  18:50:01,342 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 16
INFO  18:50:01,342 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 17
INFO  18:50:01,343 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 17
INFO  18:50:01,343 - METHOD BODY STARTING!
INFO  18:50:01,343 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,343 - BEGINNING OF AN ASSIGNEMENT! ON LINE 38
INFO  18:50:01,343 - CONST NUMBER 10 ON LINE 38
INFO  18:50:01,343 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:50:01,343 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:50:01,343 - USAGE OF KEYWORD NEW! ON LINE 38
INFO  18:50:01,343 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:50:01,343 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:50:01,343 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 38
INFO  18:50:01,343 - CONST NUMBER 0 ON LINE 39
INFO  18:50:01,343 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:50:01,343 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:50:01,343 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,344 - BEGINNING OF AN ASSIGNEMENT! ON LINE 39
INFO  18:50:01,344 - CONST NUMBER 0 ON LINE 39
INFO  18:50:01,344 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:50:01,344 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  18:50:01,344 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 39
INFO  18:50:01,344 - CONST NUMBER 1 ON LINE 40
INFO  18:50:01,344 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:50:01,344 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:50:01,344 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,344 - BEGINNING OF AN ASSIGNEMENT! ON LINE 40
INFO  18:50:01,344 - CONST NUMBER 2 ON LINE 40
INFO  18:50:01,344 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:50:01,345 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:50:01,345 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 40
INFO  18:50:01,345 - CONST NUMBER 2 ON LINE 41
INFO  18:50:01,345 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  18:50:01,345 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  18:50:01,345 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,345 - BEGINNING OF AN ASSIGNEMENT! ON LINE 41
INFO  18:50:01,345 - CONST NUMBER 100 ON LINE 41
INFO  18:50:01,345 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  18:50:01,345 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  18:50:01,346 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 41
INFO  18:50:01,346 - CONST NUMBER 1 ON LINE 42
INFO  18:50:01,346 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:50:01,346 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:50:01,346 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,346 - WE ARE USING AN ARRAY OF TYPE int ON LINE 42
INFO  18:50:01,346 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:50:01,346 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:50:01,346 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,346 - WE ARE USING AN ARRAY OF TYPE int ON LINE 42
INFO  18:50:01,347 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:50:01,347 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:50:01,347 - PRINT FUNCTION CALL IN USE! ON LINE 42
INFO  18:50:01,347 - CONST NUMBER 0 ON LINE 43
INFO  18:50:01,347 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:50:01,347 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:50:01,347 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,347 - WE ARE USING AN ARRAY OF TYPE int ON LINE 43
INFO  18:50:01,347 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:50:01,347 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  18:50:01,347 - PRINT FUNCTION CALL IN USE! ON LINE 43
INFO  18:50:01,347 - CONST NUMBER 0 ON LINE 44
INFO  18:50:01,348 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  18:50:01,348 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  18:50:01,348 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,348 - USING ++ ON br ON LINE 44
INFO  18:50:01,348 - CONST NUMBER 0 ON LINE 45
INFO  18:50:01,348 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:50:01,348 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:50:01,348 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  18:50:01,348 - WE ARE USING AN ARRAY OF TYPE int ON LINE 45
INFO  18:50:01,348 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:50:01,348 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  18:50:01,348 - PRINT FUNCTION CALL IN USE! ON LINE 45
INFO  18:50:01,348 - METHOD BODY ENDING!
INFO  18:50:01,348 - END OF DEFINING FUNCTION main
INFO  18:50:01,349 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:50:01,349 -  Deklarisanih promenljivih ima = 9
INFO  18:50:01,349 - ===================================
INFO  18:50:01,356 - Parsiranje uspesno zavrseno!
