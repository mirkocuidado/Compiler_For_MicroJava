INFO  01:26:10,076 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  01:26:10,145 - #34 program
INFO  01:26:10,145 - #48 MJProgram
INFO  01:26:10,145 - #48 int
INFO  01:26:10,146 - #48 x
INFO  01:26:10,146 - #42 ,
INFO  01:26:10,147 - #48 y
INFO  01:26:10,147 - #37 ;
INFO  01:26:10,147 - #48 int
INFO  01:26:10,147 - #48 bla
INFO  01:26:10,147 - #45 [
INFO  01:26:10,148 - #46 ]
INFO  01:26:10,148 - #42 ,
INFO  01:26:10,148 - #48 zz
INFO  01:26:10,148 - #42 ,
INFO  01:26:10,148 - #48 cc
INFO  01:26:10,148 - #45 [
INFO  01:26:10,148 - #46 ]
INFO  01:26:10,148 - #37 ;
INFO  01:26:10,149 - #7 const
INFO  01:26:10,149 - #48 int
INFO  01:26:10,149 - #48 aa
INFO  01:26:10,157 - #33 =
INFO  01:26:10,157 - #47 5
INFO  01:26:10,157 - #42 ,
INFO  01:26:10,157 - #48 bb
INFO  01:26:10,157 - #33 =
INFO  01:26:10,157 - #47 6
INFO  01:26:10,157 - #37 ;
INFO  01:26:10,158 - #7 const
INFO  01:26:10,158 - #48 char
INFO  01:26:10,158 - #48 cc
INFO  01:26:10,158 - #33 =
INFO  01:26:10,159 - #2 c
INFO  01:26:10,159 - #42 ,
INFO  01:26:10,160 - #48 dd
INFO  01:26:10,160 - #33 =
INFO  01:26:10,160 - #2 d
INFO  01:26:10,160 - #37 ;
INFO  01:26:10,160 - #7 const
INFO  01:26:10,160 - #48 bool
INFO  01:26:10,161 - #48 ee
INFO  01:26:10,161 - #33 =
INFO  01:26:10,161 - #3 true
INFO  01:26:10,161 - #42 ,
INFO  01:26:10,162 - #48 ff
INFO  01:26:10,162 - #33 =
INFO  01:26:10,162 - #3 false
INFO  01:26:10,162 - #37 ;
INFO  01:26:10,162 - #5 class
INFO  01:26:10,162 - #48 Klasa
INFO  01:26:10,162 - #35 {
INFO  01:26:10,163 - #48 int
INFO  01:26:10,164 - #48 duca1
INFO  01:26:10,165 - #42 ,
INFO  01:26:10,165 - #48 duca2
INFO  01:26:10,165 - #42 ,
INFO  01:26:10,165 - #48 duca3
INFO  01:26:10,165 - #37 ;
INFO  01:26:10,165 - #36 }
INFO  01:26:10,166 - #5 class
INFO  01:26:10,166 - #48 KlasaDva
INFO  01:26:10,167 - #13 extends
INFO  01:26:10,167 - #48 Klasa
INFO  01:26:10,167 - #35 {
INFO  01:26:10,167 - #48 int
INFO  01:26:10,167 - #48 aa
INFO  01:26:10,167 - #37 ;
INFO  01:26:10,167 - #35 {
INFO  01:26:10,167 - #48 int
INFO  01:26:10,168 - #48 f
INFO  01:26:10,169 - #38 (
INFO  01:26:10,169 - #39 )
INFO  01:26:10,170 - #35 {
INFO  01:26:10,170 - #36 }
INFO  01:26:10,171 - #36 }
INFO  01:26:10,172 - #36 }
INFO  01:26:10,172 - #5 class
INFO  01:26:10,172 - #48 Klasa3
INFO  01:26:10,172 - #35 {
INFO  01:26:10,172 - #36 }
INFO  01:26:10,173 - #5 class
INFO  01:26:10,173 - #48 Klasa4
INFO  01:26:10,173 - #35 {
INFO  01:26:10,173 - #35 {
INFO  01:26:10,173 - #44 void
INFO  01:26:10,173 - #48 bla
INFO  01:26:10,174 - #38 (
INFO  01:26:10,174 - #39 )
INFO  01:26:10,174 - #35 {
INFO  01:26:10,174 - #36 }
INFO  01:26:10,174 - #36 }
INFO  01:26:10,174 - #36 }
INFO  01:26:10,174 - #35 {
INFO  01:26:10,174 - #48 int
INFO  01:26:10,175 - #48 f
INFO  01:26:10,175 - #38 (
INFO  01:26:10,175 - #39 )
INFO  01:26:10,175 - #35 {
INFO  01:26:10,175 - #36 }
INFO  01:26:10,175 - #44 void
INFO  01:26:10,175 - #48 f
INFO  01:26:10,175 - #38 (
INFO  01:26:10,175 - #39 )
INFO  01:26:10,175 - #35 {
INFO  01:26:10,175 - #36 }
INFO  01:26:10,175 - #48 int
INFO  01:26:10,175 - #48 f
INFO  01:26:10,176 - #38 (
INFO  01:26:10,176 - #48 int
INFO  01:26:10,176 - #48 a
INFO  01:26:10,176 - #39 )
INFO  01:26:10,176 - #35 {
INFO  01:26:10,176 - #36 }
INFO  01:26:10,176 - #48 int
INFO  01:26:10,176 - #48 f
INFO  01:26:10,176 - #38 (
INFO  01:26:10,176 - #48 int
INFO  01:26:10,176 - #48 b
INFO  01:26:10,177 - #42 ,
INFO  01:26:10,177 - #48 int
INFO  01:26:10,177 - #48 c
INFO  01:26:10,177 - #45 [
INFO  01:26:10,177 - #46 ]
INFO  01:26:10,177 - #39 )
INFO  01:26:10,177 - #35 {
INFO  01:26:10,177 - #36 }
INFO  01:26:10,177 - #44 void
INFO  01:26:10,177 - #48 main
INFO  01:26:10,178 - #38 (
INFO  01:26:10,178 - #39 )
INFO  01:26:10,178 - #48 int
INFO  01:26:10,178 - #48 x
INFO  01:26:10,178 - #42 ,
INFO  01:26:10,178 - #48 i
INFO  01:26:10,178 - #37 ;
INFO  01:26:10,178 - #48 char
INFO  01:26:10,178 - #48 c
INFO  01:26:10,178 - #37 ;
INFO  01:26:10,178 - #35 {
INFO  01:26:10,178 - #48 val
INFO  01:26:10,179 - #33 =
INFO  01:26:10,180 - #11 new
INFO  01:26:10,181 - #48 Table
INFO  01:26:10,181 - #37 ;
INFO  01:26:10,184 - #48 val
INFO  01:26:10,184 - #30 .
INFO  01:26:10,184 - #48 pos
INFO  01:26:10,184 - #33 =
INFO  01:26:10,185 - #11 new
INFO  01:26:10,185 - #48 int
INFO  01:26:10,185 - #45 [
INFO  01:26:10,185 - #48 size
INFO  01:26:10,185 - #46 ]
INFO  01:26:10,185 - #37 ;
INFO  01:26:10,186 - #48 val
INFO  01:26:10,186 - #30 .
INFO  01:26:10,186 - #48 neg
INFO  01:26:10,186 - #33 =
INFO  01:26:10,186 - #11 new
INFO  01:26:10,186 - #48 int
INFO  01:26:10,186 - #45 [
INFO  01:26:10,186 - #48 size
INFO  01:26:10,186 - #46 ]
INFO  01:26:10,186 - #37 ;
INFO  01:26:10,187 - #48 i
INFO  01:26:10,187 - #33 =
INFO  01:26:10,187 - #47 0
INFO  01:26:10,187 - #37 ;
INFO  01:26:10,187 - #9 do
INFO  01:26:10,187 - #35 {
INFO  01:26:10,187 - #48 val
INFO  01:26:10,187 - #30 .
INFO  01:26:10,187 - #48 putp
INFO  01:26:10,187 - #38 (
INFO  01:26:10,187 - #47 0
INFO  01:26:10,187 - #42 ,
INFO  01:26:10,188 - #48 i
INFO  01:26:10,188 - #39 )
INFO  01:26:10,188 - #37 ;
INFO  01:26:10,188 - #48 val
INFO  01:26:10,188 - #30 .
INFO  01:26:10,188 - #48 putn
INFO  01:26:10,188 - #38 (
INFO  01:26:10,188 - #47 0
INFO  01:26:10,188 - #42 ,
INFO  01:26:10,188 - #48 i
INFO  01:26:10,188 - #39 )
INFO  01:26:10,188 - #37 ;
INFO  01:26:10,188 - #48 i
INFO  01:26:10,189 - #28 ++
INFO  01:26:10,189 - #37 ;
INFO  01:26:10,189 - #36 }
INFO  01:26:10,189 - #10 while
INFO  01:26:10,190 - #38 (
INFO  01:26:10,190 - #48 i
INFO  01:26:10,190 - #24 <
INFO  01:26:10,190 - #48 size
INFO  01:26:10,191 - #39 )
INFO  01:26:10,193 - #37 ;
INFO  01:26:10,193 - #48 f
INFO  01:26:10,193 - #38 (
INFO  01:26:10,193 - #48 c
INFO  01:26:10,193 - #42 ,
INFO  01:26:10,193 - #48 x
INFO  01:26:10,193 - #42 ,
INFO  01:26:10,193 - #48 i
INFO  01:26:10,193 - #39 )
INFO  01:26:10,193 - #37 ;
INFO  01:26:10,193 - #12 read
INFO  01:26:10,193 - #38 (
INFO  01:26:10,193 - #48 x
INFO  01:26:10,193 - #39 )
INFO  01:26:10,193 - #37 ;
INFO  01:26:10,193 - #9 do
INFO  01:26:10,194 - #35 {
INFO  01:26:10,194 - #49 if
INFO  01:26:10,194 - #38 (
INFO  01:26:10,194 - #48 x
INFO  01:26:10,194 - #25 <=
INFO  01:26:10,194 - #47 0
INFO  01:26:10,194 - #39 )
INFO  01:26:10,195 - #4 break
INFO  01:26:10,195 - #37 ;
INFO  01:26:10,195 - #49 if
INFO  01:26:10,195 - #38 (
INFO  01:26:10,196 - #47 0
INFO  01:26:10,196 - #25 <=
INFO  01:26:10,196 - #48 x
INFO  01:26:10,196 - #26 &&
INFO  01:26:10,196 - #48 x
INFO  01:26:10,196 - #24 <
INFO  01:26:10,196 - #48 size
INFO  01:26:10,196 - #39 )
INFO  01:26:10,196 - #35 {
INFO  01:26:10,196 - #48 val
INFO  01:26:10,196 - #30 .
INFO  01:26:10,196 - #48 putp
INFO  01:26:10,196 - #38 (
INFO  01:26:10,196 - #48 val
INFO  01:26:10,196 - #30 .
INFO  01:26:10,198 - #48 getp
INFO  01:26:10,198 - #38 (
INFO  01:26:10,198 - #48 x
INFO  01:26:10,198 - #39 )
INFO  01:26:10,198 - #41 +
INFO  01:26:10,199 - #47 1
INFO  01:26:10,200 - #39 )
INFO  01:26:10,200 - #37 ;
INFO  01:26:10,200 - #36 }
INFO  01:26:10,200 - #50 else
INFO  01:26:10,200 - #49 if
INFO  01:26:10,200 - #38 (
INFO  01:26:10,200 - #16 -
INFO  01:26:10,200 - #48 size
INFO  01:26:10,201 - #24 <
INFO  01:26:10,201 - #48 x
INFO  01:26:10,201 - #26 &&
INFO  01:26:10,201 - #48 x
INFO  01:26:10,201 - #24 <
INFO  01:26:10,201 - #47 0
INFO  01:26:10,201 - #39 )
INFO  01:26:10,201 - #35 {
INFO  01:26:10,201 - #48 val
INFO  01:26:10,201 - #30 .
INFO  01:26:10,201 - #48 putn
INFO  01:26:10,201 - #38 (
INFO  01:26:10,201 - #48 val
INFO  01:26:10,201 - #30 .
INFO  01:26:10,201 - #48 getn
INFO  01:26:10,201 - #38 (
INFO  01:26:10,202 - #16 -
INFO  01:26:10,202 - #48 x
INFO  01:26:10,202 - #39 )
INFO  01:26:10,202 - #41 +
INFO  01:26:10,202 - #47 1
INFO  01:26:10,202 - #39 )
INFO  01:26:10,202 - #37 ;
INFO  01:26:10,202 - #36 }
INFO  01:26:10,202 - #12 read
INFO  01:26:10,202 - #38 (
INFO  01:26:10,202 - #48 x
INFO  01:26:10,203 - #39 )
INFO  01:26:10,203 - #37 ;
INFO  01:26:10,203 - #36 }
INFO  01:26:10,203 - #10 while
INFO  01:26:10,203 - #38 (
INFO  01:26:10,203 - #3 true
INFO  01:26:10,203 - #39 )
INFO  01:26:10,204 - #37 ;
INFO  01:26:10,205 - #8 switch
INFO  01:26:10,205 - #38 (
INFO  01:26:10,205 - #48 bla
INFO  01:26:10,205 - #38 (
INFO  01:26:10,205 - #48 a
INFO  01:26:10,205 - #42 ,
INFO  01:26:10,205 - #48 b
INFO  01:26:10,205 - #42 ,
INFO  01:26:10,205 - #48 c
INFO  01:26:10,205 - #39 )
INFO  01:26:10,205 - #35 {
ERROR 01:26:10,205 - 
Sintaksna greska na liniji 73
INFO  01:26:10,205 - #36 }
INFO  01:26:10,205 - #36 }
INFO  01:26:10,205 - #36 }
ERROR 01:26:10,206 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 78
