INFO  22:26:29,184 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  22:26:29,325 - #2 program
INFO  22:26:29,326 - #44 p
INFO  22:26:29,326 - #44 int
INFO  22:26:29,328 - #44 buffer
INFO  22:26:29,329 - #39 [
INFO  22:26:29,329 - #40 ]
INFO  22:26:29,329 - #33 ;
INFO  22:26:29,330 - #44 int
INFO  22:26:29,331 - #44 niz
INFO  22:26:29,331 - #39 [
INFO  22:26:29,332 - #40 ]
INFO  22:26:29,332 - #33 ;
INFO  22:26:29,332 - #35 {
INFO  22:26:29,332 - #44 int
INFO  22:26:29,335 - #44 give_me_length_of_array
INFO  22:26:29,336 - #37 (
INFO  22:26:29,336 - #44 int
INFO  22:26:29,336 - #44 array
INFO  22:26:29,337 - #39 [
INFO  22:26:29,337 - #40 ]
INFO  22:26:29,338 - #38 )
INFO  22:26:29,348 - #35 {
INFO  22:26:29,349 - #41 return
INFO  22:26:29,352 - #44 len
INFO  22:26:29,354 - #37 (
INFO  22:26:29,358 - #44 array
INFO  22:26:29,358 - #38 )
INFO  22:26:29,360 - #33 ;
INFO  22:26:29,360 - #36 }
INFO  22:26:29,361 - #44 int
INFO  22:26:29,363 - #44 num_plus_ten
INFO  22:26:29,363 - #37 (
INFO  22:26:29,363 - #44 int
INFO  22:26:29,363 - #44 b
INFO  22:26:29,363 - #39 [
INFO  22:26:29,363 - #40 ]
INFO  22:26:29,364 - #31 ,
INFO  22:26:29,364 - #44 int
INFO  22:26:29,364 - #44 num
INFO  22:26:29,364 - #38 )
INFO  22:26:29,364 - #44 int
INFO  22:26:29,364 - #44 buf
INFO  22:26:29,364 - #39 [
INFO  22:26:29,364 - #40 ]
INFO  22:26:29,364 - #33 ;
INFO  22:26:29,365 - #35 {
INFO  22:26:29,365 - #44 buf
INFO  22:26:29,365 - #19 =
INFO  22:26:29,365 - #44 b
INFO  22:26:29,366 - #33 ;
INFO  22:26:29,367 - #14 if
INFO  22:26:29,367 - #37 (
INFO  22:26:29,367 - #44 num
INFO  22:26:29,367 - #25 <=
INFO  22:26:29,367 - #43 0
INFO  22:26:29,368 - #38 )
INFO  22:26:29,374 - #35 {
INFO  22:26:29,376 - #18 print
INFO  22:26:29,376 - #37 (
INFO  22:26:29,377 - #44 b
INFO  22:26:29,377 - #39 [
INFO  22:26:29,379 - #44 num
INFO  22:26:29,382 - #40 ]
INFO  22:26:29,382 - #38 )
INFO  22:26:29,383 - #33 ;
INFO  22:26:29,384 - #18 print
INFO  22:26:29,385 - #37 (
INFO  22:26:29,385 - #44 buf
INFO  22:26:29,385 - #39 [
INFO  22:26:29,385 - #44 num
INFO  22:26:29,385 - #40 ]
INFO  22:26:29,385 - #38 )
INFO  22:26:29,385 - #33 ;
INFO  22:26:29,385 - #36 }
INFO  22:26:29,386 - #15 else
INFO  22:26:29,388 - #35 {
INFO  22:26:29,388 - #18 print
INFO  22:26:29,388 - #37 (
INFO  22:26:29,388 - #44 b
INFO  22:26:29,388 - #39 [
INFO  22:26:29,388 - #44 num
INFO  22:26:29,388 - #51 -
INFO  22:26:29,388 - #43 1
INFO  22:26:29,389 - #40 ]
INFO  22:26:29,389 - #38 )
INFO  22:26:29,389 - #33 ;
INFO  22:26:29,389 - #18 print
INFO  22:26:29,389 - #37 (
INFO  22:26:29,389 - #44 buf
INFO  22:26:29,389 - #39 [
INFO  22:26:29,389 - #44 num
INFO  22:26:29,389 - #51 -
INFO  22:26:29,389 - #43 1
INFO  22:26:29,390 - #40 ]
INFO  22:26:29,390 - #38 )
INFO  22:26:29,390 - #33 ;
INFO  22:26:29,390 - #36 }
INFO  22:26:29,390 - #41 return
INFO  22:26:29,390 - #44 num
INFO  22:26:29,390 - #50 +
INFO  22:26:29,390 - #43 10
INFO  22:26:29,390 - #33 ;
INFO  22:26:29,391 - #36 }
INFO  22:26:29,391 - #44 int
INFO  22:26:29,391 - #44 sum_all_elements_of_array
INFO  22:26:29,391 - #37 (
INFO  22:26:29,391 - #44 int
INFO  22:26:29,391 - #44 array
INFO  22:26:29,391 - #39 [
INFO  22:26:29,391 - #40 ]
INFO  22:26:29,391 - #38 )
INFO  22:26:29,391 - #44 int
INFO  22:26:29,391 - #44 sum
INFO  22:26:29,391 - #31 ,
INFO  22:26:29,392 - #44 i
INFO  22:26:29,392 - #33 ;
INFO  22:26:29,392 - #35 {
INFO  22:26:29,392 - #44 sum
INFO  22:26:29,392 - #19 =
INFO  22:26:29,392 - #43 0
INFO  22:26:29,392 - #33 ;
INFO  22:26:29,392 - #44 i
INFO  22:26:29,392 - #19 =
INFO  22:26:29,392 - #43 0
INFO  22:26:29,392 - #33 ;
INFO  22:26:29,393 - #12 do
INFO  22:26:29,393 - #35 {
INFO  22:26:29,394 - #44 sum
INFO  22:26:29,394 - #19 =
INFO  22:26:29,394 - #44 sum
INFO  22:26:29,395 - #50 +
INFO  22:26:29,395 - #44 array
INFO  22:26:29,395 - #39 [
INFO  22:26:29,395 - #44 i
INFO  22:26:29,395 - #40 ]
INFO  22:26:29,395 - #33 ;
INFO  22:26:29,395 - #44 i
INFO  22:26:29,395 - #28 ++
INFO  22:26:29,395 - #33 ;
INFO  22:26:29,396 - #36 }
INFO  22:26:29,396 - #13 while
INFO  22:26:29,396 - #37 (
INFO  22:26:29,396 - #44 i
INFO  22:26:29,398 - #23 <
INFO  22:26:29,398 - #44 give_me_length_of_array
INFO  22:26:29,399 - #37 (
INFO  22:26:29,399 - #44 array
INFO  22:26:29,399 - #38 )
INFO  22:26:29,399 - #38 )
INFO  22:26:29,399 - #33 ;
INFO  22:26:29,401 - #41 return
INFO  22:26:29,401 - #44 sum
INFO  22:26:29,401 - #33 ;
INFO  22:26:29,401 - #36 }
INFO  22:26:29,402 - #5 void
INFO  22:26:29,402 - #44 main
INFO  22:26:29,402 - #37 (
INFO  22:26:29,402 - #38 )
INFO  22:26:29,403 - #44 int
INFO  22:26:29,403 - #44 index
INFO  22:26:29,403 - #33 ;
INFO  22:26:29,403 - #44 int
INFO  22:26:29,403 - #44 sum
INFO  22:26:29,403 - #33 ;
INFO  22:26:29,405 - #44 int
INFO  22:26:29,405 - #44 buffer_Fake
INFO  22:26:29,405 - #39 [
INFO  22:26:29,405 - #40 ]
INFO  22:26:29,405 - #33 ;
INFO  22:26:29,405 - #44 int
INFO  22:26:29,405 - #44 aaa
INFO  22:26:29,405 - #39 [
INFO  22:26:29,405 - #40 ]
INFO  22:26:29,405 - #33 ;
INFO  22:26:29,405 - #44 int
INFO  22:26:29,405 - #44 niz
INFO  22:26:29,406 - #39 [
INFO  22:26:29,406 - #40 ]
INFO  22:26:29,406 - #33 ;
INFO  22:26:29,406 - #35 {
INFO  22:26:29,406 - #44 buffer
INFO  22:26:29,406 - #19 =
INFO  22:26:29,406 - #16 new
INFO  22:26:29,406 - #44 int
INFO  22:26:29,406 - #39 [
INFO  22:26:29,406 - #43 10
INFO  22:26:29,406 - #40 ]
INFO  22:26:29,406 - #33 ;
INFO  22:26:29,407 - #44 buffer
INFO  22:26:29,407 - #39 [
INFO  22:26:29,407 - #43 0
INFO  22:26:29,407 - #40 ]
INFO  22:26:29,407 - #19 =
INFO  22:26:29,407 - #43 1
INFO  22:26:29,407 - #33 ;
INFO  22:26:29,407 - #18 print
INFO  22:26:29,407 - #37 (
INFO  22:26:29,407 - #44 buffer
INFO  22:26:29,407 - #39 [
INFO  22:26:29,407 - #43 0
INFO  22:26:29,408 - #40 ]
INFO  22:26:29,408 - #38 )
INFO  22:26:29,408 - #33 ;
INFO  22:26:29,408 - #44 niz
INFO  22:26:29,408 - #19 =
INFO  22:26:29,408 - #16 new
INFO  22:26:29,408 - #44 int
INFO  22:26:29,408 - #39 [
INFO  22:26:29,408 - #43 10
INFO  22:26:29,408 - #40 ]
INFO  22:26:29,408 - #33 ;
INFO  22:26:29,408 - #44 niz
INFO  22:26:29,408 - #39 [
INFO  22:26:29,408 - #43 0
INFO  22:26:29,409 - #40 ]
INFO  22:26:29,409 - #19 =
INFO  22:26:29,409 - #43 38
INFO  22:26:29,409 - #33 ;
INFO  22:26:29,409 - #44 sum
INFO  22:26:29,409 - #19 =
INFO  22:26:29,409 - #42 #
INFO  22:26:29,409 - #43 0
INFO  22:26:29,411 - #33 ;
INFO  22:26:29,413 - #18 print
INFO  22:26:29,413 - #37 (
INFO  22:26:29,413 - #44 sum
INFO  22:26:29,413 - #38 )
INFO  22:26:29,413 - #33 ;
INFO  22:26:29,413 - #36 }
INFO  22:26:29,413 - #36 }
INFO  22:26:29,427 - Program(
  ProgramName(
   p
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             buffer
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationVars(
      VarDeclClass(
        Type(
         int
        ) [Type]
        VarListSingle(
          VarClassArray(
           niz
          ) [VarClassArray]
        ) [VarListSingle]
      ) [VarDeclClass]
    ) [GroupDeclarationVars]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassNoVoid(
              Type(
               int
              ) [Type]
             give_me_length_of_array
            ) [ReturnValueClassNoVoid]
            FormParams(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 array
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
            ) [FormParams]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            Statements(
              NoStmt(
              ) [NoStmt]
              ReturnExpr(
                ReturnNonTerminalClass(
                ) [ReturnNonTerminalClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          Designator(
                            DesigIdent(
                             len
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          Actuals(
                            ActualParam(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           array
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParam]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [ReturnExpr]
            ) [Statements]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           num_plus_ten
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 b
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               num
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassArray(
                 buf
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       buf
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 b
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              IfStatement(
                IfConditionNoError(
                  ConditionClass(
                    CondTermClass(
                      CondFactClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   num
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                        CondFactOptionalClass(
                          LessOrEqualOperationClass(
                          ) [LessOrEqualOperationClass]
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [CondFactOptionalClass]
                      ) [CondFactClass]
                      NoCondTermOptionalClass(
                      ) [NoCondTermOptionalClass]
                    ) [CondTermClass]
                    NoConditionOptionalClass(
                    ) [NoConditionOptionalClass]
                  ) [ConditionClass]
                ) [IfConditionNoError]
                StatementStatement(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     b
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                  DesigIdent(
                                                   num
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   buf
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 num
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                ) [StatementStatement]
                Empty(
                ) [Empty]
                YesOptionalStatement(
                  StatementStatement(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       b
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     num
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              ExprOptionalListClass(
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                                MinusOperation(
                                                 -
                                                ) [MinusOperation]
                                                TermClass(
                                                  NumberConst(
                                                   1
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                              ) [ExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     buf
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                  DesigIdent(
                                                   num
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            ExprOptionalListClass(
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                              MinusOperation(
                                               -
                                              ) [MinusOperation]
                                              TermClass(
                                                NumberConst(
                                                 1
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                            ) [ExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                  ) [StatementStatement]
                ) [YesOptionalStatement]
              ) [IfStatement]
            ) [Statements]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           num
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    ExprOptionalListClass(
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                      PlusOperation(
                       +
                      ) [PlusOperation]
                      TermClass(
                        NumberConst(
                         10
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                    ) [ExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         sum_all_elements_of_array
        ) [ReturnValueClassNoVoid]
        FormParams(
          SingleFormalParamDecl(
            FormalParamDeclClassArray(
              Type(
               int
              ) [Type]
             array
            ) [FormalParamDeclClassArray]
          ) [SingleFormalParamDecl]
        ) [FormParams]
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListSingle(
                VarClassNoArray(
                 sum
                ) [VarClassNoArray]
              ) [VarListSingle]
              VarClassNoArray(
               i
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       sum
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     i
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           sum
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     sum
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              ExprOptionalListClass(
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       array
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     i
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementPlusPlus(
                      Designator(
                        DesigIdent(
                         i
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorStatementPlusPlus]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               i
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      LessOperationClass(
                      ) [LessOperationClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            FactorOptionalParams(
                              Designator(
                                DesigIdent(
                                 give_me_length_of_array
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              Actuals(
                                ActualParam(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               array
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParam]
                              ) [Actuals]
                            ) [FactorOptionalParams]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         sum
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                NoVarDeclList(
                ) [NoVarDeclList]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     index
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   sum
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassArray(
                 buffer_Fake
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassArray(
               aaa
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             niz
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           buffer
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NewFactorClass(
                                  Type(
                                   int
                                  ) [Type]
                                  FactorOptionalSecondClass(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             10
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [FactorOptionalSecondClass]
                                ) [NewFactorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         buffer
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   0
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               1
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               buffer
                              ) [DesigIdent]
                              OptionalDesignatorArray(
                                HelperClass(
                                ) [HelperClass]
                                LSquareClass(
                                ) [LSquareClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         0
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [OptionalDesignatorArray]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     niz
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NewFactorClass(
                            Type(
                             int
                            ) [Type]
                            FactorOptionalSecondClass(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       10
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [FactorOptionalSecondClass]
                          ) [NewFactorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   niz
                  ) [DesigIdent]
                  OptionalDesignatorArray(
                    HelperClass(
                    ) [HelperClass]
                    LSquareClass(
                    ) [LSquareClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [OptionalDesignatorArray]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         38
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 sum
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      ModificationOne(
                        HashTagClass(
                        ) [HashTagClass]
                       0
                      ) [ModificationOne]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       sum
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  22:26:29,431 - ===================================
INFO  22:26:29,439 - PROGRAM NAME DETECTED => p ON LINE 1
INFO  22:26:29,440 - ARRAY VARIABLE buffer IS BEING DEFINED! ON LINE 3
INFO  22:26:29,440 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 3
INFO  22:26:29,440 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 4
INFO  22:26:29,440 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 4
INFO  22:26:29,440 - FUNCTION give_me_length_of_array WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  22:26:29,441 - FORMAL ARRAY PARAMETER array DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  22:26:29,441 - METHOD BODY STARTING!
INFO  22:26:29,441 - CURRENT VARIABLE IN USE IS len AND IT IS OF TYPE int
INFO  22:26:29,441 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  22:26:29,441 - WE ARE USING A VARIABLE OF TYPE array ON LINE 9
INFO  22:26:29,441 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:29,441 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:29,441 - TYPE -> array <- AND -> array <- ON LINE 9
INFO  22:26:29,442 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:29,442 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:29,442 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  22:26:29,442 - METHOD BODY ENDING!
INFO  22:26:29,442 - END OF DEFINING FUNCTION give_me_length_of_array
INFO  22:26:29,442 - FUNCTION num_plus_ten WITH RETURN VALUE OF TYPE int ON LINE 12
INFO  22:26:29,442 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 12
INFO  22:26:29,443 - FORMAL PARAMETER num DEFINED AND IT IS OF TYPE int ON LINE 12
INFO  22:26:29,443 - ARRAY VARIABLE buf IS BEING DEFINED! ON LINE 13
INFO  22:26:29,443 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 13
INFO  22:26:29,443 - METHOD BODY STARTING!
INFO  22:26:29,443 - CURRENT VARIABLE IN USE IS buf AND IT IS OF TYPE array
INFO  22:26:29,443 - BEGINNING OF AN ASSIGNEMENT! ON LINE 15
INFO  22:26:29,443 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  22:26:29,443 - WE ARE USING A VARIABLE OF TYPE array ON LINE 15
INFO  22:26:29,443 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:26:29,443 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  22:26:29,444 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 15
INFO  22:26:29,444 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  22:26:29,444 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  22:26:29,444 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:26:29,444 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:26:29,444 - CONST NUMBER 0 ON LINE 16
INFO  22:26:29,444 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:26:29,444 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  22:26:29,445 - USING TWO EXPRESSIONS OF TYPE int ON LINE 16
INFO  22:26:29,445 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  22:26:29,445 - WE ARE USING A VARIABLE OF TYPE int ON LINE 17
INFO  22:26:29,445 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:26:29,445 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:26:29,445 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  22:26:29,445 - WE ARE USING AN ARRAY OF TYPE int ON LINE 17
INFO  22:26:29,445 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:26:29,445 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  22:26:29,445 - PRINT FUNCTION CALL IN USE! ON LINE 17
INFO  22:26:29,446 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  22:26:29,446 - WE ARE USING A VARIABLE OF TYPE int ON LINE 18
INFO  22:26:29,446 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:26:29,446 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:26:29,446 - CURRENT VARIABLE IN USE IS buf AND IT IS OF TYPE array
INFO  22:26:29,446 - WE ARE USING AN ARRAY OF TYPE int ON LINE 18
INFO  22:26:29,446 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:26:29,446 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  22:26:29,446 - PRINT FUNCTION CALL IN USE! ON LINE 18
INFO  22:26:29,446 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  22:26:29,446 - WE ARE USING A VARIABLE OF TYPE int ON LINE 21
INFO  22:26:29,446 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:26:29,447 - CONST NUMBER 1 ON LINE 21
INFO  22:26:29,447 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:26:29,447 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 11
INFO  22:26:29,447 - USING INTEGERS IN TERM! ON LINE 21
INFO  22:26:29,447 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  22:26:29,447 - WE ARE USING AN ARRAY OF TYPE int ON LINE 21
INFO  22:26:29,447 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:26:29,447 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  22:26:29,447 - PRINT FUNCTION CALL IN USE! ON LINE 21
INFO  22:26:29,447 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  22:26:29,448 - WE ARE USING A VARIABLE OF TYPE int ON LINE 22
INFO  22:26:29,448 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  22:26:29,448 - CONST NUMBER 1 ON LINE 22
INFO  22:26:29,448 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  22:26:29,448 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  22:26:29,448 - USING INTEGERS IN TERM! ON LINE 22
INFO  22:26:29,448 - CURRENT VARIABLE IN USE IS buf AND IT IS OF TYPE array
INFO  22:26:29,448 - WE ARE USING AN ARRAY OF TYPE int ON LINE 22
INFO  22:26:29,448 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  22:26:29,448 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  22:26:29,448 - PRINT FUNCTION CALL IN USE! ON LINE 22
INFO  22:26:29,449 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  22:26:29,449 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  22:26:29,449 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  22:26:29,449 - CONST NUMBER 10 ON LINE 25
INFO  22:26:29,449 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  22:26:29,449 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:29,449 - USING INTEGERS IN TERM! ON LINE 25
INFO  22:26:29,449 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 25
INFO  22:26:29,450 - METHOD BODY ENDING!
INFO  22:26:29,450 - END OF DEFINING FUNCTION num_plus_ten
INFO  22:26:29,450 - FUNCTION sum_all_elements_of_array WITH RETURN VALUE OF TYPE int ON LINE 28
INFO  22:26:29,450 - FORMAL ARRAY PARAMETER array DEFINED AND IT IS OF TYPE int ON LINE 28
INFO  22:26:29,450 - VARIABLE sum IS BEING DEFINED! ON LINE 29
INFO  22:26:29,450 - VARIABLE i IS BEING DEFINED! ON LINE 29
INFO  22:26:29,451 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 29
INFO  22:26:29,451 - METHOD BODY STARTING!
INFO  22:26:29,451 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  22:26:29,451 - BEGINNING OF AN ASSIGNEMENT! ON LINE 31
INFO  22:26:29,451 - CONST NUMBER 0 ON LINE 31
INFO  22:26:29,451 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  22:26:29,451 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  22:26:29,451 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 31
INFO  22:26:29,451 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:26:29,451 - BEGINNING OF AN ASSIGNEMENT! ON LINE 32
INFO  22:26:29,451 - CONST NUMBER 0 ON LINE 32
INFO  22:26:29,452 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:26:29,452 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  22:26:29,452 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 32
INFO  22:26:29,452 - BEGINNING OF A DO...WHILE LOOP!
INFO  22:26:29,452 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  22:26:29,453 - BEGINNING OF AN ASSIGNEMENT! ON LINE 34
INFO  22:26:29,453 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  22:26:29,453 - WE ARE USING A VARIABLE OF TYPE int ON LINE 34
INFO  22:26:29,453 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  22:26:29,453 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:26:29,453 - WE ARE USING A VARIABLE OF TYPE int ON LINE 34
INFO  22:26:29,453 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  22:26:29,454 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  22:26:29,454 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  22:26:29,454 - WE ARE USING AN ARRAY OF TYPE int ON LINE 34
INFO  22:26:29,454 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  22:26:29,454 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  22:26:29,454 - USING INTEGERS IN TERM! ON LINE 34
INFO  22:26:29,454 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 34
INFO  22:26:29,454 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:26:29,454 - USING ++ ON i ON LINE 35
INFO  22:26:29,454 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  22:26:29,456 - WE ARE USING A VARIABLE OF TYPE int ON LINE 37
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  22:26:29,457 - CURRENT VARIABLE IN USE IS give_me_length_of_array AND IT IS OF TYPE int
INFO  22:26:29,457 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  22:26:29,457 - WE ARE USING A VARIABLE OF TYPE array ON LINE 37
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  22:26:29,457 - TYPE -> array <- AND -> array <- ON LINE 37
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  22:26:29,457 - USING TWO EXPRESSIONS OF TYPE int ON LINE 37
INFO  22:26:29,457 - ENDING OF A DO...WHILE LOOP! ON LINE 33
INFO  22:26:29,457 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  22:26:29,457 - WE ARE USING A VARIABLE OF TYPE int ON LINE 39
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  22:26:29,457 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  22:26:29,457 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 39
INFO  22:26:29,457 - METHOD BODY ENDING!
INFO  22:26:29,457 - END OF DEFINING FUNCTION sum_all_elements_of_array
INFO  22:26:29,458 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 43
INFO  22:26:29,458 - VARIABLE index IS BEING DEFINED! ON LINE 44
INFO  22:26:29,458 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 44
INFO  22:26:29,458 - VARIABLE sum IS BEING DEFINED! ON LINE 45
INFO  22:26:29,458 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 45
INFO  22:26:29,458 - ARRAY VARIABLE buffer_Fake IS BEING DEFINED! ON LINE 46
INFO  22:26:29,458 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 46
INFO  22:26:29,458 - ARRAY VARIABLE aaa IS BEING DEFINED! ON LINE 47
INFO  22:26:29,458 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 47
INFO  22:26:29,458 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 48
INFO  22:26:29,458 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 48
INFO  22:26:29,458 - METHOD BODY STARTING!
INFO  22:26:29,458 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  22:26:29,459 - BEGINNING OF AN ASSIGNEMENT! ON LINE 51
INFO  22:26:29,459 - CONST NUMBER 10 ON LINE 51
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  22:26:29,459 - USAGE OF KEYWORD NEW! ON LINE 51
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  22:26:29,459 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 51
INFO  22:26:29,459 - CONST NUMBER 0 ON LINE 52
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:26:29,459 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  22:26:29,459 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  22:26:29,459 - CONST NUMBER 1 ON LINE 52
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:26:29,459 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  22:26:29,460 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  22:26:29,460 - CONST NUMBER 0 ON LINE 54
INFO  22:26:29,460 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:26:29,460 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:26:29,460 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  22:26:29,460 - WE ARE USING AN ARRAY OF TYPE int ON LINE 54
INFO  22:26:29,460 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:26:29,460 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  22:26:29,460 - PRINT FUNCTION CALL IN USE! ON LINE 54
INFO  22:26:29,460 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  22:26:29,460 - BEGINNING OF AN ASSIGNEMENT! ON LINE 56
INFO  22:26:29,462 - CONST NUMBER 10 ON LINE 56
INFO  22:26:29,462 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:26:29,462 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:26:29,462 - USAGE OF KEYWORD NEW! ON LINE 56
INFO  22:26:29,462 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:26:29,462 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  22:26:29,462 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 56
INFO  22:26:29,462 - CONST NUMBER 0 ON LINE 57
INFO  22:26:29,462 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:26:29,462 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:26:29,462 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  22:26:29,462 - BEGINNING OF AN ASSIGNEMENT! ON LINE 57
INFO  22:26:29,462 - CONST NUMBER 38 ON LINE 57
INFO  22:26:29,462 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:26:29,463 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  22:26:29,463 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 57
INFO  22:26:29,463 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  22:26:29,463 - BEGINNING OF AN ASSIGNEMENT! ON LINE 59
INFO  22:26:29,463 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  22:26:29,463 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  22:26:29,463 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 59
INFO  22:26:29,463 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  22:26:29,463 - WE ARE USING A VARIABLE OF TYPE int ON LINE 60
INFO  22:26:29,463 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  22:26:29,463 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  22:26:29,463 - PRINT FUNCTION CALL IN USE! ON LINE 60
INFO  22:26:29,463 - METHOD BODY ENDING!
INFO  22:26:29,463 - END OF DEFINING FUNCTION main
INFO  22:26:29,465 - PROGRAM ENDED => p ON LINE 1
INFO  22:26:29,465 -  Deklarisanih promenljivih ima = 10
INFO  22:26:29,465 - ===================================
INFO  22:26:29,478 - Parsiranje uspesno zavrseno!
