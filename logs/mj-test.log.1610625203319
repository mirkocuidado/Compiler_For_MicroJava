INFO  12:50:36,309 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  12:50:36,435 - #2 program
INFO  12:50:36,435 - #43 MJProgram
INFO  12:50:36,436 - #43 int
INFO  12:50:36,438 - #43 a
INFO  12:50:36,439 - #31 ,
INFO  12:50:36,440 - #43 b
INFO  12:50:36,440 - #31 ,
INFO  12:50:36,440 - #43 c
INFO  12:50:36,440 - #31 ,
INFO  12:50:36,440 - #43 d
INFO  12:50:36,441 - #33 ;
INFO  12:50:36,441 - #9 const
INFO  12:50:36,441 - #43 int
INFO  12:50:36,442 - #43 term
INFO  12:50:36,442 - #19 =
INFO  12:50:36,442 - #42 0
INFO  12:50:36,442 - #33 ;
INFO  12:50:36,443 - #9 const
INFO  12:50:36,444 - #43 int
INFO  12:50:36,445 - #43 y
INFO  12:50:36,445 - #19 =
INFO  12:50:36,455 - #42 3
INFO  12:50:36,455 - #33 ;
INFO  12:50:36,456 - #35 {
INFO  12:50:36,456 - #43 int
INFO  12:50:36,457 - #43 k
INFO  12:50:36,457 - #37 (
INFO  12:50:36,458 - #43 int
INFO  12:50:36,458 - #43 a
INFO  12:50:36,458 - #31 ,
INFO  12:50:36,458 - #43 int
INFO  12:50:36,458 - #43 b
INFO  12:50:36,459 - #38 )
INFO  12:50:36,459 - #35 {
INFO  12:50:36,460 - #41 return
INFO  12:50:36,465 - #43 b
INFO  12:50:36,468 - #33 ;
INFO  12:50:36,473 - #36 }
INFO  12:50:36,474 - #5 void
INFO  12:50:36,478 - #43 main
INFO  12:50:36,478 - #37 (
INFO  12:50:36,478 - #38 )
INFO  12:50:36,480 - #43 int
INFO  12:50:36,480 - #43 x
INFO  12:50:36,480 - #33 ;
INFO  12:50:36,481 - #43 bool
INFO  12:50:36,481 - #43 p
INFO  12:50:36,481 - #33 ;
INFO  12:50:36,481 - #43 bool
INFO  12:50:36,482 - #43 r
INFO  12:50:36,482 - #33 ;
INFO  12:50:36,482 - #43 bool
INFO  12:50:36,482 - #43 q
INFO  12:50:36,482 - #33 ;
INFO  12:50:36,482 - #35 {
INFO  12:50:36,482 - #43 p
INFO  12:50:36,483 - #19 =
INFO  12:50:36,483 - #45 false
INFO  12:50:36,485 - #33 ;
INFO  12:50:36,485 - #12 do
INFO  12:50:36,486 - #35 {
INFO  12:50:36,487 - #18 print
INFO  12:50:36,488 - #37 (
INFO  12:50:36,488 - #42 0
INFO  12:50:36,488 - #38 )
INFO  12:50:36,489 - #33 ;
INFO  12:50:36,489 - #36 }
INFO  12:50:36,489 - #13 while
INFO  12:50:36,490 - #37 (
INFO  12:50:36,490 - #43 p
INFO  12:50:36,490 - #38 )
INFO  12:50:36,493 - #33 ;
INFO  12:50:36,495 - #43 r
INFO  12:50:36,495 - #19 =
INFO  12:50:36,495 - #45 true
INFO  12:50:36,495 - #33 ;
INFO  12:50:36,496 - #12 do
INFO  12:50:36,496 - #35 {
INFO  12:50:36,496 - #18 print
INFO  12:50:36,496 - #37 (
INFO  12:50:36,496 - #42 1
INFO  12:50:36,496 - #38 )
INFO  12:50:36,496 - #33 ;
INFO  12:50:36,496 - #36 }
INFO  12:50:36,496 - #13 while
INFO  12:50:36,496 - #37 (
INFO  12:50:36,496 - #43 r
INFO  12:50:36,497 - #38 )
INFO  12:50:36,497 - #33 ;
INFO  12:50:36,497 - #43 x
INFO  12:50:36,497 - #19 =
INFO  12:50:36,497 - #42 2
INFO  12:50:36,497 - #33 ;
INFO  12:50:36,498 - #18 print
INFO  12:50:36,499 - #37 (
INFO  12:50:36,499 - #44 a
INFO  12:50:36,499 - #38 )
INFO  12:50:36,499 - #33 ;
INFO  12:50:36,500 - #36 }
INFO  12:50:36,500 - #36 }
INFO  12:50:36,519 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              NoVarDeclList(
              ) [NoVarDeclList]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   x
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 p
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             bool
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               r
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           bool
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             q
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         p
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              BooleanClassConstFactor(
                               false
                              ) [BooleanClassConstFactor]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                DoWhileStatement(
                  DoClass(
                  ) [DoClass]
                  StatementStatement(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                  ) [StatementStatement]
                  ConditionClass(
                    CondTermClass(
                      CondFactClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   p
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                        NoCondFactOptionalClass(
                        ) [NoCondFactOptionalClass]
                      ) [CondFactClass]
                      NoCondTermOptionalClass(
                      ) [NoCondTermOptionalClass]
                    ) [CondTermClass]
                    NoConditionOptionalClass(
                    ) [NoConditionOptionalClass]
                  ) [ConditionClass]
                  RParenClass(
                  ) [RParenClass]
                ) [DoWhileStatement]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     r
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          BooleanClassConstFactor(
                           true
                          ) [BooleanClassConstFactor]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             1
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
              ) [StatementStatement]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               r
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    NoCondFactOptionalClass(
                    ) [NoCondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       2
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  CharConst(
                   a
                  ) [CharConst]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  12:50:36,521 - ===================================
INFO  12:50:36,529 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  12:50:36,529 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  12:50:36,529 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  12:50:36,530 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  12:50:36,530 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  12:50:36,530 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  12:50:36,530 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  12:50:36,530 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  12:50:36,530 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  12:50:36,531 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  12:50:36,531 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  12:50:36,531 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  12:50:36,531 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  12:50:36,531 - METHOD BODY STARTING!
INFO  12:50:36,531 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  12:50:36,532 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  12:50:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  12:50:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  12:50:36,532 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  12:50:36,532 - METHOD BODY ENDING!
INFO  12:50:36,532 - END OF DEFINING FUNCTION k
INFO  12:50:36,533 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  12:50:36,533 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  12:50:36,533 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  12:50:36,533 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  12:50:36,533 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  12:50:36,533 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  12:50:36,533 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  12:50:36,533 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  12:50:36,533 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  12:50:36,533 - METHOD BODY STARTING!
INFO  12:50:36,534 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  12:50:36,534 - BEGINNING OF AN ASSIGNEMENT! ON LINE 34
INFO  12:50:36,534 - CONST CHAR false ON LINE 34
INFO  12:50:36,534 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  12:50:36,534 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  12:50:36,534 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 34
INFO  12:50:36,534 - CONST NUMBER 0 ON LINE 37
INFO  12:50:36,534 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  12:50:36,534 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  12:50:36,535 - PRINT FUNCTION CALL IN USE! ON LINE 37
INFO  12:50:36,535 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  12:50:36,535 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 39
INFO  12:50:36,535 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  12:50:36,535 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  12:50:36,535 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 39
INFO  12:50:36,535 - ENDING OF A DO...WHILE LOOP! ON LINE 36
INFO  12:50:36,535 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  12:50:36,535 - BEGINNING OF AN ASSIGNEMENT! ON LINE 41
INFO  12:50:36,536 - CONST CHAR true ON LINE 41
INFO  12:50:36,536 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  12:50:36,536 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 41
INFO  12:50:36,536 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 41
INFO  12:50:36,536 - CONST NUMBER 1 ON LINE 44
INFO  12:50:36,536 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  12:50:36,536 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  12:50:36,536 - PRINT FUNCTION CALL IN USE! ON LINE 44
INFO  12:50:36,536 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  12:50:36,537 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 45
INFO  12:50:36,537 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  12:50:36,537 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  12:50:36,537 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 45
INFO  12:50:36,537 - ENDING OF A DO...WHILE LOOP! ON LINE 43
INFO  12:50:36,537 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  12:50:36,538 - BEGINNING OF AN ASSIGNEMENT! ON LINE 47
INFO  12:50:36,538 - CONST NUMBER 2 ON LINE 47
INFO  12:50:36,538 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  12:50:36,538 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  12:50:36,538 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 47
INFO  12:50:36,538 - CONST CHAR a ON LINE 127
INFO  12:50:36,539 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 127
INFO  12:50:36,539 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 127
INFO  12:50:36,539 - PRINT FUNCTION CALL IN USE! ON LINE 127
INFO  12:50:36,539 - METHOD BODY ENDING!
INFO  12:50:36,540 - END OF DEFINING FUNCTION main
INFO  12:50:36,540 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  12:50:36,540 -  Deklarisanih promenljivih ima = 8
INFO  12:50:36,541 - ===================================
INFO  12:50:36,550 - Parsiranje uspesno zavrseno!
