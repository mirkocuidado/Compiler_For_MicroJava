INFO  00:16:48,516 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  00:16:48,632 - #2 program
INFO  00:16:48,633 - #48 MJProgram
INFO  00:16:48,633 - #48 int
INFO  00:16:48,635 - #48 a
INFO  00:16:48,637 - #36 ,
INFO  00:16:48,638 - #48 b
INFO  00:16:48,638 - #44 [
INFO  00:16:48,638 - #45 ]
INFO  00:16:48,638 - #36 ,
INFO  00:16:48,638 - #48 c
INFO  00:16:48,639 - #36 ,
INFO  00:16:48,639 - #48 d
INFO  00:16:48,639 - #38 ;
INFO  00:16:48,639 - #48 char
INFO  00:16:48,640 - #48 e
INFO  00:16:48,640 - #36 ,
INFO  00:16:48,640 - #48 f
INFO  00:16:48,640 - #44 [
INFO  00:16:48,640 - #45 ]
INFO  00:16:48,641 - #36 ,
INFO  00:16:48,641 - #48 g
INFO  00:16:48,641 - #38 ;
INFO  00:16:48,645 - #48 bool
INFO  00:16:48,645 - #48 h
INFO  00:16:48,646 - #36 ,
INFO  00:16:48,646 - #48 i
INFO  00:16:48,646 - #44 [
INFO  00:16:48,646 - #45 ]
INFO  00:16:48,646 - #38 ;
INFO  00:16:48,646 - #9 const
INFO  00:16:48,646 - #48 int
INFO  00:16:48,646 - #48 aa
INFO  00:16:48,646 - #24 =
INFO  00:16:48,647 - #47 2
INFO  00:16:48,647 - #36 ,
INFO  00:16:48,647 - #48 bb
INFO  00:16:48,648 - #24 =
INFO  00:16:48,648 - #47 6
INFO  00:16:48,648 - #38 ;
INFO  00:16:48,648 - #9 const
INFO  00:16:48,649 - #48 char
INFO  00:16:48,649 - #48 cc
INFO  00:16:48,649 - #24 =
INFO  00:16:48,649 - #49 c
INFO  00:16:48,649 - #36 ,
INFO  00:16:48,650 - #48 dd
INFO  00:16:48,650 - #24 =
INFO  00:16:48,650 - #49 d
INFO  00:16:48,650 - #38 ;
INFO  00:16:48,650 - #9 const
INFO  00:16:48,650 - #48 bool
INFO  00:16:48,650 - #48 ee
INFO  00:16:48,650 - #24 =
INFO  00:16:48,650 - #50 true
INFO  00:16:48,650 - #36 ,
INFO  00:16:48,651 - #48 ff
INFO  00:16:48,651 - #24 =
INFO  00:16:48,651 - #50 false
INFO  00:16:48,651 - #38 ;
INFO  00:16:48,651 - #40 {
INFO  00:16:48,651 - #5 void
INFO  00:16:48,652 - #48 func
INFO  00:16:48,652 - #42 (
INFO  00:16:48,652 - #48 int
INFO  00:16:48,652 - #48 a
INFO  00:16:48,653 - #36 ,
INFO  00:16:48,653 - #48 int
INFO  00:16:48,653 - #48 b
INFO  00:16:48,653 - #43 )
INFO  00:16:48,653 - #40 {
INFO  00:16:48,654 - #41 }
INFO  00:16:48,655 - #5 void
INFO  00:16:48,656 - #48 main
INFO  00:16:48,656 - #42 (
INFO  00:16:48,656 - #48 int
INFO  00:16:48,656 - #48 a
INFO  00:16:48,656 - #36 ,
INFO  00:16:48,656 - #48 int
INFO  00:16:48,656 - #48 b
INFO  00:16:48,656 - #44 [
INFO  00:16:48,656 - #45 ]
INFO  00:16:48,656 - #36 ,
INFO  00:16:48,657 - #48 char
INFO  00:16:48,657 - #48 c
INFO  00:16:48,657 - #36 ,
INFO  00:16:48,657 - #48 char
INFO  00:16:48,657 - #48 d
INFO  00:16:48,657 - #44 [
INFO  00:16:48,657 - #45 ]
INFO  00:16:48,657 - #36 ,
INFO  00:16:48,657 - #48 bool
INFO  00:16:48,657 - #48 e
INFO  00:16:48,657 - #36 ,
INFO  00:16:48,658 - #48 bool
INFO  00:16:48,658 - #48 f
INFO  00:16:48,658 - #44 [
INFO  00:16:48,658 - #45 ]
INFO  00:16:48,658 - #43 )
INFO  00:16:48,658 - #40 {
INFO  00:16:48,658 - #48 func
INFO  00:16:48,658 - #42 (
INFO  00:16:48,662 - #48 a
INFO  00:16:48,663 - #36 ,
INFO  00:16:48,666 - #48 b
INFO  00:16:48,666 - #44 [
INFO  00:16:48,666 - #47 0
INFO  00:16:48,668 - #45 ]
INFO  00:16:48,668 - #43 )
INFO  00:16:48,668 - #38 ;
INFO  00:16:48,668 - #41 }
INFO  00:16:48,669 - #41 }
INFO  00:16:48,680 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassVoid(
         func
        ) [ReturnValueClassVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        NoStmt(
        ) [NoStmt]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      FormParams(
        FormalParamDecls(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  SingleFormalParamDecl(
                    FormalParamDeclClassNoArray(
                      Type(
                       int
                      ) [Type]
                     a
                    ) [FormalParamDeclClassNoArray]
                  ) [SingleFormalParamDecl]
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   b
                  ) [FormalParamDeclClassArray]
                ) [FormalParamDecls]
                FormalParamDeclClassNoArray(
                  Type(
                   char
                  ) [Type]
                 c
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               d
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             e
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
          FormalParamDeclClassArray(
            Type(
             bool
            ) [Type]
           f
          ) [FormalParamDeclClassArray]
        ) [FormalParamDecls]
      ) [FormParams]
      NoVarDeclList(
      ) [NoVarDeclList]
      Statements(
        NoStmt(
        ) [NoStmt]
        Assignment(
          DesignatorStatementClass(
            Designator(
             func
              NoOptionalDesignatorClass(
              ) [NoOptionalDesignatorClass]
            ) [Designator]
            DesignatorStatementActualParameters(
              Actuals(
                ActualParams(
                  ActualParam(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                               a
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              NoFactorOptional(
                              ) [NoFactorOptional]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [ActualParam]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                             b
                              OptionalDesignatorArray(
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                                LSquareClass(
                                ) [LSquareClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         0
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [OptionalDesignatorArray]
                            ) [Designator]
                            NoFactorOptional(
                            ) [NoFactorOptional]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [ActualParams]
              ) [Actuals]
            ) [DesignatorStatementActualParameters]
          ) [DesignatorStatementClass]
        ) [Assignment]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  00:16:48,681 - ===================================
INFO  00:16:49,356 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  00:16:49,356 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  00:17:53,156 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  00:17:53,156 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  00:17:53,156 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  00:17:53,156 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  00:17:53,156 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  00:17:53,156 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  00:17:53,157 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  00:17:53,157 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  00:17:53,157 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  00:17:53,157 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  00:17:53,157 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  00:17:53,157 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  00:17:53,157 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  00:17:53,157 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  00:17:53,157 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  00:17:53,157 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  00:17:53,157 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  00:17:53,157 - FUNCTION func WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  00:17:53,158 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 13
