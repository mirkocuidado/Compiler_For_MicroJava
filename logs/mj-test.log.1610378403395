INFO  16:19:01,596 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  16:19:01,668 - #2 program
INFO  16:19:01,668 - #48 MJProgram
INFO  16:19:01,668 - #48 int
INFO  16:19:01,670 - #48 a
INFO  16:19:01,670 - #36 ,
INFO  16:19:01,671 - #48 b
INFO  16:19:01,671 - #36 ,
INFO  16:19:01,671 - #48 c
INFO  16:19:01,671 - #36 ,
INFO  16:19:01,671 - #48 d
INFO  16:19:01,671 - #38 ;
INFO  16:19:01,671 - #9 const
INFO  16:19:01,671 - #48 int
INFO  16:19:01,672 - #48 y
INFO  16:19:01,672 - #24 =
INFO  16:19:01,672 - #47 3
INFO  16:19:01,672 - #38 ;
INFO  16:19:01,672 - #40 {
INFO  16:19:01,672 - #48 int
INFO  16:19:01,673 - #48 k
INFO  16:19:01,674 - #42 (
INFO  16:19:01,674 - #48 int
INFO  16:19:01,674 - #48 a
INFO  16:19:01,674 - #43 )
INFO  16:19:01,674 - #40 {
INFO  16:19:01,675 - #46 return
INFO  16:19:01,677 - #48 a
INFO  16:19:01,678 - #38 ;
INFO  16:19:01,682 - #41 }
INFO  16:19:01,682 - #48 char
INFO  16:19:01,683 - #48 s
INFO  16:19:01,684 - #42 (
INFO  16:19:01,684 - #43 )
INFO  16:19:01,684 - #40 {
INFO  16:19:01,684 - #46 return
INFO  16:19:01,684 - #49 c
INFO  16:19:01,684 - #38 ;
INFO  16:19:01,684 - #41 }
INFO  16:19:01,684 - #5 void
INFO  16:19:01,685 - #48 main
INFO  16:19:01,685 - #42 (
INFO  16:19:01,685 - #43 )
INFO  16:19:01,685 - #48 int
INFO  16:19:01,685 - #48 x
INFO  16:19:01,685 - #38 ;
INFO  16:19:01,685 - #48 char
INFO  16:19:01,685 - #48 z
INFO  16:19:01,685 - #38 ;
INFO  16:19:01,685 - #48 bool
INFO  16:19:01,685 - #48 p
INFO  16:19:01,685 - #38 ;
INFO  16:19:01,685 - #40 {
INFO  16:19:01,685 - #18 print
INFO  16:19:01,685 - #42 (
INFO  16:19:01,686 - #47 2
INFO  16:19:01,686 - #43 )
INFO  16:19:01,686 - #38 ;
INFO  16:19:01,686 - #48 x
INFO  16:19:01,686 - #24 =
INFO  16:19:01,687 - #48 k
INFO  16:19:01,687 - #42 (
INFO  16:19:01,688 - #47 33
INFO  16:19:01,688 - #43 )
INFO  16:19:01,688 - #38 ;
INFO  16:19:01,688 - #18 print
INFO  16:19:01,689 - #42 (
INFO  16:19:01,689 - #48 x
INFO  16:19:01,689 - #43 )
INFO  16:19:01,689 - #38 ;
INFO  16:19:01,689 - #48 x
INFO  16:19:01,689 - #24 =
INFO  16:19:01,689 - #48 y
INFO  16:19:01,689 - #38 ;
INFO  16:19:01,689 - #18 print
INFO  16:19:01,689 - #42 (
INFO  16:19:01,689 - #48 x
INFO  16:19:01,689 - #43 )
INFO  16:19:01,689 - #38 ;
INFO  16:19:01,689 - #18 print
INFO  16:19:01,689 - #42 (
INFO  16:19:01,689 - #48 y
INFO  16:19:01,689 - #43 )
INFO  16:19:01,689 - #38 ;
INFO  16:19:01,690 - #48 b
INFO  16:19:01,690 - #24 =
INFO  16:19:01,690 - #47 4
INFO  16:19:01,690 - #38 ;
INFO  16:19:01,690 - #18 print
INFO  16:19:01,690 - #42 (
INFO  16:19:01,690 - #48 b
INFO  16:19:01,690 - #43 )
INFO  16:19:01,690 - #38 ;
INFO  16:19:01,690 - #48 z
INFO  16:19:01,690 - #24 =
INFO  16:19:01,690 - #49 m
INFO  16:19:01,690 - #38 ;
INFO  16:19:01,690 - #18 print
INFO  16:19:01,690 - #42 (
INFO  16:19:01,690 - #48 z
INFO  16:19:01,690 - #43 )
INFO  16:19:01,690 - #38 ;
INFO  16:19:01,691 - #48 z
INFO  16:19:01,691 - #24 =
INFO  16:19:01,691 - #48 s
INFO  16:19:01,691 - #42 (
INFO  16:19:01,691 - #43 )
INFO  16:19:01,691 - #38 ;
INFO  16:19:01,691 - #18 print
INFO  16:19:01,692 - #42 (
INFO  16:19:01,692 - #48 z
INFO  16:19:01,692 - #43 )
INFO  16:19:01,692 - #38 ;
INFO  16:19:01,692 - #46 return
INFO  16:19:01,692 - #38 ;
INFO  16:19:01,692 - #41 }
INFO  16:19:01,692 - #41 }
INFO  16:19:01,700 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           k
          ) [ReturnValueClassNoVoid]
          FormParams(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        HelperClass(
                        ) [HelperClass]
                        Designator(
                         a
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        NoFactorOptional(
                        ) [NoFactorOptional]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           char
          ) [Type]
         s
        ) [ReturnValueClassNoVoid]
        NoFormParam(
        ) [NoFormParam]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    CharConst(
                     c
                    ) [CharConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 x
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               z
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           bool
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             p
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                NoStmt(
                                ) [NoStmt]
                                PrintStmt(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           2
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                  NoCommaNumberClass(
                                  ) [NoCommaNumberClass]
                                ) [PrintStmt]
                              ) [Statements]
                              Assignment(
                                DesignatorStatementClass(
                                  Designator(
                                   x
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  HelperClass(
                                  ) [HelperClass]
                                  DesignatorStatementOptionsClassAssignExpression(
                                    AssignOpClass(
                                      AssignOperationClass(
                                      ) [AssignOperationClass]
                                    ) [AssignOpClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              HelperClass(
                                              ) [HelperClass]
                                              Designator(
                                               k
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                              FactorOptionalParams(
                                                Actuals(
                                                  ActualParam(
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            NumberConst(
                                                             33
                                                            ) [NumberConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                  ) [ActualParam]
                                                ) [Actuals]
                                              ) [FactorOptionalParams]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [DesignatorStatementOptionsClassAssignExpression]
                                ) [DesignatorStatementClass]
                              ) [Assignment]
                            ) [Statements]
                            PrintStmt(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        HelperClass(
                                        ) [HelperClass]
                                        Designator(
                                         x
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                        NoFactorOptional(
                                        ) [NoFactorOptional]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                              NoCommaNumberClass(
                              ) [NoCommaNumberClass]
                            ) [PrintStmt]
                          ) [Statements]
                          Assignment(
                            DesignatorStatementClass(
                              Designator(
                               x
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              HelperClass(
                              ) [HelperClass]
                              DesignatorStatementOptionsClassAssignExpression(
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          HelperClass(
                                          ) [HelperClass]
                                          Designator(
                                           y
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                          NoFactorOptional(
                                          ) [NoFactorOptional]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [DesignatorStatementClass]
                          ) [Assignment]
                        ) [Statements]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    HelperClass(
                                    ) [HelperClass]
                                    Designator(
                                     x
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                    NoFactorOptional(
                                    ) [NoFactorOptional]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  HelperClass(
                                  ) [HelperClass]
                                  Designator(
                                   y
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  NoFactorOptional(
                                  ) [NoFactorOptional]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementClass(
                        Designator(
                         b
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        HelperClass(
                        ) [HelperClass]
                        DesignatorStatementOptionsClassAssignExpression(
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   4
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [DesignatorStatementClass]
                    ) [Assignment]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              HelperClass(
                              ) [HelperClass]
                              Designator(
                               b
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              NoFactorOptional(
                              ) [NoFactorOptional]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                Assignment(
                  DesignatorStatementClass(
                    Designator(
                     z
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    HelperClass(
                    ) [HelperClass]
                    DesignatorStatementOptionsClassAssignExpression(
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              CharConst(
                               m
                              ) [CharConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [DesignatorStatementClass]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          HelperClass(
                          ) [HelperClass]
                          Designator(
                           z
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          NoFactorOptional(
                          ) [NoFactorOptional]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            Assignment(
              DesignatorStatementClass(
                Designator(
                 z
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                HelperClass(
                ) [HelperClass]
                DesignatorStatementOptionsClassAssignExpression(
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            HelperClass(
                            ) [HelperClass]
                            Designator(
                             s
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                            FactorOptionalParams(
                              NoActuals(
                              ) [NoActuals]
                            ) [FactorOptionalParams]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [DesignatorStatementClass]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      HelperClass(
                      ) [HelperClass]
                      Designator(
                       z
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      NoFactorOptional(
                      ) [NoFactorOptional]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        ReturnNoExpr(
        ) [ReturnNoExpr]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  16:19:01,701 - ===================================
INFO  16:19:01,705 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  16:19:01,705 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  16:19:01,705 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  16:19:01,705 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  16:19:01,705 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  16:19:01,705 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  16:19:01,705 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  16:19:01,705 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  16:19:01,706 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  16:19:01,706 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  16:19:01,706 - METHOD BODY STARTING!
INFO  16:19:01,706 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  16:19:01,706 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  16:19:01,706 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  16:19:01,706 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  16:19:01,706 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  16:19:01,706 - METHOD BODY ENDING!
INFO  16:19:01,706 - END OF DEFINING FUNCTION k
INFO  16:19:01,706 - FUNCTION s WITH RETURN VALUE OF TYPE char ON LINE 9
INFO  16:19:01,706 - METHOD BODY STARTING!
INFO  16:19:01,706 - CONST CHAR c ON LINE 9
INFO  16:19:01,706 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:19:01,706 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:19:01,706 - SUCCESSFUL RETURN! TYPES: char AND char ! ON LINE 9
INFO  16:19:01,706 - METHOD BODY ENDING!
INFO  16:19:01,707 - END OF DEFINING FUNCTION s
INFO  16:19:01,707 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  16:19:01,707 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  16:19:01,707 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  16:19:01,707 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  16:19:01,707 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  16:19:01,707 - VARIABLE p IS BEING DEFINED! ON LINE 14
INFO  16:19:01,707 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 14
INFO  16:19:01,707 - METHOD BODY STARTING!
INFO  16:19:01,707 - CONST NUMBER 2 ON LINE 17
INFO  16:19:01,707 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  16:19:01,707 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  16:19:01,707 - PRINT FUNCTION CALL IN USE! ON LINE 17
INFO  16:19:01,707 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:19:01,707 - BEGINNING OF AN ASSIGNEMENT! ON LINE 19
INFO  16:19:01,707 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  16:19:01,707 - CONST NUMBER 33 ON LINE 19
INFO  16:19:01,707 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  16:19:01,707 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  16:19:01,707 - TYPE -> int <- AND -> int <- ON LINE 19
INFO  16:19:01,708 - WE ARE USING A VARIABLE OF TYPE int ON LINE 4
INFO  16:19:01,708 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  16:19:01,708 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  16:19:01,708 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 19
INFO  16:19:01,709 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:19:01,709 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,709 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  16:19:01,709 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:19:01,709 - BEGINNING OF AN ASSIGNEMENT! ON LINE 22
INFO  16:19:01,709 - CURRENT VARIABLE IN USE IS y AND IT IS OF TYPE int
INFO  16:19:01,709 - WE ARE USING A VARIABLE OF TYPE int ON LINE 4
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 4
INFO  16:19:01,709 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 22
INFO  16:19:01,709 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:19:01,709 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,709 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  16:19:01,709 - CURRENT VARIABLE IN USE IS y AND IT IS OF TYPE int
INFO  16:19:01,709 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,709 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,709 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  16:19:01,709 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  16:19:01,709 - BEGINNING OF AN ASSIGNEMENT! ON LINE 26
INFO  16:19:01,709 - CONST NUMBER 4 ON LINE 26
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  16:19:01,710 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 26
INFO  16:19:01,710 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  16:19:01,710 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,710 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  16:19:01,710 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  16:19:01,710 - BEGINNING OF AN ASSIGNEMENT! ON LINE 29
INFO  16:19:01,710 - CONST CHAR m ON LINE 29
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  16:19:01,710 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 29
INFO  16:19:01,710 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  16:19:01,710 - WE ARE USING A VARIABLE OF TYPE char ON LINE 7
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,710 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  16:19:01,710 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  16:19:01,710 - BEGINNING OF AN ASSIGNEMENT! ON LINE 32
INFO  16:19:01,710 - CURRENT VARIABLE IN USE IS s AND IT IS OF TYPE char
INFO  16:19:01,710 - WE ARE USING A VARIABLE OF TYPE char ON LINE 3
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 3
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 3
INFO  16:19:01,710 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 32
INFO  16:19:01,710 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  16:19:01,710 - WE ARE USING A VARIABLE OF TYPE char ON LINE 7
INFO  16:19:01,710 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,711 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  16:19:01,711 - PRINT FUNCTION CALL IN USE! ON LINE 7
INFO  16:19:01,711 - return; AND THE FUNCTION IS VOID!
INFO  16:19:01,711 - METHOD BODY ENDING!
INFO  16:19:01,711 - END OF DEFINING FUNCTION main
INFO  16:19:01,711 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  16:19:01,711 -  Deklarisanih promenljivih ima = 7
INFO  16:19:01,711 - ===================================
INFO  16:19:01,714 - Parsiranje uspesno zavrseno!
