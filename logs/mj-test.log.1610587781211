INFO  02:29:11,595 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  02:29:11,663 - #2 program
INFO  02:29:11,663 - #43 MJProgram
INFO  02:29:11,663 - #43 int
INFO  02:29:11,664 - #43 a
INFO  02:29:11,665 - #31 ,
INFO  02:29:11,665 - #43 b
INFO  02:29:11,665 - #31 ,
INFO  02:29:11,665 - #43 c
INFO  02:29:11,665 - #31 ,
INFO  02:29:11,666 - #43 d
INFO  02:29:11,666 - #33 ;
INFO  02:29:11,666 - #9 const
INFO  02:29:11,666 - #43 int
INFO  02:29:11,666 - #43 term
INFO  02:29:11,666 - #19 =
INFO  02:29:11,666 - #42 0
INFO  02:29:11,666 - #33 ;
INFO  02:29:11,667 - #9 const
INFO  02:29:11,667 - #43 int
INFO  02:29:11,667 - #43 y
INFO  02:29:11,667 - #19 =
INFO  02:29:11,667 - #42 3
INFO  02:29:11,667 - #33 ;
INFO  02:29:11,668 - #35 {
INFO  02:29:11,668 - #43 int
INFO  02:29:11,668 - #43 k
INFO  02:29:11,669 - #37 (
INFO  02:29:11,669 - #43 int
INFO  02:29:11,669 - #43 a
INFO  02:29:11,669 - #31 ,
INFO  02:29:11,669 - #43 int
INFO  02:29:11,669 - #43 b
INFO  02:29:11,669 - #38 )
INFO  02:29:11,669 - #35 {
INFO  02:29:11,670 - #41 return
INFO  02:29:11,672 - #43 b
INFO  02:29:11,673 - #33 ;
INFO  02:29:11,675 - #36 }
INFO  02:29:11,675 - #5 void
INFO  02:29:11,677 - #43 main
INFO  02:29:11,677 - #37 (
INFO  02:29:11,677 - #38 )
INFO  02:29:11,678 - #43 int
INFO  02:29:11,678 - #43 x
INFO  02:29:11,678 - #33 ;
INFO  02:29:11,678 - #43 bool
INFO  02:29:11,678 - #43 p
INFO  02:29:11,678 - #33 ;
INFO  02:29:11,678 - #43 bool
INFO  02:29:11,678 - #43 r
INFO  02:29:11,678 - #33 ;
INFO  02:29:11,678 - #43 bool
INFO  02:29:11,678 - #43 q
INFO  02:29:11,678 - #33 ;
INFO  02:29:11,679 - #35 {
INFO  02:29:11,679 - #43 p
INFO  02:29:11,679 - #19 =
INFO  02:29:11,679 - #45 false
INFO  02:29:11,680 - #33 ;
INFO  02:29:11,680 - #43 q
INFO  02:29:11,680 - #19 =
INFO  02:29:11,680 - #45 true
INFO  02:29:11,680 - #33 ;
INFO  02:29:11,681 - #43 r
INFO  02:29:11,681 - #19 =
INFO  02:29:11,681 - #45 true
INFO  02:29:11,681 - #33 ;
INFO  02:29:11,681 - #14 if
INFO  02:29:11,681 - #37 (
INFO  02:29:11,681 - #43 p
INFO  02:29:11,681 - #38 )
INFO  02:29:11,683 - #35 {
INFO  02:29:11,683 - #18 print
INFO  02:29:11,683 - #37 (
INFO  02:29:11,683 - #42 100
INFO  02:29:11,683 - #38 )
INFO  02:29:11,684 - #33 ;
INFO  02:29:11,684 - #14 if
INFO  02:29:11,684 - #37 (
INFO  02:29:11,684 - #43 q
INFO  02:29:11,684 - #38 )
INFO  02:29:11,685 - #35 {
INFO  02:29:11,685 - #18 print
INFO  02:29:11,685 - #37 (
INFO  02:29:11,685 - #42 101
INFO  02:29:11,685 - #38 )
INFO  02:29:11,685 - #33 ;
INFO  02:29:11,685 - #36 }
INFO  02:29:11,685 - #15 else
INFO  02:29:11,686 - #14 if
INFO  02:29:11,686 - #37 (
INFO  02:29:11,686 - #43 q
INFO  02:29:11,686 - #38 )
INFO  02:29:11,686 - #35 {
INFO  02:29:11,687 - #18 print
INFO  02:29:11,687 - #37 (
INFO  02:29:11,687 - #42 102
INFO  02:29:11,687 - #38 )
INFO  02:29:11,687 - #33 ;
INFO  02:29:11,687 - #36 }
INFO  02:29:11,687 - #15 else
INFO  02:29:11,687 - #35 {
INFO  02:29:11,687 - #18 print
INFO  02:29:11,687 - #37 (
INFO  02:29:11,687 - #42 103
INFO  02:29:11,687 - #38 )
INFO  02:29:11,687 - #33 ;
INFO  02:29:11,687 - #36 }
INFO  02:29:11,687 - #36 }
INFO  02:29:11,687 - #15 else
INFO  02:29:11,688 - #14 if
INFO  02:29:11,688 - #37 (
INFO  02:29:11,688 - #43 r
INFO  02:29:11,688 - #38 )
INFO  02:29:11,688 - #35 {
INFO  02:29:11,688 - #18 print
INFO  02:29:11,688 - #37 (
INFO  02:29:11,688 - #42 200
INFO  02:29:11,688 - #38 )
INFO  02:29:11,688 - #33 ;
INFO  02:29:11,688 - #14 if
INFO  02:29:11,688 - #37 (
INFO  02:29:11,688 - #43 q
INFO  02:29:11,688 - #38 )
INFO  02:29:11,688 - #35 {
INFO  02:29:11,688 - #18 print
INFO  02:29:11,688 - #37 (
INFO  02:29:11,688 - #42 201
INFO  02:29:11,689 - #38 )
INFO  02:29:11,689 - #33 ;
INFO  02:29:11,689 - #36 }
INFO  02:29:11,689 - #15 else
INFO  02:29:11,689 - #35 {
INFO  02:29:11,689 - #18 print
INFO  02:29:11,689 - #37 (
INFO  02:29:11,689 - #42 202
INFO  02:29:11,689 - #38 )
INFO  02:29:11,689 - #33 ;
INFO  02:29:11,689 - #36 }
INFO  02:29:11,689 - #36 }
INFO  02:29:11,689 - #15 else
INFO  02:29:11,689 - #35 {
INFO  02:29:11,689 - #18 print
INFO  02:29:11,689 - #37 (
INFO  02:29:11,689 - #42 300
INFO  02:29:11,689 - #38 )
INFO  02:29:11,689 - #33 ;
INFO  02:29:11,690 - #36 }
INFO  02:29:11,690 - #18 print
INFO  02:29:11,690 - #37 (
INFO  02:29:11,690 - #42 500
INFO  02:29:11,690 - #38 )
INFO  02:29:11,690 - #33 ;
INFO  02:29:11,690 - #43 p
INFO  02:29:11,690 - #19 =
INFO  02:29:11,690 - #45 true
INFO  02:29:11,690 - #33 ;
INFO  02:29:11,690 - #14 if
INFO  02:29:11,690 - #37 (
INFO  02:29:11,690 - #43 p
INFO  02:29:11,690 - #38 )
INFO  02:29:11,691 - #35 {
INFO  02:29:11,691 - #18 print
INFO  02:29:11,692 - #37 (
INFO  02:29:11,692 - #44 a
INFO  02:29:11,692 - #38 )
INFO  02:29:11,692 - #33 ;
INFO  02:29:11,692 - #36 }
INFO  02:29:11,692 - #36 }
INFO  02:29:11,693 - #36 }
INFO  02:29:11,704 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              NoVarDeclList(
              ) [NoVarDeclList]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   x
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 p
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             bool
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               r
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           bool
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             q
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           p
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                BooleanClassConstFactor(
                                 false
                                ) [BooleanClassConstFactor]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         q
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              BooleanClassConstFactor(
                               true
                              ) [BooleanClassConstFactor]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       r
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            BooleanClassConstFactor(
                             true
                            ) [BooleanClassConstFactor]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              IfStatement(
                IfConditionNoError(
                  ConditionClass(
                    CondTermClass(
                      CondFactClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   p
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                        NoCondFactOptionalClass(
                        ) [NoCondFactOptionalClass]
                      ) [CondFactClass]
                      NoCondTermOptionalClass(
                      ) [NoCondTermOptionalClass]
                    ) [CondTermClass]
                    NoConditionOptionalClass(
                    ) [NoConditionOptionalClass]
                  ) [ConditionClass]
                ) [IfConditionNoError]
                StatementStatement(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 100
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    IfStatement(
                      IfConditionNoError(
                        ConditionClass(
                          CondTermClass(
                            CondFactClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         q
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                              NoCondFactOptionalClass(
                              ) [NoCondFactOptionalClass]
                            ) [CondFactClass]
                            NoCondTermOptionalClass(
                            ) [NoCondTermOptionalClass]
                          ) [CondTermClass]
                          NoConditionOptionalClass(
                          ) [NoConditionOptionalClass]
                        ) [ConditionClass]
                      ) [IfConditionNoError]
                      StatementStatement(
                        Statements(
                          NoStmt(
                          ) [NoStmt]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     101
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                      ) [StatementStatement]
                      Empty(
                      ) [Empty]
                      YesOptionalStatement(
                        IfStatement(
                          IfConditionNoError(
                            ConditionClass(
                              CondTermClass(
                                CondFactClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             q
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                  NoCondFactOptionalClass(
                                  ) [NoCondFactOptionalClass]
                                ) [CondFactClass]
                                NoCondTermOptionalClass(
                                ) [NoCondTermOptionalClass]
                              ) [CondTermClass]
                              NoConditionOptionalClass(
                              ) [NoConditionOptionalClass]
                            ) [ConditionClass]
                          ) [IfConditionNoError]
                          StatementStatement(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              PrintStmt(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         102
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                                NoCommaNumberClass(
                                ) [NoCommaNumberClass]
                              ) [PrintStmt]
                            ) [Statements]
                          ) [StatementStatement]
                          Empty(
                          ) [Empty]
                          YesOptionalStatement(
                            StatementStatement(
                              Statements(
                                NoStmt(
                                ) [NoStmt]
                                PrintStmt(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           103
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                  NoCommaNumberClass(
                                  ) [NoCommaNumberClass]
                                ) [PrintStmt]
                              ) [Statements]
                            ) [StatementStatement]
                          ) [YesOptionalStatement]
                        ) [IfStatement]
                      ) [YesOptionalStatement]
                    ) [IfStatement]
                  ) [Statements]
                ) [StatementStatement]
                Empty(
                ) [Empty]
                YesOptionalStatement(
                  IfStatement(
                    IfConditionNoError(
                      ConditionClass(
                        CondTermClass(
                          CondFactClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       r
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                            NoCondFactOptionalClass(
                            ) [NoCondFactOptionalClass]
                          ) [CondFactClass]
                          NoCondTermOptionalClass(
                          ) [NoCondTermOptionalClass]
                        ) [CondTermClass]
                        NoConditionOptionalClass(
                        ) [NoConditionOptionalClass]
                      ) [ConditionClass]
                    ) [IfConditionNoError]
                    StatementStatement(
                      Statements(
                        Statements(
                          NoStmt(
                          ) [NoStmt]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     200
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                        IfStatement(
                          IfConditionNoError(
                            ConditionClass(
                              CondTermClass(
                                CondFactClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             q
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                  NoCondFactOptionalClass(
                                  ) [NoCondFactOptionalClass]
                                ) [CondFactClass]
                                NoCondTermOptionalClass(
                                ) [NoCondTermOptionalClass]
                              ) [CondTermClass]
                              NoConditionOptionalClass(
                              ) [NoConditionOptionalClass]
                            ) [ConditionClass]
                          ) [IfConditionNoError]
                          StatementStatement(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              PrintStmt(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         201
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                                NoCommaNumberClass(
                                ) [NoCommaNumberClass]
                              ) [PrintStmt]
                            ) [Statements]
                          ) [StatementStatement]
                          Empty(
                          ) [Empty]
                          YesOptionalStatement(
                            StatementStatement(
                              Statements(
                                NoStmt(
                                ) [NoStmt]
                                PrintStmt(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           202
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                  NoCommaNumberClass(
                                  ) [NoCommaNumberClass]
                                ) [PrintStmt]
                              ) [Statements]
                            ) [StatementStatement]
                          ) [YesOptionalStatement]
                        ) [IfStatement]
                      ) [Statements]
                    ) [StatementStatement]
                    Empty(
                    ) [Empty]
                    YesOptionalStatement(
                      StatementStatement(
                        Statements(
                          NoStmt(
                          ) [NoStmt]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     300
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                      ) [StatementStatement]
                    ) [YesOptionalStatement]
                  ) [IfStatement]
                ) [YesOptionalStatement]
              ) [IfStatement]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       500
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 p
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      BooleanClassConstFactor(
                       true
                      ) [BooleanClassConstFactor]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        IfStatement(
          IfConditionNoError(
            ConditionClass(
              CondTermClass(
                CondFactClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             p
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                  NoCondFactOptionalClass(
                  ) [NoCondFactOptionalClass]
                ) [CondFactClass]
                NoCondTermOptionalClass(
                ) [NoCondTermOptionalClass]
              ) [CondTermClass]
              NoConditionOptionalClass(
              ) [NoConditionOptionalClass]
            ) [ConditionClass]
          ) [IfConditionNoError]
          StatementStatement(
            Statements(
              NoStmt(
              ) [NoStmt]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        CharConst(
                         a
                        ) [CharConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
          ) [StatementStatement]
          Empty(
          ) [Empty]
          NoOptionalStatement(
          ) [NoOptionalStatement]
        ) [IfStatement]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:29:11,705 - ===================================
INFO  02:29:11,711 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  02:29:11,711 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  02:29:11,711 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  02:29:11,711 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  02:29:11,711 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  02:29:11,711 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  02:29:11,712 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  02:29:11,712 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  02:29:11,712 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  02:29:11,712 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  02:29:11,712 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  02:29:11,712 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  02:29:11,712 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  02:29:11,712 - METHOD BODY STARTING!
INFO  02:29:11,712 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  02:29:11,712 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  02:29:11,712 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:29:11,713 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:29:11,713 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  02:29:11,713 - METHOD BODY ENDING!
INFO  02:29:11,713 - END OF DEFINING FUNCTION k
INFO  02:29:11,713 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  02:29:11,713 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  02:29:11,713 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  02:29:11,713 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  02:29:11,713 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  02:29:11,713 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  02:29:11,713 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  02:29:11,713 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  02:29:11,713 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  02:29:11,714 - METHOD BODY STARTING!
INFO  02:29:11,714 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  02:29:11,714 - BEGINNING OF AN ASSIGNEMENT! ON LINE 64
INFO  02:29:11,714 - CONST CHAR false ON LINE 64
INFO  02:29:11,714 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  02:29:11,714 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  02:29:11,714 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 64
INFO  02:29:11,714 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  02:29:11,714 - BEGINNING OF AN ASSIGNEMENT! ON LINE 65
INFO  02:29:11,714 - CONST CHAR true ON LINE 65
INFO  02:29:11,714 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  02:29:11,714 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  02:29:11,714 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 65
INFO  02:29:11,714 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  02:29:11,715 - BEGINNING OF AN ASSIGNEMENT! ON LINE 66
INFO  02:29:11,715 - CONST CHAR true ON LINE 66
INFO  02:29:11,715 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  02:29:11,715 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  02:29:11,715 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 66
INFO  02:29:11,715 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  02:29:11,715 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 68
INFO  02:29:11,715 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  02:29:11,715 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  02:29:11,715 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 68
INFO  02:29:11,715 - CONST NUMBER 100 ON LINE 69
INFO  02:29:11,715 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  02:29:11,716 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  02:29:11,716 - PRINT FUNCTION CALL IN USE! ON LINE 69
INFO  02:29:11,716 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  02:29:11,717 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 70
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  02:29:11,717 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 70
INFO  02:29:11,717 - CONST NUMBER 101 ON LINE 71
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  02:29:11,717 - PRINT FUNCTION CALL IN USE! ON LINE 71
INFO  02:29:11,717 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  02:29:11,717 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 73
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  02:29:11,717 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 73
INFO  02:29:11,717 - CONST NUMBER 102 ON LINE 74
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  02:29:11,717 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  02:29:11,717 - PRINT FUNCTION CALL IN USE! ON LINE 74
INFO  02:29:11,717 - CONST NUMBER 103 ON LINE 77
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  02:29:11,718 - PRINT FUNCTION CALL IN USE! ON LINE 77
INFO  02:29:11,718 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  02:29:11,718 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 80
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  02:29:11,718 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 80
INFO  02:29:11,718 - CONST NUMBER 200 ON LINE 81
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 81
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 81
INFO  02:29:11,718 - PRINT FUNCTION CALL IN USE! ON LINE 81
INFO  02:29:11,718 - CURRENT VARIABLE IN USE IS q AND IT IS OF TYPE boolean
INFO  02:29:11,718 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 82
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 82
INFO  02:29:11,718 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 82
INFO  02:29:11,718 - CONST NUMBER 201 ON LINE 83
INFO  02:29:11,718 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 83
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 83
INFO  02:29:11,719 - PRINT FUNCTION CALL IN USE! ON LINE 83
INFO  02:29:11,719 - CONST NUMBER 202 ON LINE 86
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 86
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 86
INFO  02:29:11,719 - PRINT FUNCTION CALL IN USE! ON LINE 86
INFO  02:29:11,719 - CONST NUMBER 300 ON LINE 89
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 89
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 89
INFO  02:29:11,719 - PRINT FUNCTION CALL IN USE! ON LINE 89
INFO  02:29:11,719 - CONST NUMBER 500 ON LINE 92
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 92
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 92
INFO  02:29:11,719 - PRINT FUNCTION CALL IN USE! ON LINE 92
INFO  02:29:11,719 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  02:29:11,719 - BEGINNING OF AN ASSIGNEMENT! ON LINE 94
INFO  02:29:11,719 - CONST CHAR true ON LINE 94
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 94
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 94
INFO  02:29:11,719 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 94
INFO  02:29:11,719 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  02:29:11,719 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 95
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 95
INFO  02:29:11,719 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 95
INFO  02:29:11,720 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 95
INFO  02:29:11,720 - CONST CHAR a ON LINE 96
INFO  02:29:11,720 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 96
INFO  02:29:11,720 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 96
INFO  02:29:11,720 - PRINT FUNCTION CALL IN USE! ON LINE 96
INFO  02:29:11,720 - METHOD BODY ENDING!
INFO  02:29:11,720 - END OF DEFINING FUNCTION main
INFO  02:29:11,720 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  02:29:11,720 -  Deklarisanih promenljivih ima = 8
INFO  02:29:11,720 - ===================================
INFO  02:29:11,724 - Parsiranje uspesno zavrseno!
