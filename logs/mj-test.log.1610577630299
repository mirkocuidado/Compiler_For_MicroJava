INFO  23:03:12,466 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  23:03:12,551 - #2 program
INFO  23:03:12,551 - #43 MJProgram
INFO  23:03:12,551 - #43 int
INFO  23:03:12,553 - #43 a
INFO  23:03:12,554 - #31 ,
INFO  23:03:12,554 - #43 b
INFO  23:03:12,554 - #31 ,
INFO  23:03:12,554 - #43 c
INFO  23:03:12,555 - #31 ,
INFO  23:03:12,555 - #43 d
INFO  23:03:12,555 - #33 ;
INFO  23:03:12,555 - #9 const
INFO  23:03:12,555 - #43 int
INFO  23:03:12,555 - #43 term
INFO  23:03:12,556 - #19 =
INFO  23:03:12,556 - #42 0
INFO  23:03:12,556 - #33 ;
INFO  23:03:12,556 - #9 const
INFO  23:03:12,556 - #43 int
INFO  23:03:12,557 - #43 y
INFO  23:03:12,557 - #19 =
INFO  23:03:12,557 - #42 3
INFO  23:03:12,557 - #33 ;
INFO  23:03:12,557 - #35 {
INFO  23:03:12,557 - #43 int
INFO  23:03:12,558 - #43 k
INFO  23:03:12,558 - #37 (
INFO  23:03:12,558 - #43 int
INFO  23:03:12,559 - #43 a
INFO  23:03:12,559 - #31 ,
INFO  23:03:12,559 - #43 int
INFO  23:03:12,559 - #43 b
INFO  23:03:12,559 - #38 )
INFO  23:03:12,559 - #35 {
INFO  23:03:12,560 - #41 return
INFO  23:03:12,561 - #43 b
INFO  23:03:12,562 - #33 ;
INFO  23:03:12,565 - #36 }
INFO  23:03:12,566 - #5 void
INFO  23:03:12,567 - #43 main
INFO  23:03:12,568 - #37 (
INFO  23:03:12,568 - #38 )
INFO  23:03:12,568 - #43 int
INFO  23:03:12,568 - #43 x
INFO  23:03:12,568 - #33 ;
INFO  23:03:12,568 - #35 {
INFO  23:03:12,569 - #43 x
INFO  23:03:12,569 - #19 =
INFO  23:03:12,569 - #43 term
INFO  23:03:12,570 - #34 ?
INFO  23:03:12,570 - #43 k
INFO  23:03:12,573 - #37 (
INFO  23:03:12,574 - #42 10
INFO  23:03:12,574 - #31 ,
INFO  23:03:12,574 - #42 11
INFO  23:03:12,574 - #38 )
INFO  23:03:12,575 - #32 :
INFO  23:03:12,575 - #43 k
INFO  23:03:12,578 - #37 (
INFO  23:03:12,579 - #42 12
INFO  23:03:12,579 - #31 ,
INFO  23:03:12,579 - #42 13
INFO  23:03:12,579 - #38 )
INFO  23:03:12,579 - #33 ;
INFO  23:03:12,580 - #18 print
INFO  23:03:12,581 - #37 (
INFO  23:03:12,581 - #43 x
INFO  23:03:12,581 - #38 )
INFO  23:03:12,582 - #33 ;
INFO  23:03:12,583 - #36 }
INFO  23:03:12,583 - #36 }
INFO  23:03:12,593 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        NoVarDeclList(
        ) [NoVarDeclList]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             x
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassTwoClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           term
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                TernaryClass(
                ) [TernaryClass]
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      FactorOptionalParams(
                        Designator(
                          DesigIdent(
                           k
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        Actuals(
                          ActualParams(
                            ActualParam(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       10
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParam]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     11
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [ActualParams]
                        ) [Actuals]
                      ) [FactorOptionalParams]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                ColonClass(
                ) [ColonClass]
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      FactorOptionalParams(
                        Designator(
                          DesigIdent(
                           k
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        Actuals(
                          ActualParams(
                            ActualParam(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       12
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParam]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     13
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [ActualParams]
                        ) [Actuals]
                      ) [FactorOptionalParams]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassTwoClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       x
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  23:03:12,594 - ===================================
INFO  23:03:12,597 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  23:03:12,597 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  23:03:12,598 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  23:03:12,598 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  23:03:12,598 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  23:03:12,598 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  23:03:12,598 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  23:03:12,598 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  23:03:12,598 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  23:03:12,598 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  23:03:12,598 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  23:03:12,598 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  23:03:12,598 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  23:03:12,598 - METHOD BODY STARTING!
INFO  23:03:12,598 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  23:03:12,598 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  23:03:12,598 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:03:12,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:03:12,599 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  23:03:12,599 - METHOD BODY ENDING!
INFO  23:03:12,599 - END OF DEFINING FUNCTION k
INFO  23:03:12,599 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  23:03:12,599 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  23:03:12,599 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  23:03:12,599 - METHOD BODY STARTING!
INFO  23:03:12,599 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  23:03:12,599 - BEGINNING OF AN ASSIGNEMENT! ON LINE 59
INFO  23:03:12,599 - CURRENT VARIABLE IN USE IS term AND IT IS OF TYPE int
INFO  23:03:12,599 - WE ARE USING A VARIABLE OF TYPE int ON LINE 59
INFO  23:03:12,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,599 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  23:03:12,599 - CONST NUMBER 10 ON LINE 59
INFO  23:03:12,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,599 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - CONST NUMBER 11 ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:03:12,600 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  23:03:12,600 - CONST NUMBER 12 ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - CONST NUMBER 13 ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:03:12,600 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:03:12,600 - SUCCESSFUL TERNARY! TYPES: int AND int ! ON LINE 59
INFO  23:03:12,601 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 59
INFO  23:03:12,601 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  23:03:12,601 - WE ARE USING A VARIABLE OF TYPE int ON LINE 60
INFO  23:03:12,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  23:03:12,601 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  23:03:12,601 - PRINT FUNCTION CALL IN USE! ON LINE 60
INFO  23:03:12,601 - METHOD BODY ENDING!
INFO  23:03:12,601 - END OF DEFINING FUNCTION main
INFO  23:03:12,601 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  23:03:12,601 -  Deklarisanih promenljivih ima = 5
INFO  23:03:12,601 - ===================================
INFO  23:03:12,605 - Parsiranje uspesno zavrseno!
