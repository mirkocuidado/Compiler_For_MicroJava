INFO  01:26:36,334 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  01:26:36,459 - #2 program
INFO  01:26:36,459 - #44 p
INFO  01:26:36,460 - #44 int
INFO  01:26:36,461 - #44 buffer
INFO  01:26:36,463 - #39 [
INFO  01:26:36,463 - #40 ]
INFO  01:26:36,463 - #33 ;
INFO  01:26:36,463 - #44 int
INFO  01:26:36,464 - #44 niz
INFO  01:26:36,464 - #39 [
INFO  01:26:36,464 - #40 ]
INFO  01:26:36,464 - #33 ;
INFO  01:26:36,464 - #35 {
INFO  01:26:36,464 - #5 void
INFO  01:26:36,465 - #44 main
INFO  01:26:36,465 - #37 (
INFO  01:26:36,466 - #38 )
INFO  01:26:36,467 - #44 int
INFO  01:26:36,469 - #44 index
INFO  01:26:36,469 - #33 ;
INFO  01:26:36,469 - #44 int
INFO  01:26:36,478 - #44 sum
INFO  01:26:36,478 - #33 ;
INFO  01:26:36,479 - #44 int
INFO  01:26:36,479 - #44 buffer_Fake
INFO  01:26:36,479 - #39 [
INFO  01:26:36,479 - #40 ]
INFO  01:26:36,479 - #33 ;
INFO  01:26:36,479 - #44 int
INFO  01:26:36,479 - #44 aaa
INFO  01:26:36,479 - #39 [
INFO  01:26:36,479 - #40 ]
INFO  01:26:36,480 - #33 ;
INFO  01:26:36,480 - #44 int
INFO  01:26:36,480 - #44 niz
INFO  01:26:36,480 - #39 [
INFO  01:26:36,480 - #40 ]
INFO  01:26:36,480 - #33 ;
INFO  01:26:36,480 - #44 int
INFO  01:26:36,481 - #44 modif_one
INFO  01:26:36,481 - #33 ;
INFO  01:26:36,482 - #44 char
INFO  01:26:36,482 - #44 modif_two
INFO  01:26:36,482 - #39 [
INFO  01:26:36,483 - #40 ]
INFO  01:26:36,483 - #33 ;
INFO  01:26:36,483 - #44 char
INFO  01:26:36,483 - #44 modif_three
INFO  01:26:36,483 - #33 ;
INFO  01:26:36,483 - #44 char
INFO  01:26:36,484 - #44 modif_three_array
INFO  01:26:36,485 - #39 [
INFO  01:26:36,486 - #40 ]
INFO  01:26:36,486 - #33 ;
INFO  01:26:36,486 - #35 {
INFO  01:26:36,487 - #44 niz
INFO  01:26:36,490 - #19 =
INFO  01:26:36,492 - #16 new
INFO  01:26:36,493 - #44 int
INFO  01:26:36,493 - #39 [
INFO  01:26:36,494 - #43 10
INFO  01:26:36,494 - #40 ]
INFO  01:26:36,495 - #33 ;
INFO  01:26:36,496 - #44 niz
INFO  01:26:36,496 - #39 [
INFO  01:26:36,497 - #43 0
INFO  01:26:36,498 - #40 ]
INFO  01:26:36,498 - #19 =
INFO  01:26:36,499 - #43 1
INFO  01:26:36,499 - #33 ;
INFO  01:26:36,500 - #44 niz
INFO  01:26:36,500 - #39 [
INFO  01:26:36,500 - #43 1
INFO  01:26:36,500 - #40 ]
INFO  01:26:36,500 - #19 =
INFO  01:26:36,500 - #43 2
INFO  01:26:36,500 - #33 ;
INFO  01:26:36,500 - #44 niz
INFO  01:26:36,500 - #39 [
INFO  01:26:36,500 - #43 2
INFO  01:26:36,500 - #40 ]
INFO  01:26:36,500 - #19 =
INFO  01:26:36,501 - #43 3
INFO  01:26:36,501 - #33 ;
INFO  01:26:36,501 - #18 print
INFO  01:26:36,501 - #37 (
INFO  01:26:36,501 - #44 niz
INFO  01:26:36,501 - #39 [
INFO  01:26:36,501 - #43 10
INFO  01:26:36,501 - #40 ]
INFO  01:26:36,501 - #38 )
INFO  01:26:36,502 - #33 ;
INFO  01:26:36,502 - #18 print
INFO  01:26:36,502 - #37 (
INFO  01:26:36,502 - #44 niz
INFO  01:26:36,502 - #39 [
INFO  01:26:36,502 - #43 11
INFO  01:26:36,502 - #40 ]
INFO  01:26:36,502 - #38 )
INFO  01:26:36,503 - #33 ;
INFO  01:26:36,503 - #18 print
INFO  01:26:36,503 - #37 (
INFO  01:26:36,503 - #44 niz
INFO  01:26:36,503 - #39 [
INFO  01:26:36,503 - #43 12
INFO  01:26:36,503 - #40 ]
INFO  01:26:36,503 - #38 )
INFO  01:26:36,503 - #33 ;
INFO  01:26:36,503 - #36 }
INFO  01:26:36,503 - #36 }
INFO  01:26:36,517 - Program(
  ProgramName(
   p
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             buffer
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationVars(
      VarDeclClass(
        Type(
         int
        ) [Type]
        VarListSingle(
          VarClassArray(
           niz
          ) [VarClassArray]
        ) [VarListSingle]
      ) [VarDeclClass]
    ) [GroupDeclarationVars]
  ) [GroupDeclarations]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        NoVarDeclList(
                        ) [NoVarDeclList]
                        VarDeclClass(
                          Type(
                           int
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             index
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassNoArray(
                           sum
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         buffer_Fake
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassArray(
                       aaa
                      ) [VarClassArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassArray(
                     niz
                    ) [VarClassArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   modif_one
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 modif_two
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               modif_three
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           char
          ) [Type]
          VarListSingle(
            VarClassArray(
             modif_three_array
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           niz
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NewFactorClass(
                                  Type(
                                   int
                                  ) [Type]
                                  FactorOptionalSecondClass(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             10
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [FactorOptionalSecondClass]
                                ) [NewFactorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         niz
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   0
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          RSquareClass(
                          ) [RSquareClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               1
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       niz
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 1
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        RSquareClass(
                        ) [RSquareClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             2
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     niz
                    ) [DesigIdent]
                    OptionalDesignatorArray(
                      HelperClass(
                      ) [HelperClass]
                      LSquareClass(
                      ) [LSquareClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               2
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      RSquareClass(
                      ) [RSquareClass]
                    ) [OptionalDesignatorArray]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           3
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           niz
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     10
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            RSquareClass(
                            ) [RSquareClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         niz
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   11
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          RSquareClass(
                          ) [RSquareClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       niz
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 12
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        RSquareClass(
                        ) [RSquareClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  01:26:36,519 - ===================================
INFO  01:26:36,525 - PROGRAM NAME DETECTED => p ON LINE 1
INFO  01:26:36,526 - ARRAY VARIABLE buffer IS BEING DEFINED! ON LINE 3
INFO  01:26:36,526 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 3
INFO  01:26:36,526 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 4
INFO  01:26:36,526 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 4
INFO  01:26:36,526 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 8
INFO  01:26:36,526 - VARIABLE index IS BEING DEFINED! ON LINE 9
INFO  01:26:36,526 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 9
INFO  01:26:36,526 - VARIABLE sum IS BEING DEFINED! ON LINE 10
INFO  01:26:36,526 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 10
INFO  01:26:36,527 - ARRAY VARIABLE buffer_Fake IS BEING DEFINED! ON LINE 11
INFO  01:26:36,527 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 11
INFO  01:26:36,527 - ARRAY VARIABLE aaa IS BEING DEFINED! ON LINE 12
INFO  01:26:36,527 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  01:26:36,527 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 13
INFO  01:26:36,527 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 13
INFO  01:26:36,527 - VARIABLE modif_one IS BEING DEFINED! ON LINE 14
INFO  01:26:36,527 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 14
INFO  01:26:36,527 - ARRAY VARIABLE modif_two IS BEING DEFINED! ON LINE 15
INFO  01:26:36,527 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  01:26:36,527 - VARIABLE modif_three IS BEING DEFINED! ON LINE 16
INFO  01:26:36,527 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 16
INFO  01:26:36,527 - ARRAY VARIABLE modif_three_array IS BEING DEFINED! ON LINE 17
INFO  01:26:36,527 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 17
INFO  01:26:36,527 - METHOD BODY STARTING!
INFO  01:26:36,528 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  01:26:36,528 - BEGINNING OF AN ASSIGNEMENT! ON LINE 51
INFO  01:26:36,528 - CONST NUMBER 10 ON LINE 51
INFO  01:26:36,528 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  01:26:36,528 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  01:26:36,528 - USAGE OF KEYWORD NEW! ON LINE 51
INFO  01:26:36,528 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  01:26:36,528 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  01:26:36,528 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 51
INFO  01:26:36,528 - CONST NUMBER 0 ON LINE 52
INFO  01:26:36,528 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  01:26:36,528 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  01:26:36,529 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  01:26:36,529 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  01:26:36,529 - CONST NUMBER 1 ON LINE 52
INFO  01:26:36,529 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  01:26:36,529 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  01:26:36,529 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  01:26:36,529 - CONST NUMBER 1 ON LINE 53
INFO  01:26:36,529 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  01:26:36,529 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  01:26:36,529 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  01:26:36,529 - BEGINNING OF AN ASSIGNEMENT! ON LINE 53
INFO  01:26:36,529 - CONST NUMBER 2 ON LINE 53
INFO  01:26:36,529 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  01:26:36,529 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  01:26:36,530 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 53
INFO  01:26:36,530 - CONST NUMBER 2 ON LINE 54
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  01:26:36,531 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  01:26:36,531 - BEGINNING OF AN ASSIGNEMENT! ON LINE 54
INFO  01:26:36,531 - CONST NUMBER 3 ON LINE 54
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  01:26:36,531 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 54
INFO  01:26:36,531 - CONST NUMBER 10 ON LINE 56
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  01:26:36,531 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  01:26:36,531 - WE ARE USING AN ARRAY OF TYPE int ON LINE 56
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  01:26:36,531 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  01:26:36,531 - PRINT FUNCTION CALL IN USE! ON LINE 56
INFO  01:26:36,532 - CONST NUMBER 11 ON LINE 57
INFO  01:26:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  01:26:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  01:26:36,532 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  01:26:36,532 - WE ARE USING AN ARRAY OF TYPE int ON LINE 57
INFO  01:26:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  01:26:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  01:26:36,532 - PRINT FUNCTION CALL IN USE! ON LINE 57
INFO  01:26:36,532 - CONST NUMBER 12 ON LINE 58
INFO  01:26:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  01:26:36,532 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  01:26:36,532 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  01:26:36,532 - WE ARE USING AN ARRAY OF TYPE int ON LINE 58
INFO  01:26:36,533 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  01:26:36,533 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  01:26:36,533 - PRINT FUNCTION CALL IN USE! ON LINE 58
INFO  01:26:36,533 - METHOD BODY ENDING!
INFO  01:26:36,533 - END OF DEFINING FUNCTION main
INFO  01:26:36,533 - PROGRAM ENDED => p ON LINE 1
INFO  01:26:36,533 -  Deklarisanih promenljivih ima = 11
INFO  01:26:36,533 - ===================================
INFO  01:26:36,541 - Parsiranje uspesno zavrseno!
