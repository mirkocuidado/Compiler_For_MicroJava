INFO  14:32:13,271 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  14:32:13,397 - #2 program
INFO  14:32:13,397 - #43 MJProgram
INFO  14:32:13,397 - #43 int
INFO  14:32:13,400 - #43 a
INFO  14:32:13,402 - #31 ,
INFO  14:32:13,402 - #43 b
INFO  14:32:13,402 - #31 ,
INFO  14:32:13,403 - #43 c
INFO  14:32:13,403 - #31 ,
INFO  14:32:13,403 - #43 d
INFO  14:32:13,403 - #33 ;
INFO  14:32:13,403 - #9 const
INFO  14:32:13,404 - #43 int
INFO  14:32:13,404 - #43 term
INFO  14:32:13,405 - #19 =
INFO  14:32:13,405 - #42 0
INFO  14:32:13,405 - #33 ;
INFO  14:32:13,405 - #9 const
INFO  14:32:13,406 - #43 int
INFO  14:32:13,406 - #43 y
INFO  14:32:13,406 - #19 =
INFO  14:32:13,415 - #42 3
INFO  14:32:13,415 - #33 ;
INFO  14:32:13,415 - #35 {
INFO  14:32:13,415 - #43 int
INFO  14:32:13,417 - #43 k
INFO  14:32:13,417 - #37 (
INFO  14:32:13,417 - #43 int
INFO  14:32:13,417 - #43 a
INFO  14:32:13,417 - #31 ,
INFO  14:32:13,417 - #43 int
INFO  14:32:13,418 - #43 b
INFO  14:32:13,418 - #38 )
INFO  14:32:13,418 - #35 {
INFO  14:32:13,419 - #41 return
INFO  14:32:13,422 - #43 b
INFO  14:32:13,423 - #33 ;
INFO  14:32:13,429 - #36 }
INFO  14:32:13,429 - #5 void
INFO  14:32:13,433 - #43 main
INFO  14:32:13,433 - #37 (
INFO  14:32:13,433 - #38 )
INFO  14:32:13,435 - #43 int
INFO  14:32:13,435 - #43 x
INFO  14:32:13,435 - #33 ;
INFO  14:32:13,435 - #43 bool
INFO  14:32:13,435 - #43 p
INFO  14:32:13,435 - #33 ;
INFO  14:32:13,435 - #43 bool
INFO  14:32:13,436 - #43 r
INFO  14:32:13,436 - #33 ;
INFO  14:32:13,436 - #43 bool
INFO  14:32:13,436 - #43 q
INFO  14:32:13,436 - #33 ;
INFO  14:32:13,436 - #43 int
INFO  14:32:13,436 - #43 dd
INFO  14:32:13,436 - #33 ;
INFO  14:32:13,436 - #43 int
INFO  14:32:13,436 - #43 ee
INFO  14:32:13,436 - #33 ;
INFO  14:32:13,436 - #43 int
INFO  14:32:13,437 - #43 ff
INFO  14:32:13,437 - #33 ;
INFO  14:32:13,437 - #43 int
INFO  14:32:13,437 - #43 gg
INFO  14:32:13,437 - #33 ;
INFO  14:32:13,437 - #43 char
INFO  14:32:13,437 - #43 hh
INFO  14:32:13,437 - #33 ;
INFO  14:32:13,437 - #43 int
INFO  14:32:13,437 - #43 ii
INFO  14:32:13,437 - #33 ;
INFO  14:32:13,438 - #35 {
INFO  14:32:13,438 - #17 read
INFO  14:32:13,438 - #37 (
INFO  14:32:13,438 - #43 hh
INFO  14:32:13,438 - #38 )
INFO  14:32:13,438 - #33 ;
INFO  14:32:13,438 - #18 print
INFO  14:32:13,438 - #37 (
INFO  14:32:13,438 - #43 hh
INFO  14:32:13,438 - #38 )
INFO  14:32:13,440 - #33 ;
INFO  14:32:13,440 - #43 r
INFO  14:32:13,440 - #19 =
INFO  14:32:13,440 - #45 true
INFO  14:32:13,442 - #33 ;
INFO  14:32:13,443 - #12 do
INFO  14:32:13,443 - #35 {
INFO  14:32:13,445 - #18 print
INFO  14:32:13,445 - #37 (
INFO  14:32:13,445 - #42 1
INFO  14:32:13,446 - #38 )
INFO  14:32:13,446 - #33 ;
INFO  14:32:13,446 - #12 do
INFO  14:32:13,446 - #35 {
INFO  14:32:13,446 - #18 print
INFO  14:32:13,446 - #37 (
INFO  14:32:13,446 - #42 2
INFO  14:32:13,447 - #38 )
INFO  14:32:13,447 - #33 ;
INFO  14:32:13,447 - #43 r
INFO  14:32:13,447 - #19 =
INFO  14:32:13,447 - #45 false
INFO  14:32:13,447 - #33 ;
INFO  14:32:13,447 - #36 }
INFO  14:32:13,447 - #13 while
INFO  14:32:13,448 - #37 (
INFO  14:32:13,448 - #43 r
INFO  14:32:13,450 - #38 )
INFO  14:32:13,454 - #33 ;
INFO  14:32:13,456 - #3 break
INFO  14:32:13,457 - #33 ;
INFO  14:32:13,459 - #36 }
INFO  14:32:13,459 - #13 while
INFO  14:32:13,459 - #37 (
INFO  14:32:13,459 - #43 r
INFO  14:32:13,459 - #38 )
INFO  14:32:13,459 - #33 ;
INFO  14:32:13,459 - #43 x
INFO  14:32:13,460 - #19 =
INFO  14:32:13,460 - #42 2
INFO  14:32:13,460 - #33 ;
INFO  14:32:13,460 - #18 print
INFO  14:32:13,460 - #37 (
INFO  14:32:13,460 - #42 3
INFO  14:32:13,460 - #38 )
INFO  14:32:13,460 - #33 ;
INFO  14:32:13,461 - #18 print
INFO  14:32:13,461 - #37 (
INFO  14:32:13,461 - #44 a
INFO  14:32:13,461 - #38 )
INFO  14:32:13,461 - #33 ;
INFO  14:32:13,462 - #36 }
INFO  14:32:13,462 - #36 }
INFO  14:32:13,475 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          NoVarDeclList(
                          ) [NoVarDeclList]
                          VarDeclClass(
                            Type(
                             int
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               x
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             p
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         bool
                        ) [Type]
                        VarListSingle(
                          VarClassNoArray(
                           r
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       bool
                      ) [Type]
                      VarListSingle(
                        VarClassNoArray(
                         q
                        ) [VarClassNoArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    ReadClass(
                      Designator(
                        DesigIdent(
                         hh
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [ReadClass]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 hh
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       r
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            BooleanClassConstFactor(
                             true
                            ) [BooleanClassConstFactor]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              DoWhileStatement(
                DoClass(
                ) [DoClass]
                StatementStatement(
                  Statements(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   1
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      DoWhileStatement(
                        DoClass(
                        ) [DoClass]
                        StatementStatement(
                          Statements(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              PrintStmt(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         2
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                                NoCommaNumberClass(
                                ) [NoCommaNumberClass]
                              ) [PrintStmt]
                            ) [Statements]
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                  DesigIdent(
                                   r
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        BooleanClassConstFactor(
                                         false
                                        ) [BooleanClassConstFactor]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [Statements]
                        ) [StatementStatement]
                        LParenClass(
                        ) [LParenClass]
                        ConditionClass(
                          CondTermClass(
                            CondFactClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         r
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                              NoCondFactOptionalClass(
                              ) [NoCondFactOptionalClass]
                            ) [CondFactClass]
                            NoCondTermOptionalClass(
                            ) [NoCondTermOptionalClass]
                          ) [CondTermClass]
                          NoConditionOptionalClass(
                          ) [NoConditionOptionalClass]
                        ) [ConditionClass]
                        RParenClass(
                        ) [RParenClass]
                      ) [DoWhileStatement]
                    ) [Statements]
                    BreakClass(
                      BreakKeyWordClass(
                      ) [BreakKeyWordClass]
                    ) [BreakClass]
                  ) [Statements]
                ) [StatementStatement]
                LParenClass(
                ) [LParenClass]
                ConditionClass(
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 r
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      NoCondFactOptionalClass(
                      ) [NoCondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                ) [ConditionClass]
                RParenClass(
                ) [RParenClass]
              ) [DoWhileStatement]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   x
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         2
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    NumberConst(
                     3
                    ) [NumberConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  CharConst(
                   a
                  ) [CharConst]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:32:13,477 - ===================================
INFO  14:32:13,483 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  14:32:13,483 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  14:32:13,483 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  14:32:13,483 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  14:32:13,483 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  14:32:13,483 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  14:32:13,484 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  14:32:13,484 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  14:32:13,484 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  14:32:13,484 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  14:32:13,484 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  14:32:13,484 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  14:32:13,484 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  14:32:13,484 - METHOD BODY STARTING!
INFO  14:32:13,485 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  14:32:13,485 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  14:32:13,485 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  14:32:13,485 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  14:32:13,485 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  14:32:13,485 - METHOD BODY ENDING!
INFO  14:32:13,485 - END OF DEFINING FUNCTION k
INFO  14:32:13,485 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  14:32:13,486 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  14:32:13,486 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  14:32:13,486 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  14:32:13,486 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  14:32:13,486 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  14:32:13,487 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  14:32:13,487 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  14:32:13,487 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  14:32:13,487 - VARIABLE dd IS BEING DEFINED! ON LINE 32
INFO  14:32:13,488 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  14:32:13,488 - VARIABLE ee IS BEING DEFINED! ON LINE 33
INFO  14:32:13,488 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  14:32:13,488 - VARIABLE ff IS BEING DEFINED! ON LINE 34
INFO  14:32:13,488 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  14:32:13,488 - VARIABLE gg IS BEING DEFINED! ON LINE 35
INFO  14:32:13,488 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  14:32:13,488 - VARIABLE hh IS BEING DEFINED! ON LINE 36
INFO  14:32:13,488 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 36
INFO  14:32:13,488 - VARIABLE ii IS BEING DEFINED! ON LINE 37
INFO  14:32:13,488 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 37
INFO  14:32:13,488 - METHOD BODY STARTING!
INFO  14:32:13,489 - CURRENT VARIABLE IN USE IS hh AND IT IS OF TYPE char
INFO  14:32:13,489 - CURRENT VARIABLE IN USE IS hh AND IT IS OF TYPE char
INFO  14:32:13,489 - WE ARE USING A VARIABLE OF TYPE char ON LINE 60
INFO  14:32:13,489 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  14:32:13,489 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  14:32:13,489 - PRINT FUNCTION CALL IN USE! ON LINE 60
INFO  14:32:13,489 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  14:32:13,489 - BEGINNING OF AN ASSIGNEMENT! ON LINE 63
INFO  14:32:13,489 - CONST CHAR true ON LINE 63
INFO  14:32:13,489 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  14:32:13,489 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  14:32:13,490 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 63
INFO  14:32:13,490 - BEGINNING OF A DO...WHILE LOOP!
INFO  14:32:13,490 - CONST NUMBER 1 ON LINE 66
INFO  14:32:13,490 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  14:32:13,490 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  14:32:13,490 - PRINT FUNCTION CALL IN USE! ON LINE 66
INFO  14:32:13,491 - BEGINNING OF A DO...WHILE LOOP!
INFO  14:32:13,491 - CONST NUMBER 2 ON LINE 69
INFO  14:32:13,491 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  14:32:13,491 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  14:32:13,491 - PRINT FUNCTION CALL IN USE! ON LINE 69
INFO  14:32:13,491 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  14:32:13,491 - BEGINNING OF AN ASSIGNEMENT! ON LINE 70
INFO  14:32:13,491 - CONST CHAR false ON LINE 70
INFO  14:32:13,491 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  14:32:13,491 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  14:32:13,492 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 70
INFO  14:32:13,492 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  14:32:13,492 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 72
INFO  14:32:13,492 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  14:32:13,492 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 72
INFO  14:32:13,492 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 72
INFO  14:32:13,492 - ENDING OF A DO...WHILE LOOP! ON LINE 68
INFO  14:32:13,493 - USING BREAK KEYWORD!
INFO  14:32:13,493 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  14:32:13,493 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 75
INFO  14:32:13,493 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  14:32:13,493 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  14:32:13,493 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 75
INFO  14:32:13,493 - ENDING OF A DO...WHILE LOOP! ON LINE 65
INFO  14:32:13,493 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  14:32:13,493 - BEGINNING OF AN ASSIGNEMENT! ON LINE 77
INFO  14:32:13,493 - CONST NUMBER 2 ON LINE 77
INFO  14:32:13,494 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  14:32:13,494 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 77
INFO  14:32:13,494 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 77
INFO  14:32:13,494 - CONST NUMBER 3 ON LINE 78
INFO  14:32:13,494 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 78
INFO  14:32:13,494 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 78
INFO  14:32:13,494 - PRINT FUNCTION CALL IN USE! ON LINE 78
INFO  14:32:13,494 - CONST CHAR a ON LINE 158
INFO  14:32:13,494 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 158
INFO  14:32:13,494 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 158
INFO  14:32:13,494 - PRINT FUNCTION CALL IN USE! ON LINE 158
INFO  14:32:13,494 - METHOD BODY ENDING!
INFO  14:32:13,494 - END OF DEFINING FUNCTION main
INFO  14:32:13,495 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  14:32:13,495 -  Deklarisanih promenljivih ima = 14
INFO  14:32:13,495 - ===================================
INFO  14:32:13,504 - Parsiranje uspesno zavrseno!
