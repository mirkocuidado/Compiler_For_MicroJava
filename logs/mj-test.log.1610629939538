INFO  14:10:13,669 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  14:10:13,781 - #2 program
INFO  14:10:13,782 - #43 MJProgram
INFO  14:10:13,782 - #43 int
INFO  14:10:13,785 - #43 a
INFO  14:10:13,786 - #31 ,
INFO  14:10:13,787 - #43 b
INFO  14:10:13,787 - #31 ,
INFO  14:10:13,787 - #43 c
INFO  14:10:13,787 - #31 ,
INFO  14:10:13,787 - #43 d
INFO  14:10:13,788 - #33 ;
INFO  14:10:13,788 - #9 const
INFO  14:10:13,788 - #43 int
INFO  14:10:13,789 - #43 term
INFO  14:10:13,789 - #19 =
INFO  14:10:13,789 - #42 0
INFO  14:10:13,789 - #33 ;
INFO  14:10:13,790 - #9 const
INFO  14:10:13,790 - #43 int
INFO  14:10:13,791 - #43 y
INFO  14:10:13,791 - #19 =
INFO  14:10:13,799 - #42 3
INFO  14:10:13,799 - #33 ;
INFO  14:10:13,799 - #35 {
INFO  14:10:13,799 - #43 int
INFO  14:10:13,801 - #43 k
INFO  14:10:13,801 - #37 (
INFO  14:10:13,801 - #43 int
INFO  14:10:13,801 - #43 a
INFO  14:10:13,801 - #31 ,
INFO  14:10:13,802 - #43 int
INFO  14:10:13,802 - #43 b
INFO  14:10:13,802 - #38 )
INFO  14:10:13,802 - #35 {
INFO  14:10:13,803 - #41 return
INFO  14:10:13,805 - #43 b
INFO  14:10:13,807 - #33 ;
INFO  14:10:13,811 - #36 }
INFO  14:10:13,812 - #5 void
INFO  14:10:13,816 - #43 main
INFO  14:10:13,816 - #37 (
INFO  14:10:13,816 - #38 )
INFO  14:10:13,817 - #43 int
INFO  14:10:13,818 - #43 x
INFO  14:10:13,818 - #33 ;
INFO  14:10:13,818 - #43 bool
INFO  14:10:13,818 - #43 p
INFO  14:10:13,818 - #33 ;
INFO  14:10:13,818 - #43 bool
INFO  14:10:13,818 - #43 r
INFO  14:10:13,818 - #33 ;
INFO  14:10:13,818 - #43 bool
INFO  14:10:13,818 - #43 q
INFO  14:10:13,819 - #33 ;
INFO  14:10:13,819 - #43 int
INFO  14:10:13,819 - #43 dd
INFO  14:10:13,819 - #33 ;
INFO  14:10:13,819 - #43 int
INFO  14:10:13,819 - #43 ee
INFO  14:10:13,819 - #33 ;
INFO  14:10:13,819 - #43 int
INFO  14:10:13,819 - #43 ff
INFO  14:10:13,819 - #33 ;
INFO  14:10:13,820 - #43 int
INFO  14:10:13,820 - #43 gg
INFO  14:10:13,820 - #33 ;
INFO  14:10:13,820 - #43 int
INFO  14:10:13,820 - #43 hh
INFO  14:10:13,820 - #33 ;
INFO  14:10:13,820 - #43 int
INFO  14:10:13,820 - #43 ii
INFO  14:10:13,820 - #33 ;
INFO  14:10:13,820 - #35 {
INFO  14:10:13,821 - #43 r
INFO  14:10:13,821 - #19 =
INFO  14:10:13,821 - #45 true
INFO  14:10:13,823 - #33 ;
INFO  14:10:13,823 - #12 do
INFO  14:10:13,824 - #35 {
INFO  14:10:13,825 - #18 print
INFO  14:10:13,826 - #37 (
INFO  14:10:13,826 - #42 1
INFO  14:10:13,826 - #38 )
INFO  14:10:13,827 - #33 ;
INFO  14:10:13,827 - #3 break
INFO  14:10:13,827 - #33 ;
INFO  14:10:13,829 - #36 }
INFO  14:10:13,830 - #13 while
INFO  14:10:13,830 - #37 (
INFO  14:10:13,830 - #43 r
INFO  14:10:13,833 - #38 )
INFO  14:10:13,836 - #33 ;
INFO  14:10:13,838 - #43 x
INFO  14:10:13,839 - #19 =
INFO  14:10:13,839 - #42 2
INFO  14:10:13,839 - #33 ;
INFO  14:10:13,840 - #18 print
INFO  14:10:13,840 - #37 (
INFO  14:10:13,840 - #44 a
INFO  14:10:13,840 - #38 )
INFO  14:10:13,840 - #33 ;
INFO  14:10:13,841 - #36 }
INFO  14:10:13,841 - #36 }
INFO  14:10:13,856 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          NoVarDeclList(
                          ) [NoVarDeclList]
                          VarDeclClass(
                            Type(
                             int
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               x
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             p
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         bool
                        ) [Type]
                        VarListSingle(
                          VarClassNoArray(
                           r
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       bool
                      ) [Type]
                      VarListSingle(
                        VarClassNoArray(
                         q
                        ) [VarClassNoArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     r
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          BooleanClassConstFactor(
                           true
                          ) [BooleanClassConstFactor]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               1
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                  BreakClass(
                    BreakKeyWordClass(
                    ) [BreakKeyWordClass]
                  ) [BreakClass]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               r
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    NoCondFactOptionalClass(
                    ) [NoCondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       2
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  CharConst(
                   a
                  ) [CharConst]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:10:13,857 - ===================================
INFO  14:10:13,863 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  14:10:13,863 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  14:10:13,864 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  14:10:13,864 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  14:10:13,864 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  14:10:13,864 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  14:10:13,864 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  14:10:13,864 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  14:10:13,865 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  14:10:13,865 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  14:10:13,865 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  14:10:13,865 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  14:10:13,865 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  14:10:13,865 - METHOD BODY STARTING!
INFO  14:10:13,865 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  14:10:13,866 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  14:10:13,866 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  14:10:13,866 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  14:10:13,866 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  14:10:13,866 - METHOD BODY ENDING!
INFO  14:10:13,866 - END OF DEFINING FUNCTION k
INFO  14:10:13,866 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  14:10:13,867 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  14:10:13,867 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  14:10:13,867 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  14:10:13,867 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  14:10:13,867 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  14:10:13,867 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  14:10:13,867 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  14:10:13,867 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  14:10:13,867 - VARIABLE dd IS BEING DEFINED! ON LINE 32
INFO  14:10:13,868 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  14:10:13,868 - VARIABLE ee IS BEING DEFINED! ON LINE 33
INFO  14:10:13,868 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  14:10:13,868 - VARIABLE ff IS BEING DEFINED! ON LINE 34
INFO  14:10:13,869 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  14:10:13,869 - VARIABLE gg IS BEING DEFINED! ON LINE 35
INFO  14:10:13,869 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  14:10:13,869 - VARIABLE hh IS BEING DEFINED! ON LINE 36
INFO  14:10:13,869 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 36
INFO  14:10:13,869 - VARIABLE ii IS BEING DEFINED! ON LINE 37
INFO  14:10:13,869 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 37
INFO  14:10:13,869 - METHOD BODY STARTING!
INFO  14:10:13,869 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  14:10:13,869 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  14:10:13,869 - CONST CHAR true ON LINE 58
INFO  14:10:13,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  14:10:13,869 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  14:10:13,870 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 58
INFO  14:10:13,870 - BEGINNING OF A DO...WHILE LOOP!
INFO  14:10:13,870 - CONST NUMBER 1 ON LINE 61
INFO  14:10:13,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  14:10:13,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  14:10:13,870 - PRINT FUNCTION CALL IN USE! ON LINE 61
INFO  14:10:13,870 - USING BREAK KEYWORD!
INFO  14:10:13,870 - CURRENT VARIABLE IN USE IS r AND IT IS OF TYPE boolean
INFO  14:10:13,870 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 63
INFO  14:10:13,870 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  14:10:13,871 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  14:10:13,872 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 63
INFO  14:10:13,872 - ENDING OF A DO...WHILE LOOP! ON LINE 60
INFO  14:10:13,872 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  14:10:13,872 - BEGINNING OF AN ASSIGNEMENT! ON LINE 65
INFO  14:10:13,872 - CONST NUMBER 2 ON LINE 65
INFO  14:10:13,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  14:10:13,872 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  14:10:13,873 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 65
INFO  14:10:13,873 - CONST CHAR a ON LINE 145
INFO  14:10:13,873 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 145
INFO  14:10:13,873 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 145
INFO  14:10:13,873 - PRINT FUNCTION CALL IN USE! ON LINE 145
INFO  14:10:13,873 - METHOD BODY ENDING!
INFO  14:10:13,873 - END OF DEFINING FUNCTION main
INFO  14:10:13,873 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  14:10:13,873 -  Deklarisanih promenljivih ima = 14
INFO  14:10:13,873 - ===================================
INFO  14:10:13,880 - Parsiranje uspesno zavrseno!
