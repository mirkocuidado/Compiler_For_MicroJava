INFO  15:50:54,019 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  15:50:54,090 - #2 program
INFO  15:50:54,091 - #43 MJProgram
INFO  15:50:54,091 - #43 int
INFO  15:50:54,092 - #43 a
INFO  15:50:54,093 - #31 ,
INFO  15:50:54,093 - #43 b
INFO  15:50:54,093 - #31 ,
INFO  15:50:54,093 - #43 c
INFO  15:50:54,093 - #31 ,
INFO  15:50:54,093 - #43 d
INFO  15:50:54,093 - #33 ;
INFO  15:50:54,093 - #9 const
INFO  15:50:54,094 - #43 int
INFO  15:50:54,094 - #43 term
INFO  15:50:54,094 - #19 =
INFO  15:50:54,094 - #42 0
INFO  15:50:54,094 - #33 ;
INFO  15:50:54,094 - #9 const
INFO  15:50:54,095 - #43 int
INFO  15:50:54,095 - #43 y
INFO  15:50:54,095 - #19 =
INFO  15:50:54,104 - #42 3
INFO  15:50:54,104 - #33 ;
INFO  15:50:54,104 - #35 {
INFO  15:50:54,104 - #43 int
INFO  15:50:54,105 - #43 k
INFO  15:50:54,105 - #37 (
INFO  15:50:54,106 - #43 int
INFO  15:50:54,106 - #43 a
INFO  15:50:54,106 - #31 ,
INFO  15:50:54,106 - #43 int
INFO  15:50:54,106 - #43 b
INFO  15:50:54,106 - #38 )
INFO  15:50:54,106 - #35 {
INFO  15:50:54,107 - #41 return
INFO  15:50:54,109 - #43 b
INFO  15:50:54,110 - #33 ;
INFO  15:50:54,113 - #36 }
INFO  15:50:54,113 - #5 void
INFO  15:50:54,115 - #43 main
INFO  15:50:54,115 - #37 (
INFO  15:50:54,115 - #38 )
INFO  15:50:54,116 - #43 int
INFO  15:50:54,116 - #43 x
INFO  15:50:54,116 - #33 ;
INFO  15:50:54,116 - #43 bool
INFO  15:50:54,117 - #43 p
INFO  15:50:54,117 - #33 ;
INFO  15:50:54,117 - #43 bool
INFO  15:50:54,117 - #43 r
INFO  15:50:54,117 - #33 ;
INFO  15:50:54,117 - #43 bool
INFO  15:50:54,117 - #43 q
INFO  15:50:54,117 - #33 ;
INFO  15:50:54,117 - #43 int
INFO  15:50:54,117 - #43 dd
INFO  15:50:54,117 - #33 ;
INFO  15:50:54,117 - #43 int
INFO  15:50:54,117 - #43 ee
INFO  15:50:54,118 - #33 ;
INFO  15:50:54,118 - #43 int
INFO  15:50:54,118 - #43 ff
INFO  15:50:54,118 - #33 ;
INFO  15:50:54,118 - #43 int
INFO  15:50:54,118 - #43 gg
INFO  15:50:54,118 - #33 ;
INFO  15:50:54,118 - #43 char
INFO  15:50:54,118 - #43 hh
INFO  15:50:54,118 - #33 ;
INFO  15:50:54,118 - #43 int
INFO  15:50:54,118 - #43 ii
INFO  15:50:54,118 - #33 ;
INFO  15:50:54,118 - #35 {
INFO  15:50:54,119 - #43 x
INFO  15:50:54,119 - #19 =
INFO  15:50:54,119 - #42 3
INFO  15:50:54,120 - #33 ;
INFO  15:50:54,120 - #43 dd
INFO  15:50:54,120 - #19 =
INFO  15:50:54,120 - #42 6
INFO  15:50:54,121 - #33 ;
INFO  15:50:54,121 - #14 if
INFO  15:50:54,121 - #37 (
INFO  15:50:54,121 - #43 x
INFO  15:50:54,121 - #20 ==
INFO  15:50:54,121 - #43 dd
INFO  15:50:54,122 - #38 )
INFO  15:50:54,124 - #35 {
INFO  15:50:54,124 - #18 print
INFO  15:50:54,124 - #37 (
INFO  15:50:54,124 - #42 2
INFO  15:50:54,124 - #38 )
INFO  15:50:54,125 - #33 ;
INFO  15:50:54,125 - #36 }
INFO  15:50:54,125 - #15 else
INFO  15:50:54,126 - #35 {
INFO  15:50:54,126 - #18 print
INFO  15:50:54,126 - #37 (
INFO  15:50:54,126 - #42 3
INFO  15:50:54,126 - #38 )
INFO  15:50:54,127 - #33 ;
INFO  15:50:54,127 - #36 }
INFO  15:50:54,128 - #36 }
INFO  15:50:54,128 - #36 }
INFO  15:50:54,137 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          NoVarDeclList(
                          ) [NoVarDeclList]
                          VarDeclClass(
                            Type(
                             int
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               x
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             p
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         bool
                        ) [Type]
                        VarListSingle(
                          VarClassNoArray(
                           r
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       bool
                      ) [Type]
                      VarListSingle(
                        VarClassNoArray(
                         q
                        ) [VarClassNoArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   x
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         3
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 dd
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       6
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        IfStatement(
          IfConditionNoError(
            ConditionClass(
              CondTermClass(
                CondFactClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                  CondFactOptionalClass(
                    RelationOperationClassEqualComparation(
                    ) [RelationOperationClassEqualComparation]
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               dd
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [CondFactOptionalClass]
                ) [CondFactClass]
                NoCondTermOptionalClass(
                ) [NoCondTermOptionalClass]
              ) [CondTermClass]
              NoConditionOptionalClass(
              ) [NoConditionOptionalClass]
            ) [ConditionClass]
          ) [IfConditionNoError]
          StatementStatement(
            Statements(
              NoStmt(
              ) [NoStmt]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         2
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
          ) [StatementStatement]
          Empty(
          ) [Empty]
          YesOptionalStatement(
            StatementStatement(
              Statements(
                NoStmt(
                ) [NoStmt]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           3
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
            ) [StatementStatement]
          ) [YesOptionalStatement]
        ) [IfStatement]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  15:50:54,138 - ===================================
INFO  15:50:54,143 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  15:50:54,143 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  15:50:54,143 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  15:50:54,143 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  15:50:54,143 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  15:50:54,143 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  15:50:54,143 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  15:50:54,143 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  15:50:54,143 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  15:50:54,143 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  15:50:54,143 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  15:50:54,145 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  15:50:54,145 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  15:50:54,145 - METHOD BODY STARTING!
INFO  15:50:54,145 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  15:50:54,145 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  15:50:54,145 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  15:50:54,145 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  15:50:54,145 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  15:50:54,145 - METHOD BODY ENDING!
INFO  15:50:54,145 - END OF DEFINING FUNCTION k
INFO  15:50:54,145 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  15:50:54,145 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  15:50:54,145 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  15:50:54,145 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  15:50:54,145 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  15:50:54,145 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  15:50:54,145 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  15:50:54,146 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  15:50:54,146 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  15:50:54,146 - VARIABLE dd IS BEING DEFINED! ON LINE 32
INFO  15:50:54,146 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  15:50:54,146 - VARIABLE ee IS BEING DEFINED! ON LINE 33
INFO  15:50:54,146 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  15:50:54,146 - VARIABLE ff IS BEING DEFINED! ON LINE 34
INFO  15:50:54,146 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  15:50:54,146 - VARIABLE gg IS BEING DEFINED! ON LINE 35
INFO  15:50:54,146 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  15:50:54,146 - VARIABLE hh IS BEING DEFINED! ON LINE 36
INFO  15:50:54,146 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 36
INFO  15:50:54,146 - VARIABLE ii IS BEING DEFINED! ON LINE 37
INFO  15:50:54,146 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 37
INFO  15:50:54,146 - METHOD BODY STARTING!
INFO  15:50:54,146 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  15:50:54,146 - BEGINNING OF AN ASSIGNEMENT! ON LINE 66
INFO  15:50:54,147 - CONST NUMBER 3 ON LINE 66
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  15:50:54,147 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 66
INFO  15:50:54,147 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  15:50:54,147 - BEGINNING OF AN ASSIGNEMENT! ON LINE 67
INFO  15:50:54,147 - CONST NUMBER 6 ON LINE 67
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  15:50:54,147 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 67
INFO  15:50:54,147 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  15:50:54,147 - WE ARE USING A VARIABLE OF TYPE int ON LINE 69
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  15:50:54,147 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  15:50:54,147 - WE ARE USING A VARIABLE OF TYPE int ON LINE 69
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  15:50:54,147 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  15:50:54,148 - USING TWO EXPRESSIONS OF TYPE int ON LINE 69
INFO  15:50:54,148 - CONST NUMBER 2 ON LINE 70
INFO  15:50:54,148 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  15:50:54,148 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  15:50:54,148 - PRINT FUNCTION CALL IN USE! ON LINE 70
INFO  15:50:54,148 - CONST NUMBER 3 ON LINE 73
INFO  15:50:54,148 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  15:50:54,148 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 73
INFO  15:50:54,148 - PRINT FUNCTION CALL IN USE! ON LINE 73
INFO  15:50:54,148 - METHOD BODY ENDING!
INFO  15:50:54,148 - END OF DEFINING FUNCTION main
INFO  15:50:54,148 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  15:50:54,148 -  Deklarisanih promenljivih ima = 14
INFO  15:50:54,148 - ===================================
INFO  15:50:54,154 - Parsiranje uspesno zavrseno!
