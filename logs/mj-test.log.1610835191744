INFO  23:12:58,776 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  23:12:58,988 - #2 program
INFO  23:12:58,988 - #44 p
INFO  23:12:58,989 - #44 int
INFO  23:12:58,994 - #44 buffer
INFO  23:12:58,998 - #39 [
INFO  23:12:58,998 - #40 ]
INFO  23:12:58,998 - #33 ;
INFO  23:12:58,999 - #44 int
INFO  23:12:59,000 - #44 niz
INFO  23:12:59,001 - #39 [
INFO  23:12:59,001 - #40 ]
INFO  23:12:59,001 - #33 ;
INFO  23:12:59,001 - #35 {
INFO  23:12:59,001 - #44 int
INFO  23:12:59,003 - #44 give_me_length_of_array
INFO  23:12:59,003 - #37 (
INFO  23:12:59,003 - #44 int
INFO  23:12:59,003 - #44 array
INFO  23:12:59,003 - #39 [
INFO  23:12:59,004 - #40 ]
INFO  23:12:59,004 - #38 )
INFO  23:12:59,015 - #35 {
INFO  23:12:59,017 - #41 return
INFO  23:12:59,022 - #44 len
INFO  23:12:59,024 - #37 (
INFO  23:12:59,027 - #44 array
INFO  23:12:59,027 - #38 )
INFO  23:12:59,029 - #33 ;
INFO  23:12:59,029 - #36 }
INFO  23:12:59,030 - #44 int
INFO  23:12:59,039 - #44 num_plus_ten
INFO  23:12:59,039 - #37 (
INFO  23:12:59,039 - #44 int
INFO  23:12:59,040 - #44 b
INFO  23:12:59,040 - #39 [
INFO  23:12:59,040 - #40 ]
INFO  23:12:59,040 - #31 ,
INFO  23:12:59,040 - #44 int
INFO  23:12:59,040 - #44 num
INFO  23:12:59,040 - #38 )
INFO  23:12:59,041 - #44 int
INFO  23:12:59,041 - #44 buf
INFO  23:12:59,041 - #39 [
INFO  23:12:59,041 - #40 ]
INFO  23:12:59,042 - #33 ;
INFO  23:12:59,042 - #35 {
INFO  23:12:59,042 - #44 buf
INFO  23:12:59,042 - #19 =
INFO  23:12:59,043 - #44 b
INFO  23:12:59,045 - #33 ;
INFO  23:12:59,045 - #14 if
INFO  23:12:59,046 - #37 (
INFO  23:12:59,046 - #44 num
INFO  23:12:59,046 - #25 <=
INFO  23:12:59,046 - #43 0
INFO  23:12:59,048 - #38 )
INFO  23:12:59,050 - #35 {
INFO  23:12:59,051 - #18 print
INFO  23:12:59,051 - #37 (
INFO  23:12:59,051 - #44 b
INFO  23:12:59,051 - #39 [
INFO  23:12:59,053 - #44 num
INFO  23:12:59,054 - #40 ]
INFO  23:12:59,055 - #38 )
INFO  23:12:59,056 - #33 ;
INFO  23:12:59,056 - #18 print
INFO  23:12:59,056 - #37 (
INFO  23:12:59,057 - #44 buf
INFO  23:12:59,057 - #39 [
INFO  23:12:59,057 - #44 num
INFO  23:12:59,057 - #40 ]
INFO  23:12:59,057 - #38 )
INFO  23:12:59,057 - #33 ;
INFO  23:12:59,057 - #36 }
INFO  23:12:59,057 - #15 else
INFO  23:12:59,060 - #35 {
INFO  23:12:59,060 - #18 print
INFO  23:12:59,060 - #37 (
INFO  23:12:59,060 - #44 b
INFO  23:12:59,060 - #39 [
INFO  23:12:59,060 - #44 num
INFO  23:12:59,060 - #51 -
INFO  23:12:59,061 - #43 1
INFO  23:12:59,061 - #40 ]
INFO  23:12:59,061 - #38 )
INFO  23:12:59,062 - #33 ;
INFO  23:12:59,062 - #18 print
INFO  23:12:59,062 - #37 (
INFO  23:12:59,062 - #44 buf
INFO  23:12:59,062 - #39 [
INFO  23:12:59,062 - #44 num
INFO  23:12:59,063 - #51 -
INFO  23:12:59,063 - #43 1
INFO  23:12:59,063 - #40 ]
INFO  23:12:59,063 - #38 )
INFO  23:12:59,063 - #33 ;
INFO  23:12:59,063 - #36 }
INFO  23:12:59,063 - #41 return
INFO  23:12:59,064 - #44 num
INFO  23:12:59,064 - #50 +
INFO  23:12:59,066 - #43 10
INFO  23:12:59,067 - #33 ;
INFO  23:12:59,067 - #36 }
INFO  23:12:59,067 - #44 int
INFO  23:12:59,067 - #44 sum_all_elements_of_array
INFO  23:12:59,067 - #37 (
INFO  23:12:59,068 - #44 int
INFO  23:12:59,068 - #44 array
INFO  23:12:59,068 - #39 [
INFO  23:12:59,068 - #40 ]
INFO  23:12:59,068 - #38 )
INFO  23:12:59,068 - #44 int
INFO  23:12:59,068 - #44 sum
INFO  23:12:59,068 - #31 ,
INFO  23:12:59,068 - #44 i
INFO  23:12:59,069 - #33 ;
INFO  23:12:59,069 - #35 {
INFO  23:12:59,069 - #44 sum
INFO  23:12:59,069 - #19 =
INFO  23:12:59,069 - #43 0
INFO  23:12:59,070 - #33 ;
INFO  23:12:59,070 - #44 i
INFO  23:12:59,070 - #19 =
INFO  23:12:59,070 - #43 0
INFO  23:12:59,071 - #33 ;
INFO  23:12:59,071 - #12 do
INFO  23:12:59,071 - #35 {
INFO  23:12:59,074 - #44 sum
INFO  23:12:59,074 - #19 =
INFO  23:12:59,075 - #44 sum
INFO  23:12:59,075 - #50 +
INFO  23:12:59,075 - #44 array
INFO  23:12:59,075 - #39 [
INFO  23:12:59,075 - #44 i
INFO  23:12:59,075 - #40 ]
INFO  23:12:59,075 - #33 ;
INFO  23:12:59,075 - #44 i
INFO  23:12:59,076 - #28 ++
INFO  23:12:59,076 - #33 ;
INFO  23:12:59,076 - #36 }
INFO  23:12:59,076 - #13 while
INFO  23:12:59,076 - #37 (
INFO  23:12:59,076 - #44 i
INFO  23:12:59,081 - #23 <
INFO  23:12:59,082 - #44 give_me_length_of_array
INFO  23:12:59,085 - #37 (
INFO  23:12:59,086 - #44 array
INFO  23:12:59,086 - #38 )
INFO  23:12:59,086 - #38 )
INFO  23:12:59,086 - #33 ;
INFO  23:12:59,089 - #41 return
INFO  23:12:59,089 - #44 sum
INFO  23:12:59,090 - #33 ;
INFO  23:12:59,090 - #36 }
INFO  23:12:59,090 - #5 void
INFO  23:12:59,090 - #44 main
INFO  23:12:59,090 - #37 (
INFO  23:12:59,090 - #38 )
INFO  23:12:59,091 - #44 int
INFO  23:12:59,092 - #44 index
INFO  23:12:59,092 - #33 ;
INFO  23:12:59,092 - #44 int
INFO  23:12:59,092 - #44 sum
INFO  23:12:59,092 - #33 ;
INFO  23:12:59,092 - #44 int
INFO  23:12:59,092 - #44 buffer_Fake
INFO  23:12:59,092 - #39 [
INFO  23:12:59,092 - #40 ]
INFO  23:12:59,092 - #33 ;
INFO  23:12:59,092 - #44 int
INFO  23:12:59,093 - #44 aaa
INFO  23:12:59,093 - #39 [
INFO  23:12:59,093 - #40 ]
INFO  23:12:59,093 - #33 ;
INFO  23:12:59,093 - #44 int
INFO  23:12:59,093 - #44 niz
INFO  23:12:59,093 - #39 [
INFO  23:12:59,093 - #40 ]
INFO  23:12:59,093 - #33 ;
INFO  23:12:59,093 - #44 char
INFO  23:12:59,093 - #44 modif_two
INFO  23:12:59,093 - #39 [
INFO  23:12:59,093 - #40 ]
INFO  23:12:59,094 - #33 ;
INFO  23:12:59,094 - #35 {
INFO  23:12:59,094 - #44 buffer
INFO  23:12:59,094 - #19 =
INFO  23:12:59,094 - #16 new
INFO  23:12:59,094 - #44 int
INFO  23:12:59,094 - #39 [
INFO  23:12:59,094 - #43 10
INFO  23:12:59,094 - #40 ]
INFO  23:12:59,094 - #33 ;
INFO  23:12:59,095 - #44 buffer
INFO  23:12:59,095 - #39 [
INFO  23:12:59,095 - #43 0
INFO  23:12:59,095 - #40 ]
INFO  23:12:59,095 - #19 =
INFO  23:12:59,095 - #43 1
INFO  23:12:59,095 - #33 ;
INFO  23:12:59,095 - #18 print
INFO  23:12:59,095 - #37 (
INFO  23:12:59,095 - #44 buffer
INFO  23:12:59,096 - #39 [
INFO  23:12:59,096 - #43 0
INFO  23:12:59,096 - #40 ]
INFO  23:12:59,096 - #38 )
INFO  23:12:59,096 - #33 ;
INFO  23:12:59,096 - #44 niz
INFO  23:12:59,096 - #19 =
INFO  23:12:59,096 - #16 new
INFO  23:12:59,096 - #44 int
INFO  23:12:59,096 - #39 [
INFO  23:12:59,096 - #43 10
INFO  23:12:59,096 - #40 ]
INFO  23:12:59,097 - #33 ;
INFO  23:12:59,097 - #44 niz
INFO  23:12:59,097 - #39 [
INFO  23:12:59,097 - #43 0
INFO  23:12:59,097 - #40 ]
INFO  23:12:59,097 - #19 =
INFO  23:12:59,097 - #43 38
INFO  23:12:59,097 - #33 ;
INFO  23:12:59,097 - #44 modif_two
INFO  23:12:59,098 - #19 =
INFO  23:12:59,098 - #16 new
INFO  23:12:59,098 - #44 char
INFO  23:12:59,098 - #39 [
INFO  23:12:59,098 - #43 4
INFO  23:12:59,098 - #40 ]
INFO  23:12:59,098 - #33 ;
INFO  23:12:59,098 - #44 modif_two
INFO  23:12:59,099 - #19 =
INFO  23:12:59,099 - #42 #
INFO  23:12:59,099 - #43 538976288
INFO  23:12:59,102 - #33 ;
INFO  23:12:59,103 - #18 print
INFO  23:12:59,103 - #37 (
INFO  23:12:59,103 - #44 modif_two
INFO  23:12:59,103 - #39 [
INFO  23:12:59,103 - #43 0
INFO  23:12:59,103 - #40 ]
INFO  23:12:59,104 - #38 )
INFO  23:12:59,104 - #33 ;
INFO  23:12:59,104 - #18 print
INFO  23:12:59,104 - #37 (
INFO  23:12:59,104 - #44 modif_two
INFO  23:12:59,104 - #39 [
INFO  23:12:59,104 - #43 1
INFO  23:12:59,104 - #40 ]
INFO  23:12:59,104 - #38 )
INFO  23:12:59,104 - #33 ;
INFO  23:12:59,104 - #18 print
INFO  23:12:59,104 - #37 (
INFO  23:12:59,105 - #44 modif_two
INFO  23:12:59,105 - #39 [
INFO  23:12:59,105 - #43 2
INFO  23:12:59,105 - #40 ]
INFO  23:12:59,105 - #38 )
INFO  23:12:59,105 - #33 ;
INFO  23:12:59,106 - #18 print
INFO  23:12:59,106 - #37 (
INFO  23:12:59,106 - #44 modif_two
INFO  23:12:59,106 - #39 [
INFO  23:12:59,106 - #43 3
INFO  23:12:59,106 - #40 ]
INFO  23:12:59,106 - #38 )
INFO  23:12:59,106 - #33 ;
INFO  23:12:59,107 - #36 }
INFO  23:12:59,107 - #36 }
INFO  23:12:59,159 - Program(
  ProgramName(
   p
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             buffer
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationVars(
      VarDeclClass(
        Type(
         int
        ) [Type]
        VarListSingle(
          VarClassArray(
           niz
          ) [VarClassArray]
        ) [VarListSingle]
      ) [VarDeclClass]
    ) [GroupDeclarationVars]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassNoVoid(
              Type(
               int
              ) [Type]
             give_me_length_of_array
            ) [ReturnValueClassNoVoid]
            FormParams(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 array
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
            ) [FormParams]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            Statements(
              NoStmt(
              ) [NoStmt]
              ReturnExpr(
                ReturnNonTerminalClass(
                ) [ReturnNonTerminalClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          Designator(
                            DesigIdent(
                             len
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          Actuals(
                            ActualParam(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           array
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParam]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [ReturnExpr]
            ) [Statements]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           num_plus_ten
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 b
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               num
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassArray(
                 buf
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       buf
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 b
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              IfStatement(
                IfConditionNoError(
                  ConditionClass(
                    CondTermClass(
                      CondFactClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   num
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                        CondFactOptionalClass(
                          LessOrEqualOperationClass(
                          ) [LessOrEqualOperationClass]
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [CondFactOptionalClass]
                      ) [CondFactClass]
                      NoCondTermOptionalClass(
                      ) [NoCondTermOptionalClass]
                    ) [CondTermClass]
                    NoConditionOptionalClass(
                    ) [NoConditionOptionalClass]
                  ) [ConditionClass]
                ) [IfConditionNoError]
                StatementStatement(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     b
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                  DesigIdent(
                                                   num
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   buf
                                  ) [DesigIdent]
                                  OptionalDesignatorArray(
                                    HelperClass(
                                    ) [HelperClass]
                                    LSquareClass(
                                    ) [LSquareClass]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 num
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [OptionalDesignatorArray]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                ) [StatementStatement]
                Empty(
                ) [Empty]
                YesOptionalStatement(
                  StatementStatement(
                    Statements(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       b
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     num
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              ExprOptionalListClass(
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                                MinusOperation(
                                                 -
                                                ) [MinusOperation]
                                                TermClass(
                                                  NumberConst(
                                                   1
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                              ) [ExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     buf
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                  DesigIdent(
                                                   num
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            ExprOptionalListClass(
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                              MinusOperation(
                                               -
                                              ) [MinusOperation]
                                              TermClass(
                                                NumberConst(
                                                 1
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                            ) [ExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                  ) [StatementStatement]
                ) [YesOptionalStatement]
              ) [IfStatement]
            ) [Statements]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           num
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    ExprOptionalListClass(
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                      PlusOperation(
                       +
                      ) [PlusOperation]
                      TermClass(
                        NumberConst(
                         10
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                    ) [ExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         sum_all_elements_of_array
        ) [ReturnValueClassNoVoid]
        FormParams(
          SingleFormalParamDecl(
            FormalParamDeclClassArray(
              Type(
               int
              ) [Type]
             array
            ) [FormalParamDeclClassArray]
          ) [SingleFormalParamDecl]
        ) [FormParams]
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListSingle(
                VarClassNoArray(
                 sum
                ) [VarClassNoArray]
              ) [VarListSingle]
              VarClassNoArray(
               i
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       sum
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     i
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           sum
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     sum
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              ExprOptionalListClass(
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       array
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     i
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementPlusPlus(
                      Designator(
                        DesigIdent(
                         i
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorStatementPlusPlus]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               i
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      LessOperationClass(
                      ) [LessOperationClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            FactorOptionalParams(
                              Designator(
                                DesigIdent(
                                 give_me_length_of_array
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              Actuals(
                                ActualParam(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               array
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParam]
                              ) [Actuals]
                            ) [FactorOptionalParams]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         sum
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  NoVarDeclList(
                  ) [NoVarDeclList]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       index
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     sum
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassArray(
                   buffer_Fake
                  ) [VarClassArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassArray(
                 aaa
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassArray(
               niz
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           char
          ) [Type]
          VarListSingle(
            VarClassArray(
             modif_two
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            NoStmt(
                            ) [NoStmt]
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                  DesigIdent(
                                   buffer
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NewFactorClass(
                                          Type(
                                           int
                                          ) [Type]
                                          FactorOptionalSecondClass(
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     10
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [FactorOptionalSecondClass]
                                        ) [NewFactorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [Statements]
                          Assignment(
                            DesignatorStatementOptionsClassAssignExpression(
                              Designator(
                                DesigIdent(
                                 buffer
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           0
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                              AssignOpClass(
                                AssignOperationClass(
                                ) [AssignOperationClass]
                              ) [AssignOpClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       1
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [DesignatorStatementOptionsClassAssignExpression]
                          ) [Assignment]
                        ) [Statements]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       buffer
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 0
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          NoCommaNumberClass(
                          ) [NoCommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             niz
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NewFactorClass(
                                    Type(
                                     int
                                    ) [Type]
                                    FactorOptionalSecondClass(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               10
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [FactorOptionalSecondClass]
                                  ) [NewFactorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           niz
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 38
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         modif_two
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NewFactorClass(
                                Type(
                                 char
                                ) [Type]
                                FactorOptionalSecondClass(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           4
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [FactorOptionalSecondClass]
                              ) [NewFactorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       modif_two
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            ModificationOne(
                              HashTagClass(
                              ) [HashTagClass]
                             538976288
                            ) [ModificationOne]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             modif_two
                            ) [DesigIdent]
                            OptionalDesignatorArray(
                              HelperClass(
                              ) [HelperClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       0
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           modif_two
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     1
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         modif_two
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   2
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       modif_two
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 3
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  23:12:59,169 - ===================================
INFO  23:12:59,187 - PROGRAM NAME DETECTED => p ON LINE 1
INFO  23:12:59,188 - ARRAY VARIABLE buffer IS BEING DEFINED! ON LINE 3
INFO  23:12:59,188 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 3
INFO  23:12:59,188 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 4
INFO  23:12:59,188 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 4
INFO  23:12:59,188 - FUNCTION give_me_length_of_array WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  23:12:59,188 - FORMAL ARRAY PARAMETER array DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  23:12:59,188 - METHOD BODY STARTING!
INFO  23:12:59,189 - CURRENT VARIABLE IN USE IS len AND IT IS OF TYPE int
INFO  23:12:59,189 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  23:12:59,189 - WE ARE USING A VARIABLE OF TYPE array ON LINE 9
INFO  23:12:59,189 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:12:59,189 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:12:59,190 - TYPE -> array <- AND -> array <- ON LINE 9
INFO  23:12:59,190 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:12:59,190 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:12:59,190 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  23:12:59,190 - METHOD BODY ENDING!
INFO  23:12:59,190 - END OF DEFINING FUNCTION give_me_length_of_array
INFO  23:12:59,190 - FUNCTION num_plus_ten WITH RETURN VALUE OF TYPE int ON LINE 12
INFO  23:12:59,190 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 12
INFO  23:12:59,191 - FORMAL PARAMETER num DEFINED AND IT IS OF TYPE int ON LINE 12
INFO  23:12:59,191 - ARRAY VARIABLE buf IS BEING DEFINED! ON LINE 13
INFO  23:12:59,191 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 13
INFO  23:12:59,191 - METHOD BODY STARTING!
INFO  23:12:59,191 - CURRENT VARIABLE IN USE IS buf AND IT IS OF TYPE array
INFO  23:12:59,191 - BEGINNING OF AN ASSIGNEMENT! ON LINE 15
INFO  23:12:59,191 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  23:12:59,191 - WE ARE USING A VARIABLE OF TYPE array ON LINE 15
INFO  23:12:59,191 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  23:12:59,191 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  23:12:59,192 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 15
INFO  23:12:59,192 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  23:12:59,192 - WE ARE USING A VARIABLE OF TYPE int ON LINE 16
INFO  23:12:59,192 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  23:12:59,192 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  23:12:59,193 - CONST NUMBER 0 ON LINE 16
INFO  23:12:59,193 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  23:12:59,193 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 16
INFO  23:12:59,193 - USING TWO EXPRESSIONS OF TYPE int ON LINE 16
INFO  23:12:59,193 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  23:12:59,193 - WE ARE USING A VARIABLE OF TYPE int ON LINE 17
INFO  23:12:59,193 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  23:12:59,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  23:12:59,194 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  23:12:59,194 - WE ARE USING AN ARRAY OF TYPE int ON LINE 17
INFO  23:12:59,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  23:12:59,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 17
INFO  23:12:59,194 - PRINT FUNCTION CALL IN USE! ON LINE 17
INFO  23:12:59,194 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  23:12:59,194 - WE ARE USING A VARIABLE OF TYPE int ON LINE 18
INFO  23:12:59,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  23:12:59,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  23:12:59,194 - CURRENT VARIABLE IN USE IS buf AND IT IS OF TYPE array
INFO  23:12:59,195 - WE ARE USING AN ARRAY OF TYPE int ON LINE 18
INFO  23:12:59,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  23:12:59,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 18
INFO  23:12:59,195 - PRINT FUNCTION CALL IN USE! ON LINE 18
INFO  23:12:59,196 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  23:12:59,197 - WE ARE USING A VARIABLE OF TYPE int ON LINE 21
INFO  23:12:59,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  23:12:59,197 - CONST NUMBER 1 ON LINE 21
INFO  23:12:59,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  23:12:59,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 11
INFO  23:12:59,198 - USING INTEGERS IN TERM! ON LINE 21
INFO  23:12:59,198 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  23:12:59,198 - WE ARE USING AN ARRAY OF TYPE int ON LINE 21
INFO  23:12:59,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  23:12:59,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  23:12:59,198 - PRINT FUNCTION CALL IN USE! ON LINE 21
INFO  23:12:59,198 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  23:12:59,198 - WE ARE USING A VARIABLE OF TYPE int ON LINE 22
INFO  23:12:59,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  23:12:59,199 - CONST NUMBER 1 ON LINE 22
INFO  23:12:59,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  23:12:59,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  23:12:59,199 - USING INTEGERS IN TERM! ON LINE 22
INFO  23:12:59,199 - CURRENT VARIABLE IN USE IS buf AND IT IS OF TYPE array
INFO  23:12:59,199 - WE ARE USING AN ARRAY OF TYPE int ON LINE 22
INFO  23:12:59,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  23:12:59,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  23:12:59,199 - PRINT FUNCTION CALL IN USE! ON LINE 22
INFO  23:12:59,200 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  23:12:59,201 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  23:12:59,201 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  23:12:59,201 - CONST NUMBER 10 ON LINE 25
INFO  23:12:59,201 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  23:12:59,201 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:12:59,202 - USING INTEGERS IN TERM! ON LINE 25
INFO  23:12:59,203 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 25
INFO  23:12:59,203 - METHOD BODY ENDING!
INFO  23:12:59,203 - END OF DEFINING FUNCTION num_plus_ten
INFO  23:12:59,206 - FUNCTION sum_all_elements_of_array WITH RETURN VALUE OF TYPE int ON LINE 28
INFO  23:12:59,208 - FORMAL ARRAY PARAMETER array DEFINED AND IT IS OF TYPE int ON LINE 28
INFO  23:12:59,209 - VARIABLE sum IS BEING DEFINED! ON LINE 29
INFO  23:12:59,209 - VARIABLE i IS BEING DEFINED! ON LINE 29
INFO  23:12:59,209 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 29
INFO  23:12:59,209 - METHOD BODY STARTING!
INFO  23:12:59,209 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  23:12:59,209 - BEGINNING OF AN ASSIGNEMENT! ON LINE 31
INFO  23:12:59,209 - CONST NUMBER 0 ON LINE 31
INFO  23:12:59,210 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  23:12:59,210 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 31
INFO  23:12:59,210 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 31
INFO  23:12:59,210 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  23:12:59,210 - BEGINNING OF AN ASSIGNEMENT! ON LINE 32
INFO  23:12:59,210 - CONST NUMBER 0 ON LINE 32
INFO  23:12:59,211 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  23:12:59,217 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 32
INFO  23:12:59,218 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 32
INFO  23:12:59,218 - BEGINNING OF A DO...WHILE LOOP!
INFO  23:12:59,218 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  23:12:59,218 - BEGINNING OF AN ASSIGNEMENT! ON LINE 34
INFO  23:12:59,218 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  23:12:59,218 - WE ARE USING A VARIABLE OF TYPE int ON LINE 34
INFO  23:12:59,218 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  23:12:59,218 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  23:12:59,218 - WE ARE USING A VARIABLE OF TYPE int ON LINE 34
INFO  23:12:59,218 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  23:12:59,218 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  23:12:59,218 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  23:12:59,218 - WE ARE USING AN ARRAY OF TYPE int ON LINE 34
INFO  23:12:59,218 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 34
INFO  23:12:59,218 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:12:59,218 - USING INTEGERS IN TERM! ON LINE 34
INFO  23:12:59,219 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 34
INFO  23:12:59,219 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  23:12:59,219 - USING ++ ON i ON LINE 35
INFO  23:12:59,219 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  23:12:59,219 - WE ARE USING A VARIABLE OF TYPE int ON LINE 37
INFO  23:12:59,219 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  23:12:59,219 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  23:12:59,219 - CURRENT VARIABLE IN USE IS give_me_length_of_array AND IT IS OF TYPE int
INFO  23:12:59,219 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  23:12:59,219 - WE ARE USING A VARIABLE OF TYPE array ON LINE 37
INFO  23:12:59,219 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  23:12:59,220 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  23:12:59,220 - TYPE -> array <- AND -> array <- ON LINE 37
INFO  23:12:59,220 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  23:12:59,220 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 37
INFO  23:12:59,220 - USING TWO EXPRESSIONS OF TYPE int ON LINE 37
INFO  23:12:59,223 - ENDING OF A DO...WHILE LOOP! ON LINE 33
INFO  23:12:59,224 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  23:12:59,225 - WE ARE USING A VARIABLE OF TYPE int ON LINE 39
INFO  23:12:59,225 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  23:12:59,225 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  23:12:59,225 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 39
INFO  23:12:59,225 - METHOD BODY ENDING!
INFO  23:12:59,225 - END OF DEFINING FUNCTION sum_all_elements_of_array
INFO  23:12:59,226 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 43
INFO  23:12:59,226 - VARIABLE index IS BEING DEFINED! ON LINE 44
INFO  23:12:59,226 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 44
INFO  23:12:59,226 - VARIABLE sum IS BEING DEFINED! ON LINE 45
INFO  23:12:59,226 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 45
INFO  23:12:59,226 - ARRAY VARIABLE buffer_Fake IS BEING DEFINED! ON LINE 46
INFO  23:12:59,226 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 46
INFO  23:12:59,226 - ARRAY VARIABLE aaa IS BEING DEFINED! ON LINE 47
INFO  23:12:59,226 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 47
INFO  23:12:59,226 - ARRAY VARIABLE niz IS BEING DEFINED! ON LINE 48
INFO  23:12:59,227 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 48
INFO  23:12:59,227 - ARRAY VARIABLE modif_two IS BEING DEFINED! ON LINE 49
INFO  23:12:59,227 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 49
INFO  23:12:59,227 - METHOD BODY STARTING!
INFO  23:12:59,227 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  23:12:59,227 - BEGINNING OF AN ASSIGNEMENT! ON LINE 52
INFO  23:12:59,227 - CONST NUMBER 10 ON LINE 52
INFO  23:12:59,227 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  23:12:59,227 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  23:12:59,227 - USAGE OF KEYWORD NEW! ON LINE 52
INFO  23:12:59,227 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  23:12:59,227 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 52
INFO  23:12:59,228 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 52
INFO  23:12:59,228 - CONST NUMBER 0 ON LINE 53
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  23:12:59,228 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  23:12:59,228 - BEGINNING OF AN ASSIGNEMENT! ON LINE 53
INFO  23:12:59,228 - CONST NUMBER 1 ON LINE 53
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  23:12:59,228 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 53
INFO  23:12:59,228 - CONST NUMBER 0 ON LINE 55
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  23:12:59,228 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  23:12:59,228 - WE ARE USING AN ARRAY OF TYPE int ON LINE 55
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  23:12:59,228 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  23:12:59,229 - PRINT FUNCTION CALL IN USE! ON LINE 55
INFO  23:12:59,229 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  23:12:59,229 - BEGINNING OF AN ASSIGNEMENT! ON LINE 57
INFO  23:12:59,229 - CONST NUMBER 10 ON LINE 57
INFO  23:12:59,229 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  23:12:59,229 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  23:12:59,229 - USAGE OF KEYWORD NEW! ON LINE 57
INFO  23:12:59,229 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  23:12:59,229 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 57
INFO  23:12:59,229 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 57
INFO  23:12:59,229 - CONST NUMBER 0 ON LINE 58
INFO  23:12:59,229 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  23:12:59,229 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  23:12:59,229 - CURRENT VARIABLE IN USE IS niz AND IT IS OF TYPE array
INFO  23:12:59,229 - BEGINNING OF AN ASSIGNEMENT! ON LINE 58
INFO  23:12:59,230 - CONST NUMBER 38 ON LINE 58
INFO  23:12:59,230 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  23:12:59,230 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 58
INFO  23:12:59,230 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 58
INFO  23:12:59,230 - CURRENT VARIABLE IN USE IS modif_two AND IT IS OF TYPE array
INFO  23:12:59,230 - BEGINNING OF AN ASSIGNEMENT! ON LINE 63
INFO  23:12:59,230 - CONST NUMBER 4 ON LINE 63
INFO  23:12:59,230 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  23:12:59,230 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  23:12:59,230 - USAGE OF KEYWORD NEW! ON LINE 63
INFO  23:12:59,230 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  23:12:59,230 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 63
INFO  23:12:59,230 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 63
INFO  23:12:59,230 - CURRENT VARIABLE IN USE IS modif_two AND IT IS OF TYPE array
INFO  23:12:59,230 - BEGINNING OF AN ASSIGNEMENT! ON LINE 65
INFO  23:12:59,231 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  23:12:59,231 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  23:12:59,231 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 65
INFO  23:12:59,231 - CONST NUMBER 0 ON LINE 67
INFO  23:12:59,231 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  23:12:59,231 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  23:12:59,231 - CURRENT VARIABLE IN USE IS modif_two AND IT IS OF TYPE array
INFO  23:12:59,231 - WE ARE USING AN ARRAY OF TYPE char ON LINE 67
INFO  23:12:59,231 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  23:12:59,231 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  23:12:59,231 - PRINT FUNCTION CALL IN USE! ON LINE 67
INFO  23:12:59,231 - CONST NUMBER 1 ON LINE 68
INFO  23:12:59,231 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  23:12:59,232 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  23:12:59,232 - CURRENT VARIABLE IN USE IS modif_two AND IT IS OF TYPE array
INFO  23:12:59,232 - WE ARE USING AN ARRAY OF TYPE char ON LINE 68
INFO  23:12:59,232 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  23:12:59,232 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  23:12:59,232 - PRINT FUNCTION CALL IN USE! ON LINE 68
INFO  23:12:59,232 - CONST NUMBER 2 ON LINE 69
INFO  23:12:59,232 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  23:12:59,233 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  23:12:59,233 - CURRENT VARIABLE IN USE IS modif_two AND IT IS OF TYPE array
INFO  23:12:59,233 - WE ARE USING AN ARRAY OF TYPE char ON LINE 69
INFO  23:12:59,233 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  23:12:59,233 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  23:12:59,233 - PRINT FUNCTION CALL IN USE! ON LINE 69
INFO  23:12:59,233 - CONST NUMBER 3 ON LINE 70
INFO  23:12:59,233 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  23:12:59,233 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  23:12:59,233 - CURRENT VARIABLE IN USE IS modif_two AND IT IS OF TYPE array
INFO  23:12:59,234 - WE ARE USING AN ARRAY OF TYPE char ON LINE 70
INFO  23:12:59,234 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  23:12:59,234 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  23:12:59,234 - PRINT FUNCTION CALL IN USE! ON LINE 70
INFO  23:12:59,234 - METHOD BODY ENDING!
INFO  23:12:59,234 - END OF DEFINING FUNCTION main
INFO  23:12:59,234 - PROGRAM ENDED => p ON LINE 1
INFO  23:12:59,234 -  Deklarisanih promenljivih ima = 11
INFO  23:12:59,234 - ===================================
