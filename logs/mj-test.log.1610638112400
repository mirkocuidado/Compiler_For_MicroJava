INFO  16:28:09,304 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  16:28:09,376 - #2 program
INFO  16:28:09,377 - #43 MJProgram
INFO  16:28:09,377 - #43 int
INFO  16:28:09,378 - #43 a
INFO  16:28:09,379 - #31 ,
INFO  16:28:09,379 - #43 b
INFO  16:28:09,379 - #31 ,
INFO  16:28:09,379 - #43 c
INFO  16:28:09,379 - #31 ,
INFO  16:28:09,379 - #43 d
INFO  16:28:09,379 - #33 ;
INFO  16:28:09,380 - #9 const
INFO  16:28:09,380 - #43 int
INFO  16:28:09,380 - #43 term
INFO  16:28:09,380 - #19 =
INFO  16:28:09,380 - #42 0
INFO  16:28:09,380 - #33 ;
INFO  16:28:09,381 - #9 const
INFO  16:28:09,381 - #43 int
INFO  16:28:09,381 - #43 y
INFO  16:28:09,381 - #19 =
INFO  16:28:09,391 - #42 3
INFO  16:28:09,391 - #33 ;
INFO  16:28:09,391 - #35 {
INFO  16:28:09,391 - #43 int
INFO  16:28:09,392 - #43 k
INFO  16:28:09,392 - #37 (
INFO  16:28:09,393 - #43 int
INFO  16:28:09,393 - #43 a
INFO  16:28:09,393 - #39 [
INFO  16:28:09,393 - #40 ]
INFO  16:28:09,393 - #31 ,
INFO  16:28:09,393 - #43 int
INFO  16:28:09,393 - #43 b
INFO  16:28:09,393 - #38 )
INFO  16:28:09,394 - #35 {
INFO  16:28:09,395 - #41 return
INFO  16:28:09,397 - #43 a
INFO  16:28:09,398 - #39 [
INFO  16:28:09,399 - #43 b
INFO  16:28:09,400 - #40 ]
INFO  16:28:09,403 - #33 ;
INFO  16:28:09,404 - #36 }
INFO  16:28:09,404 - #5 void
INFO  16:28:09,406 - #43 main
INFO  16:28:09,407 - #37 (
INFO  16:28:09,407 - #38 )
INFO  16:28:09,408 - #43 int
INFO  16:28:09,408 - #43 x
INFO  16:28:09,408 - #33 ;
INFO  16:28:09,408 - #43 bool
INFO  16:28:09,408 - #43 p
INFO  16:28:09,408 - #33 ;
INFO  16:28:09,408 - #43 bool
INFO  16:28:09,408 - #43 r
INFO  16:28:09,409 - #33 ;
INFO  16:28:09,409 - #43 bool
INFO  16:28:09,409 - #43 q
INFO  16:28:09,409 - #33 ;
INFO  16:28:09,409 - #43 int
INFO  16:28:09,409 - #43 br
INFO  16:28:09,409 - #39 [
INFO  16:28:09,409 - #40 ]
INFO  16:28:09,409 - #33 ;
INFO  16:28:09,409 - #43 int
INFO  16:28:09,409 - #43 indexes
INFO  16:28:09,410 - #39 [
INFO  16:28:09,410 - #40 ]
INFO  16:28:09,410 - #33 ;
INFO  16:28:09,410 - #43 int
INFO  16:28:09,410 - #43 dd
INFO  16:28:09,410 - #33 ;
INFO  16:28:09,410 - #43 int
INFO  16:28:09,410 - #43 ee
INFO  16:28:09,410 - #33 ;
INFO  16:28:09,410 - #43 int
INFO  16:28:09,410 - #43 ff
INFO  16:28:09,410 - #33 ;
INFO  16:28:09,410 - #43 int
INFO  16:28:09,411 - #43 gg
INFO  16:28:09,411 - #33 ;
INFO  16:28:09,411 - #43 char
INFO  16:28:09,411 - #43 hh
INFO  16:28:09,411 - #33 ;
INFO  16:28:09,411 - #43 int
INFO  16:28:09,411 - #43 ii
INFO  16:28:09,411 - #33 ;
INFO  16:28:09,411 - #35 {
INFO  16:28:09,411 - #43 x
INFO  16:28:09,411 - #19 =
INFO  16:28:09,411 - #42 3
INFO  16:28:09,412 - #33 ;
INFO  16:28:09,413 - #43 dd
INFO  16:28:09,413 - #19 =
INFO  16:28:09,413 - #42 6
INFO  16:28:09,413 - #33 ;
INFO  16:28:09,413 - #14 if
INFO  16:28:09,413 - #37 (
INFO  16:28:09,413 - #43 x
INFO  16:28:09,413 - #23 <
INFO  16:28:09,413 - #43 dd
INFO  16:28:09,414 - #38 )
INFO  16:28:09,416 - #35 {
INFO  16:28:09,416 - #14 if
INFO  16:28:09,416 - #37 (
INFO  16:28:09,416 - #43 x
INFO  16:28:09,416 - #20 ==
INFO  16:28:09,417 - #42 3
INFO  16:28:09,417 - #38 )
INFO  16:28:09,417 - #35 {
INFO  16:28:09,417 - #18 print
INFO  16:28:09,418 - #37 (
INFO  16:28:09,418 - #44 d
INFO  16:28:09,418 - #38 )
INFO  16:28:09,418 - #33 ;
INFO  16:28:09,419 - #18 print
INFO  16:28:09,419 - #37 (
INFO  16:28:09,419 - #44 a
INFO  16:28:09,419 - #38 )
INFO  16:28:09,419 - #33 ;
INFO  16:28:09,419 - #36 }
INFO  16:28:09,419 - #14 if
INFO  16:28:09,420 - #37 (
INFO  16:28:09,421 - #43 dd
INFO  16:28:09,421 - #21 !=
INFO  16:28:09,421 - #42 5
INFO  16:28:09,421 - #38 )
INFO  16:28:09,421 - #35 {
INFO  16:28:09,421 - #18 print
INFO  16:28:09,422 - #37 (
INFO  16:28:09,422 - #44 d
INFO  16:28:09,422 - #38 )
INFO  16:28:09,422 - #33 ;
INFO  16:28:09,422 - #18 print
INFO  16:28:09,422 - #37 (
INFO  16:28:09,422 - #44 a
INFO  16:28:09,422 - #38 )
INFO  16:28:09,422 - #33 ;
INFO  16:28:09,422 - #36 }
INFO  16:28:09,422 - #14 if
INFO  16:28:09,422 - #37 (
INFO  16:28:09,422 - #43 x
INFO  16:28:09,422 - #22 >
INFO  16:28:09,422 - #42 2
INFO  16:28:09,423 - #38 )
INFO  16:28:09,423 - #35 {
INFO  16:28:09,423 - #18 print
INFO  16:28:09,423 - #37 (
INFO  16:28:09,423 - #44 d
INFO  16:28:09,423 - #38 )
INFO  16:28:09,423 - #33 ;
INFO  16:28:09,423 - #18 print
INFO  16:28:09,424 - #37 (
INFO  16:28:09,424 - #44 a
INFO  16:28:09,424 - #38 )
INFO  16:28:09,424 - #33 ;
INFO  16:28:09,424 - #36 }
INFO  16:28:09,424 - #14 if
INFO  16:28:09,424 - #37 (
INFO  16:28:09,424 - #43 dd
INFO  16:28:09,424 - #23 <
INFO  16:28:09,424 - #42 7
INFO  16:28:09,424 - #38 )
INFO  16:28:09,424 - #35 {
INFO  16:28:09,425 - #18 print
INFO  16:28:09,425 - #37 (
INFO  16:28:09,425 - #44 d
INFO  16:28:09,425 - #38 )
INFO  16:28:09,425 - #33 ;
INFO  16:28:09,425 - #18 print
INFO  16:28:09,425 - #37 (
INFO  16:28:09,425 - #44 a
INFO  16:28:09,425 - #38 )
INFO  16:28:09,426 - #33 ;
INFO  16:28:09,426 - #36 }
INFO  16:28:09,426 - #14 if
INFO  16:28:09,426 - #37 (
INFO  16:28:09,426 - #43 dd
INFO  16:28:09,426 - #25 <=
INFO  16:28:09,426 - #42 6
INFO  16:28:09,427 - #38 )
INFO  16:28:09,427 - #35 {
INFO  16:28:09,427 - #18 print
INFO  16:28:09,427 - #37 (
INFO  16:28:09,427 - #44 d
INFO  16:28:09,427 - #38 )
INFO  16:28:09,427 - #33 ;
INFO  16:28:09,427 - #18 print
INFO  16:28:09,427 - #37 (
INFO  16:28:09,427 - #44 a
INFO  16:28:09,427 - #38 )
INFO  16:28:09,428 - #33 ;
INFO  16:28:09,428 - #36 }
INFO  16:28:09,428 - #14 if
INFO  16:28:09,428 - #37 (
INFO  16:28:09,428 - #43 x
INFO  16:28:09,428 - #24 >=
INFO  16:28:09,428 - #42 3
INFO  16:28:09,428 - #38 )
INFO  16:28:09,429 - #35 {
INFO  16:28:09,429 - #18 print
INFO  16:28:09,429 - #37 (
INFO  16:28:09,429 - #44 d
INFO  16:28:09,429 - #38 )
INFO  16:28:09,429 - #33 ;
INFO  16:28:09,429 - #18 print
INFO  16:28:09,429 - #37 (
INFO  16:28:09,429 - #44 a
INFO  16:28:09,429 - #38 )
INFO  16:28:09,429 - #33 ;
INFO  16:28:09,429 - #36 }
INFO  16:28:09,429 - #36 }
INFO  16:28:09,429 - #15 else
INFO  16:28:09,429 - #35 {
INFO  16:28:09,429 - #18 print
INFO  16:28:09,429 - #37 (
INFO  16:28:09,429 - #42 3
INFO  16:28:09,429 - #38 )
INFO  16:28:09,429 - #33 ;
INFO  16:28:09,429 - #36 }
INFO  16:28:09,430 - #43 x
INFO  16:28:09,430 - #19 =
INFO  16:28:09,430 - #42 10
INFO  16:28:09,430 - #33 ;
INFO  16:28:09,432 - #12 do
INFO  16:28:09,432 - #35 {
INFO  16:28:09,433 - #18 print
INFO  16:28:09,434 - #37 (
INFO  16:28:09,434 - #44 x
INFO  16:28:09,434 - #38 )
INFO  16:28:09,434 - #33 ;
INFO  16:28:09,434 - #18 print
INFO  16:28:09,434 - #37 (
INFO  16:28:09,434 - #44 =
INFO  16:28:09,434 - #38 )
INFO  16:28:09,434 - #33 ;
INFO  16:28:09,434 - #18 print
INFO  16:28:09,434 - #37 (
INFO  16:28:09,434 - #43 x
INFO  16:28:09,434 - #31 ,
INFO  16:28:09,434 - #42 1
INFO  16:28:09,434 - #38 )
INFO  16:28:09,434 - #33 ;
INFO  16:28:09,434 - #18 print
INFO  16:28:09,434 - #37 (
INFO  16:28:09,434 - #44  
INFO  16:28:09,435 - #38 )
INFO  16:28:09,435 - #33 ;
INFO  16:28:09,435 - #43 x
INFO  16:28:09,435 - #29 --
INFO  16:28:09,435 - #33 ;
INFO  16:28:09,435 - #36 }
INFO  16:28:09,435 - #13 while
INFO  16:28:09,435 - #37 (
INFO  16:28:09,435 - #43 x
INFO  16:28:09,436 - #24 >=
INFO  16:28:09,437 - #42 0
INFO  16:28:09,437 - #38 )
INFO  16:28:09,437 - #33 ;
INFO  16:28:09,438 - #43 indexes
INFO  16:28:09,438 - #19 =
INFO  16:28:09,438 - #16 new
INFO  16:28:09,438 - #43 int
INFO  16:28:09,438 - #39 [
INFO  16:28:09,438 - #42 10
INFO  16:28:09,438 - #40 ]
INFO  16:28:09,438 - #33 ;
INFO  16:28:09,438 - #43 x
INFO  16:28:09,439 - #19 =
INFO  16:28:09,439 - #42 0
INFO  16:28:09,439 - #33 ;
INFO  16:28:09,439 - #12 do
INFO  16:28:09,439 - #35 {
INFO  16:28:09,439 - #43 indexes
INFO  16:28:09,439 - #39 [
INFO  16:28:09,439 - #43 x
INFO  16:28:09,439 - #40 ]
INFO  16:28:09,439 - #19 =
INFO  16:28:09,439 - #43 x
INFO  16:28:09,439 - #33 ;
INFO  16:28:09,439 - #43 x
INFO  16:28:09,439 - #28 ++
INFO  16:28:09,439 - #33 ;
INFO  16:28:09,440 - #36 }
INFO  16:28:09,440 - #13 while
INFO  16:28:09,440 - #37 (
INFO  16:28:09,440 - #43 x
INFO  16:28:09,440 - #23 <
INFO  16:28:09,440 - #42 10
INFO  16:28:09,440 - #38 )
INFO  16:28:09,440 - #33 ;
INFO  16:28:09,440 - #43 x
INFO  16:28:09,440 - #19 =
INFO  16:28:09,440 - #42 0
INFO  16:28:09,440 - #33 ;
INFO  16:28:09,440 - #12 do
INFO  16:28:09,440 - #35 {
INFO  16:28:09,440 - #43 dd
INFO  16:28:09,440 - #19 =
INFO  16:28:09,440 - #43 k
INFO  16:28:09,440 - #37 (
INFO  16:28:09,441 - #43 indexes
INFO  16:28:09,441 - #31 ,
INFO  16:28:09,441 - #43 indexes
INFO  16:28:09,441 - #39 [
INFO  16:28:09,441 - #43 x
INFO  16:28:09,441 - #40 ]
INFO  16:28:09,441 - #38 )
INFO  16:28:09,441 - #33 ;
INFO  16:28:09,441 - #18 print
INFO  16:28:09,441 - #37 (
INFO  16:28:09,441 - #43 dd
INFO  16:28:09,441 - #38 )
INFO  16:28:09,441 - #33 ;
INFO  16:28:09,442 - #43 x
INFO  16:28:09,442 - #28 ++
INFO  16:28:09,442 - #33 ;
INFO  16:28:09,442 - #36 }
INFO  16:28:09,442 - #13 while
INFO  16:28:09,442 - #37 (
INFO  16:28:09,442 - #43 x
INFO  16:28:09,442 - #25 <=
INFO  16:28:09,442 - #42 9
INFO  16:28:09,442 - #38 )
INFO  16:28:09,442 - #33 ;
INFO  16:28:09,442 - #43 br
INFO  16:28:09,442 - #19 =
INFO  16:28:09,442 - #16 new
INFO  16:28:09,442 - #43 int
INFO  16:28:09,442 - #39 [
INFO  16:28:09,442 - #42 10
INFO  16:28:09,442 - #40 ]
INFO  16:28:09,443 - #33 ;
INFO  16:28:09,443 - #43 x
INFO  16:28:09,443 - #19 =
INFO  16:28:09,443 - #42 0
INFO  16:28:09,443 - #33 ;
INFO  16:28:09,443 - #12 do
INFO  16:28:09,443 - #35 {
INFO  16:28:09,443 - #43 br
INFO  16:28:09,443 - #39 [
INFO  16:28:09,443 - #43 x
INFO  16:28:09,443 - #40 ]
INFO  16:28:09,443 - #19 =
INFO  16:28:09,443 - #43 x
INFO  16:28:09,443 - #49 +
INFO  16:28:09,443 - #42 10
INFO  16:28:09,443 - #33 ;
INFO  16:28:09,444 - #43 x
INFO  16:28:09,444 - #28 ++
INFO  16:28:09,444 - #33 ;
INFO  16:28:09,444 - #36 }
INFO  16:28:09,444 - #13 while
INFO  16:28:09,444 - #37 (
INFO  16:28:09,444 - #43 x
INFO  16:28:09,444 - #23 <
INFO  16:28:09,444 - #42 10
INFO  16:28:09,444 - #38 )
INFO  16:28:09,444 - #33 ;
INFO  16:28:09,444 - #43 x
INFO  16:28:09,445 - #19 =
INFO  16:28:09,445 - #42 0
INFO  16:28:09,445 - #33 ;
INFO  16:28:09,445 - #12 do
INFO  16:28:09,445 - #35 {
INFO  16:28:09,445 - #18 print
INFO  16:28:09,445 - #37 (
INFO  16:28:09,445 - #44 b
INFO  16:28:09,445 - #38 )
INFO  16:28:09,445 - #33 ;
INFO  16:28:09,445 - #18 print
INFO  16:28:09,445 - #37 (
INFO  16:28:09,445 - #44 r
INFO  16:28:09,445 - #38 )
INFO  16:28:09,445 - #33 ;
INFO  16:28:09,445 - #18 print
INFO  16:28:09,445 - #37 (
INFO  16:28:09,445 - #44 [
INFO  16:28:09,445 - #38 )
INFO  16:28:09,445 - #33 ;
INFO  16:28:09,446 - #18 print
INFO  16:28:09,446 - #37 (
INFO  16:28:09,446 - #43 x
INFO  16:28:09,446 - #31 ,
INFO  16:28:09,446 - #42 1
INFO  16:28:09,446 - #38 )
INFO  16:28:09,446 - #33 ;
INFO  16:28:09,446 - #18 print
INFO  16:28:09,446 - #37 (
INFO  16:28:09,446 - #44 ]
INFO  16:28:09,446 - #38 )
INFO  16:28:09,446 - #33 ;
INFO  16:28:09,446 - #18 print
INFO  16:28:09,446 - #37 (
INFO  16:28:09,446 - #44 =
INFO  16:28:09,446 - #38 )
INFO  16:28:09,447 - #33 ;
INFO  16:28:09,447 - #18 print
INFO  16:28:09,447 - #37 (
INFO  16:28:09,447 - #43 br
INFO  16:28:09,447 - #39 [
INFO  16:28:09,447 - #43 indexes
INFO  16:28:09,447 - #39 [
INFO  16:28:09,447 - #43 x
INFO  16:28:09,447 - #40 ]
INFO  16:28:09,447 - #40 ]
INFO  16:28:09,447 - #31 ,
INFO  16:28:09,447 - #42 1
INFO  16:28:09,447 - #38 )
INFO  16:28:09,447 - #33 ;
INFO  16:28:09,447 - #18 print
INFO  16:28:09,447 - #37 (
INFO  16:28:09,447 - #44  
INFO  16:28:09,447 - #38 )
INFO  16:28:09,447 - #33 ;
INFO  16:28:09,447 - #43 x
INFO  16:28:09,448 - #28 ++
INFO  16:28:09,448 - #33 ;
INFO  16:28:09,448 - #36 }
INFO  16:28:09,448 - #13 while
INFO  16:28:09,448 - #37 (
INFO  16:28:09,448 - #43 x
INFO  16:28:09,448 - #23 <
INFO  16:28:09,449 - #42 10
INFO  16:28:09,449 - #38 )
INFO  16:28:09,449 - #33 ;
INFO  16:28:09,449 - #36 }
INFO  16:28:09,449 - #36 }
INFO  16:28:09,463 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         a
                        ) [DesigIdent]
                        OptionalDesignatorArray(
                          HelperClass(
                          ) [HelperClass]
                          LSquareClass(
                          ) [LSquareClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       b
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [OptionalDesignatorArray]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                VarDeclListClass(
                  VarDeclListClass(
                    VarDeclListClass(
                      VarDeclListClass(
                        VarDeclListClass(
                          VarDeclListClass(
                            VarDeclListClass(
                              NoVarDeclList(
                              ) [NoVarDeclList]
                              VarDeclClass(
                                Type(
                                 int
                                ) [Type]
                                VarListSingle(
                                  VarClassNoArray(
                                   x
                                  ) [VarClassNoArray]
                                ) [VarListSingle]
                              ) [VarDeclClass]
                            ) [VarDeclListClass]
                            VarDeclClass(
                              Type(
                               bool
                              ) [Type]
                              VarListSingle(
                                VarClassNoArray(
                                 p
                                ) [VarClassNoArray]
                              ) [VarListSingle]
                            ) [VarDeclClass]
                          ) [VarDeclListClass]
                          VarDeclClass(
                            Type(
                             bool
                            ) [Type]
                            VarListSingle(
                              VarClassNoArray(
                               r
                              ) [VarClassNoArray]
                            ) [VarListSingle]
                          ) [VarDeclClass]
                        ) [VarDeclListClass]
                        VarDeclClass(
                          Type(
                           bool
                          ) [Type]
                          VarListSingle(
                            VarClassNoArray(
                             q
                            ) [VarClassNoArray]
                          ) [VarListSingle]
                        ) [VarDeclClass]
                      ) [VarDeclListClass]
                      VarDeclClass(
                        Type(
                         int
                        ) [Type]
                        VarListSingle(
                          VarClassArray(
                           br
                          ) [VarClassArray]
                        ) [VarListSingle]
                      ) [VarDeclClass]
                    ) [VarDeclListClass]
                    VarDeclClass(
                      Type(
                       int
                      ) [Type]
                      VarListSingle(
                        VarClassArray(
                         indexes
                        ) [VarClassArray]
                      ) [VarListSingle]
                    ) [VarDeclClass]
                  ) [VarDeclListClass]
                  VarDeclClass(
                    Type(
                     int
                    ) [Type]
                    VarListSingle(
                      VarClassNoArray(
                       dd
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                  ) [VarDeclClass]
                ) [VarDeclListClass]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     ee
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 int
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   ff
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 gg
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               hh
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             ii
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              Statements(
                                Statements(
                                  Statements(
                                    NoStmt(
                                    ) [NoStmt]
                                    Assignment(
                                      DesignatorStatementOptionsClassAssignExpression(
                                        Designator(
                                          DesigIdent(
                                           x
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                        AssignOpClass(
                                          AssignOperationClass(
                                          ) [AssignOperationClass]
                                        ) [AssignOpClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 3
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [DesignatorStatementOptionsClassAssignExpression]
                                    ) [Assignment]
                                  ) [Statements]
                                  Assignment(
                                    DesignatorStatementOptionsClassAssignExpression(
                                      Designator(
                                        DesigIdent(
                                         dd
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                      AssignOpClass(
                                        AssignOperationClass(
                                        ) [AssignOperationClass]
                                      ) [AssignOpClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              NumberConst(
                                               6
                                              ) [NumberConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [DesignatorStatementOptionsClassAssignExpression]
                                  ) [Assignment]
                                ) [Statements]
                                IfStatement(
                                  IfConditionNoError(
                                    ConditionClass(
                                      CondTermClass(
                                        CondFactClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     x
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                          CondFactOptionalClass(
                                            LessOperationClass(
                                            ) [LessOperationClass]
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  DesignatorClass(
                                                    Designator(
                                                      DesigIdent(
                                                       dd
                                                      ) [DesigIdent]
                                                      NoOptionalDesignatorClass(
                                                      ) [NoOptionalDesignatorClass]
                                                    ) [Designator]
                                                  ) [DesignatorClass]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [CondFactOptionalClass]
                                        ) [CondFactClass]
                                        NoCondTermOptionalClass(
                                        ) [NoCondTermOptionalClass]
                                      ) [CondTermClass]
                                      NoConditionOptionalClass(
                                      ) [NoConditionOptionalClass]
                                    ) [ConditionClass]
                                  ) [IfConditionNoError]
                                  StatementStatement(
                                    Statements(
                                      Statements(
                                        Statements(
                                          Statements(
                                            Statements(
                                              Statements(
                                                NoStmt(
                                                ) [NoStmt]
                                                IfStatement(
                                                  IfConditionNoError(
                                                    ConditionClass(
                                                      CondTermClass(
                                                        CondFactClass(
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                DesignatorClass(
                                                                  Designator(
                                                                    DesigIdent(
                                                                     x
                                                                    ) [DesigIdent]
                                                                    NoOptionalDesignatorClass(
                                                                    ) [NoOptionalDesignatorClass]
                                                                  ) [Designator]
                                                                ) [DesignatorClass]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                          CondFactOptionalClass(
                                                            RelationOperationClassEqualComparation(
                                                            ) [RelationOperationClassEqualComparation]
                                                            NormalExpressionClass(
                                                              ExprFirstOptionClassWithMinus(
                                                                TermClass(
                                                                  NumberConst(
                                                                   3
                                                                  ) [NumberConst]
                                                                  NoTermOptionalListClass(
                                                                  ) [NoTermOptionalListClass]
                                                                ) [TermClass]
                                                                NoExprOptionalListClass(
                                                                ) [NoExprOptionalListClass]
                                                              ) [ExprFirstOptionClassWithMinus]
                                                            ) [NormalExpressionClass]
                                                          ) [CondFactOptionalClass]
                                                        ) [CondFactClass]
                                                        NoCondTermOptionalClass(
                                                        ) [NoCondTermOptionalClass]
                                                      ) [CondTermClass]
                                                      NoConditionOptionalClass(
                                                      ) [NoConditionOptionalClass]
                                                    ) [ConditionClass]
                                                  ) [IfConditionNoError]
                                                  StatementStatement(
                                                    Statements(
                                                      Statements(
                                                        NoStmt(
                                                        ) [NoStmt]
                                                        PrintStmt(
                                                          ClassOneClass(
                                                            NormalExpressionClass(
                                                              ExprFirstOptionClassWithMinus(
                                                                TermClass(
                                                                  CharConst(
                                                                   d
                                                                  ) [CharConst]
                                                                  NoTermOptionalListClass(
                                                                  ) [NoTermOptionalListClass]
                                                                ) [TermClass]
                                                                NoExprOptionalListClass(
                                                                ) [NoExprOptionalListClass]
                                                              ) [ExprFirstOptionClassWithMinus]
                                                            ) [NormalExpressionClass]
                                                          ) [ClassOneClass]
                                                          NoCommaNumberClass(
                                                          ) [NoCommaNumberClass]
                                                        ) [PrintStmt]
                                                      ) [Statements]
                                                      PrintStmt(
                                                        ClassOneClass(
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                CharConst(
                                                                 a
                                                                ) [CharConst]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                        ) [ClassOneClass]
                                                        NoCommaNumberClass(
                                                        ) [NoCommaNumberClass]
                                                      ) [PrintStmt]
                                                    ) [Statements]
                                                  ) [StatementStatement]
                                                  Empty(
                                                  ) [Empty]
                                                  NoOptionalStatement(
                                                  ) [NoOptionalStatement]
                                                ) [IfStatement]
                                              ) [Statements]
                                              IfStatement(
                                                IfConditionNoError(
                                                  ConditionClass(
                                                    CondTermClass(
                                                      CondFactClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              DesignatorClass(
                                                                Designator(
                                                                  DesigIdent(
                                                                   dd
                                                                  ) [DesigIdent]
                                                                  NoOptionalDesignatorClass(
                                                                  ) [NoOptionalDesignatorClass]
                                                                ) [Designator]
                                                              ) [DesignatorClass]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                        CondFactOptionalClass(
                                                          RelationOperationClassNotEqualComparation(
                                                          ) [RelationOperationClassNotEqualComparation]
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                NumberConst(
                                                                 5
                                                                ) [NumberConst]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                        ) [CondFactOptionalClass]
                                                      ) [CondFactClass]
                                                      NoCondTermOptionalClass(
                                                      ) [NoCondTermOptionalClass]
                                                    ) [CondTermClass]
                                                    NoConditionOptionalClass(
                                                    ) [NoConditionOptionalClass]
                                                  ) [ConditionClass]
                                                ) [IfConditionNoError]
                                                StatementStatement(
                                                  Statements(
                                                    Statements(
                                                      NoStmt(
                                                      ) [NoStmt]
                                                      PrintStmt(
                                                        ClassOneClass(
                                                          NormalExpressionClass(
                                                            ExprFirstOptionClassWithMinus(
                                                              TermClass(
                                                                CharConst(
                                                                 d
                                                                ) [CharConst]
                                                                NoTermOptionalListClass(
                                                                ) [NoTermOptionalListClass]
                                                              ) [TermClass]
                                                              NoExprOptionalListClass(
                                                              ) [NoExprOptionalListClass]
                                                            ) [ExprFirstOptionClassWithMinus]
                                                          ) [NormalExpressionClass]
                                                        ) [ClassOneClass]
                                                        NoCommaNumberClass(
                                                        ) [NoCommaNumberClass]
                                                      ) [PrintStmt]
                                                    ) [Statements]
                                                    PrintStmt(
                                                      ClassOneClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              CharConst(
                                                               a
                                                              ) [CharConst]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [ClassOneClass]
                                                      NoCommaNumberClass(
                                                      ) [NoCommaNumberClass]
                                                    ) [PrintStmt]
                                                  ) [Statements]
                                                ) [StatementStatement]
                                                Empty(
                                                ) [Empty]
                                                NoOptionalStatement(
                                                ) [NoOptionalStatement]
                                              ) [IfStatement]
                                            ) [Statements]
                                            IfStatement(
                                              IfConditionNoError(
                                                ConditionClass(
                                                  CondTermClass(
                                                    CondFactClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            DesignatorClass(
                                                              Designator(
                                                                DesigIdent(
                                                                 x
                                                                ) [DesigIdent]
                                                                NoOptionalDesignatorClass(
                                                                ) [NoOptionalDesignatorClass]
                                                              ) [Designator]
                                                            ) [DesignatorClass]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                      CondFactOptionalClass(
                                                        GreaterOperationClass(
                                                        ) [GreaterOperationClass]
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              NumberConst(
                                                               2
                                                              ) [NumberConst]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [CondFactOptionalClass]
                                                    ) [CondFactClass]
                                                    NoCondTermOptionalClass(
                                                    ) [NoCondTermOptionalClass]
                                                  ) [CondTermClass]
                                                  NoConditionOptionalClass(
                                                  ) [NoConditionOptionalClass]
                                                ) [ConditionClass]
                                              ) [IfConditionNoError]
                                              StatementStatement(
                                                Statements(
                                                  Statements(
                                                    NoStmt(
                                                    ) [NoStmt]
                                                    PrintStmt(
                                                      ClassOneClass(
                                                        NormalExpressionClass(
                                                          ExprFirstOptionClassWithMinus(
                                                            TermClass(
                                                              CharConst(
                                                               d
                                                              ) [CharConst]
                                                              NoTermOptionalListClass(
                                                              ) [NoTermOptionalListClass]
                                                            ) [TermClass]
                                                            NoExprOptionalListClass(
                                                            ) [NoExprOptionalListClass]
                                                          ) [ExprFirstOptionClassWithMinus]
                                                        ) [NormalExpressionClass]
                                                      ) [ClassOneClass]
                                                      NoCommaNumberClass(
                                                      ) [NoCommaNumberClass]
                                                    ) [PrintStmt]
                                                  ) [Statements]
                                                  PrintStmt(
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            CharConst(
                                                             a
                                                            ) [CharConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                    NoCommaNumberClass(
                                                    ) [NoCommaNumberClass]
                                                  ) [PrintStmt]
                                                ) [Statements]
                                              ) [StatementStatement]
                                              Empty(
                                              ) [Empty]
                                              NoOptionalStatement(
                                              ) [NoOptionalStatement]
                                            ) [IfStatement]
                                          ) [Statements]
                                          IfStatement(
                                            IfConditionNoError(
                                              ConditionClass(
                                                CondTermClass(
                                                  CondFactClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          DesignatorClass(
                                                            Designator(
                                                              DesigIdent(
                                                               dd
                                                              ) [DesigIdent]
                                                              NoOptionalDesignatorClass(
                                                              ) [NoOptionalDesignatorClass]
                                                            ) [Designator]
                                                          ) [DesignatorClass]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                    CondFactOptionalClass(
                                                      LessOperationClass(
                                                      ) [LessOperationClass]
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            NumberConst(
                                                             7
                                                            ) [NumberConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [CondFactOptionalClass]
                                                  ) [CondFactClass]
                                                  NoCondTermOptionalClass(
                                                  ) [NoCondTermOptionalClass]
                                                ) [CondTermClass]
                                                NoConditionOptionalClass(
                                                ) [NoConditionOptionalClass]
                                              ) [ConditionClass]
                                            ) [IfConditionNoError]
                                            StatementStatement(
                                              Statements(
                                                Statements(
                                                  NoStmt(
                                                  ) [NoStmt]
                                                  PrintStmt(
                                                    ClassOneClass(
                                                      NormalExpressionClass(
                                                        ExprFirstOptionClassWithMinus(
                                                          TermClass(
                                                            CharConst(
                                                             d
                                                            ) [CharConst]
                                                            NoTermOptionalListClass(
                                                            ) [NoTermOptionalListClass]
                                                          ) [TermClass]
                                                          NoExprOptionalListClass(
                                                          ) [NoExprOptionalListClass]
                                                        ) [ExprFirstOptionClassWithMinus]
                                                      ) [NormalExpressionClass]
                                                    ) [ClassOneClass]
                                                    NoCommaNumberClass(
                                                    ) [NoCommaNumberClass]
                                                  ) [PrintStmt]
                                                ) [Statements]
                                                PrintStmt(
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          CharConst(
                                                           a
                                                          ) [CharConst]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                  NoCommaNumberClass(
                                                  ) [NoCommaNumberClass]
                                                ) [PrintStmt]
                                              ) [Statements]
                                            ) [StatementStatement]
                                            Empty(
                                            ) [Empty]
                                            NoOptionalStatement(
                                            ) [NoOptionalStatement]
                                          ) [IfStatement]
                                        ) [Statements]
                                        IfStatement(
                                          IfConditionNoError(
                                            ConditionClass(
                                              CondTermClass(
                                                CondFactClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        DesignatorClass(
                                                          Designator(
                                                            DesigIdent(
                                                             dd
                                                            ) [DesigIdent]
                                                            NoOptionalDesignatorClass(
                                                            ) [NoOptionalDesignatorClass]
                                                          ) [Designator]
                                                        ) [DesignatorClass]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                  CondFactOptionalClass(
                                                    LessOrEqualOperationClass(
                                                    ) [LessOrEqualOperationClass]
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          NumberConst(
                                                           6
                                                          ) [NumberConst]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [CondFactOptionalClass]
                                                ) [CondFactClass]
                                                NoCondTermOptionalClass(
                                                ) [NoCondTermOptionalClass]
                                              ) [CondTermClass]
                                              NoConditionOptionalClass(
                                              ) [NoConditionOptionalClass]
                                            ) [ConditionClass]
                                          ) [IfConditionNoError]
                                          StatementStatement(
                                            Statements(
                                              Statements(
                                                NoStmt(
                                                ) [NoStmt]
                                                PrintStmt(
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          CharConst(
                                                           d
                                                          ) [CharConst]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                  NoCommaNumberClass(
                                                  ) [NoCommaNumberClass]
                                                ) [PrintStmt]
                                              ) [Statements]
                                              PrintStmt(
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        CharConst(
                                                         a
                                                        ) [CharConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                                NoCommaNumberClass(
                                                ) [NoCommaNumberClass]
                                              ) [PrintStmt]
                                            ) [Statements]
                                          ) [StatementStatement]
                                          Empty(
                                          ) [Empty]
                                          NoOptionalStatement(
                                          ) [NoOptionalStatement]
                                        ) [IfStatement]
                                      ) [Statements]
                                      IfStatement(
                                        IfConditionNoError(
                                          ConditionClass(
                                            CondTermClass(
                                              CondFactClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           x
                                                          ) [DesigIdent]
                                                          NoOptionalDesignatorClass(
                                                          ) [NoOptionalDesignatorClass]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                                CondFactOptionalClass(
                                                  GreaterOrEqualOperationClass(
                                                  ) [GreaterOrEqualOperationClass]
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         3
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [CondFactOptionalClass]
                                              ) [CondFactClass]
                                              NoCondTermOptionalClass(
                                              ) [NoCondTermOptionalClass]
                                            ) [CondTermClass]
                                            NoConditionOptionalClass(
                                            ) [NoConditionOptionalClass]
                                          ) [ConditionClass]
                                        ) [IfConditionNoError]
                                        StatementStatement(
                                          Statements(
                                            Statements(
                                              NoStmt(
                                              ) [NoStmt]
                                              PrintStmt(
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        CharConst(
                                                         d
                                                        ) [CharConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                                NoCommaNumberClass(
                                                ) [NoCommaNumberClass]
                                              ) [PrintStmt]
                                            ) [Statements]
                                            PrintStmt(
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      CharConst(
                                                       a
                                                      ) [CharConst]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                              NoCommaNumberClass(
                                              ) [NoCommaNumberClass]
                                            ) [PrintStmt]
                                          ) [Statements]
                                        ) [StatementStatement]
                                        Empty(
                                        ) [Empty]
                                        NoOptionalStatement(
                                        ) [NoOptionalStatement]
                                      ) [IfStatement]
                                    ) [Statements]
                                  ) [StatementStatement]
                                  Empty(
                                  ) [Empty]
                                  YesOptionalStatement(
                                    StatementStatement(
                                      Statements(
                                        NoStmt(
                                        ) [NoStmt]
                                        PrintStmt(
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   3
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                          NoCommaNumberClass(
                                          ) [NoCommaNumberClass]
                                        ) [PrintStmt]
                                      ) [Statements]
                                    ) [StatementStatement]
                                  ) [YesOptionalStatement]
                                ) [IfStatement]
                              ) [Statements]
                              Assignment(
                                DesignatorStatementOptionsClassAssignExpression(
                                  Designator(
                                    DesigIdent(
                                     x
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           10
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [Assignment]
                            ) [Statements]
                            DoWhileStatement(
                              DoClass(
                              ) [DoClass]
                              StatementStatement(
                                Statements(
                                  Statements(
                                    Statements(
                                      Statements(
                                        Statements(
                                          NoStmt(
                                          ) [NoStmt]
                                          PrintStmt(
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    CharConst(
                                                     x
                                                    ) [CharConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                            NoCommaNumberClass(
                                            ) [NoCommaNumberClass]
                                          ) [PrintStmt]
                                        ) [Statements]
                                        PrintStmt(
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  CharConst(
                                                   =
                                                  ) [CharConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                          NoCommaNumberClass(
                                          ) [NoCommaNumberClass]
                                        ) [PrintStmt]
                                      ) [Statements]
                                      PrintStmt(
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     x
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                        CommaNumberClass(
                                         1
                                        ) [CommaNumberClass]
                                      ) [PrintStmt]
                                    ) [Statements]
                                    PrintStmt(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              CharConst(
                                                
                                              ) [CharConst]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                      NoCommaNumberClass(
                                      ) [NoCommaNumberClass]
                                    ) [PrintStmt]
                                  ) [Statements]
                                  Assignment(
                                    DesignatorStatementMinusMinus(
                                      Designator(
                                        DesigIdent(
                                         x
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorStatementMinusMinus]
                                  ) [Assignment]
                                ) [Statements]
                              ) [StatementStatement]
                              LParenClass(
                              ) [LParenClass]
                              ConditionClass(
                                CondTermClass(
                                  CondFactClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               x
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                    CondFactOptionalClass(
                                      GreaterOrEqualOperationClass(
                                      ) [GreaterOrEqualOperationClass]
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [CondFactOptionalClass]
                                  ) [CondFactClass]
                                  NoCondTermOptionalClass(
                                  ) [NoCondTermOptionalClass]
                                ) [CondTermClass]
                                NoConditionOptionalClass(
                                ) [NoConditionOptionalClass]
                              ) [ConditionClass]
                              RParenClass(
                              ) [RParenClass]
                            ) [DoWhileStatement]
                          ) [Statements]
                          Assignment(
                            DesignatorStatementOptionsClassAssignExpression(
                              Designator(
                                DesigIdent(
                                 indexes
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              AssignOpClass(
                                AssignOperationClass(
                                ) [AssignOperationClass]
                              ) [AssignOpClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NewFactorClass(
                                        Type(
                                         int
                                        ) [Type]
                                        FactorOptionalSecondClass(
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   10
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [FactorOptionalSecondClass]
                                      ) [NewFactorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [DesignatorStatementOptionsClassAssignExpression]
                          ) [Assignment]
                        ) [Statements]
                        Assignment(
                          DesignatorStatementOptionsClassAssignExpression(
                            Designator(
                              DesigIdent(
                               x
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                            AssignOpClass(
                              AssignOperationClass(
                              ) [AssignOperationClass]
                            ) [AssignOpClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [DesignatorStatementOptionsClassAssignExpression]
                        ) [Assignment]
                      ) [Statements]
                      DoWhileStatement(
                        DoClass(
                        ) [DoClass]
                        StatementStatement(
                          Statements(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              Assignment(
                                DesignatorStatementOptionsClassAssignExpression(
                                  Designator(
                                    DesigIdent(
                                     indexes
                                    ) [DesigIdent]
                                    OptionalDesignatorArray(
                                      HelperClass(
                                      ) [HelperClass]
                                      LSquareClass(
                                      ) [LSquareClass]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                  DesigIdent(
                                                   x
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [OptionalDesignatorArray]
                                  ) [Designator]
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               x
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [Assignment]
                            ) [Statements]
                            Assignment(
                              DesignatorStatementPlusPlus(
                                Designator(
                                  DesigIdent(
                                   x
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorStatementPlusPlus]
                            ) [Assignment]
                          ) [Statements]
                        ) [StatementStatement]
                        LParenClass(
                        ) [LParenClass]
                        ConditionClass(
                          CondTermClass(
                            CondFactClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         x
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                              CondFactOptionalClass(
                                LessOperationClass(
                                ) [LessOperationClass]
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       10
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [CondFactOptionalClass]
                            ) [CondFactClass]
                            NoCondTermOptionalClass(
                            ) [NoCondTermOptionalClass]
                          ) [CondTermClass]
                          NoConditionOptionalClass(
                          ) [NoConditionOptionalClass]
                        ) [ConditionClass]
                        RParenClass(
                        ) [RParenClass]
                      ) [DoWhileStatement]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           x
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  DoWhileStatement(
                    DoClass(
                    ) [DoClass]
                    StatementStatement(
                      Statements(
                        Statements(
                          Statements(
                            NoStmt(
                            ) [NoStmt]
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                  DesigIdent(
                                   dd
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        FactorOptionalParams(
                                          Designator(
                                            DesigIdent(
                                             k
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                          Actuals(
                                            ActualParams(
                                              ActualParam(
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        DesignatorClass(
                                                          Designator(
                                                            DesigIdent(
                                                             indexes
                                                            ) [DesigIdent]
                                                            NoOptionalDesignatorClass(
                                                            ) [NoOptionalDesignatorClass]
                                                          ) [Designator]
                                                        ) [DesignatorClass]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [ActualParam]
                                              ClassOneClass(
                                                NormalExpressionClass(
                                                  ExprFirstOptionClassWithMinus(
                                                    TermClass(
                                                      DesignatorClass(
                                                        Designator(
                                                          DesigIdent(
                                                           indexes
                                                          ) [DesigIdent]
                                                          OptionalDesignatorArray(
                                                            HelperClass(
                                                            ) [HelperClass]
                                                            LSquareClass(
                                                            ) [LSquareClass]
                                                            ClassOneClass(
                                                              NormalExpressionClass(
                                                                ExprFirstOptionClassWithMinus(
                                                                  TermClass(
                                                                    DesignatorClass(
                                                                      Designator(
                                                                        DesigIdent(
                                                                         x
                                                                        ) [DesigIdent]
                                                                        NoOptionalDesignatorClass(
                                                                        ) [NoOptionalDesignatorClass]
                                                                      ) [Designator]
                                                                    ) [DesignatorClass]
                                                                    NoTermOptionalListClass(
                                                                    ) [NoTermOptionalListClass]
                                                                  ) [TermClass]
                                                                  NoExprOptionalListClass(
                                                                  ) [NoExprOptionalListClass]
                                                                ) [ExprFirstOptionClassWithMinus]
                                                              ) [NormalExpressionClass]
                                                            ) [ClassOneClass]
                                                          ) [OptionalDesignatorArray]
                                                        ) [Designator]
                                                      ) [DesignatorClass]
                                                      NoTermOptionalListClass(
                                                      ) [NoTermOptionalListClass]
                                                    ) [TermClass]
                                                    NoExprOptionalListClass(
                                                    ) [NoExprOptionalListClass]
                                                  ) [ExprFirstOptionClassWithMinus]
                                                ) [NormalExpressionClass]
                                              ) [ClassOneClass]
                                            ) [ActualParams]
                                          ) [Actuals]
                                        ) [FactorOptionalParams]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [Statements]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         dd
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                        Assignment(
                          DesignatorStatementPlusPlus(
                            Designator(
                              DesigIdent(
                               x
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorStatementPlusPlus]
                        ) [Assignment]
                      ) [Statements]
                    ) [StatementStatement]
                    LParenClass(
                    ) [LParenClass]
                    ConditionClass(
                      CondTermClass(
                        CondFactClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     x
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                          CondFactOptionalClass(
                            LessOrEqualOperationClass(
                            ) [LessOrEqualOperationClass]
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   9
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [CondFactOptionalClass]
                        ) [CondFactClass]
                        NoCondTermOptionalClass(
                        ) [NoCondTermOptionalClass]
                      ) [CondTermClass]
                      NoConditionOptionalClass(
                      ) [NoConditionOptionalClass]
                    ) [ConditionClass]
                    RParenClass(
                    ) [RParenClass]
                  ) [DoWhileStatement]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NewFactorClass(
                              Type(
                               int
                              ) [Type]
                              FactorOptionalSecondClass(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         10
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [FactorOptionalSecondClass]
                            ) [NewFactorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     x
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           br
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         x
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     x
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              ExprOptionalListClass(
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  NumberConst(
                                   10
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementPlusPlus(
                      Designator(
                        DesigIdent(
                         x
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorStatementPlusPlus]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               x
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      LessOperationClass(
                      ) [LessOperationClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             10
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 x
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       0
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        DoWhileStatement(
          DoClass(
          ) [DoClass]
          StatementStatement(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        Statements(
                          Statements(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              PrintStmt(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        CharConst(
                                         b
                                        ) [CharConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                                NoCommaNumberClass(
                                ) [NoCommaNumberClass]
                              ) [PrintStmt]
                            ) [Statements]
                            PrintStmt(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      CharConst(
                                       r
                                      ) [CharConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                              NoCommaNumberClass(
                              ) [NoCommaNumberClass]
                            ) [PrintStmt]
                          ) [Statements]
                          PrintStmt(
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    CharConst(
                                     [
                                    ) [CharConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                            NoCommaNumberClass(
                            ) [NoCommaNumberClass]
                          ) [PrintStmt]
                        ) [Statements]
                        PrintStmt(
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       x
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                          CommaNumberClass(
                           1
                          ) [CommaNumberClass]
                        ) [PrintStmt]
                      ) [Statements]
                      PrintStmt(
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                CharConst(
                                 ]
                                ) [CharConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                        NoCommaNumberClass(
                        ) [NoCommaNumberClass]
                      ) [PrintStmt]
                    ) [Statements]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              CharConst(
                               =
                              ) [CharConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 br
                                ) [DesigIdent]
                                OptionalDesignatorArray(
                                  HelperClass(
                                  ) [HelperClass]
                                  LSquareClass(
                                  ) [LSquareClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               indexes
                                              ) [DesigIdent]
                                              OptionalDesignatorArray(
                                                HelperClass(
                                                ) [HelperClass]
                                                LSquareClass(
                                                ) [LSquareClass]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        DesignatorClass(
                                                          Designator(
                                                            DesigIdent(
                                                             x
                                                            ) [DesigIdent]
                                                            NoOptionalDesignatorClass(
                                                            ) [NoOptionalDesignatorClass]
                                                          ) [Designator]
                                                        ) [DesignatorClass]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [OptionalDesignatorArray]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [OptionalDesignatorArray]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    CommaNumberClass(
                     1
                    ) [CommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                PrintStmt(
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          CharConst(
                            
                          ) [CharConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                  NoCommaNumberClass(
                  ) [NoCommaNumberClass]
                ) [PrintStmt]
              ) [Statements]
              Assignment(
                DesignatorStatementPlusPlus(
                  Designator(
                    DesigIdent(
                     x
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                ) [DesignatorStatementPlusPlus]
              ) [Assignment]
            ) [Statements]
          ) [StatementStatement]
          LParenClass(
          ) [LParenClass]
          ConditionClass(
            CondTermClass(
              CondFactClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           x
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
                CondFactOptionalClass(
                  LessOperationClass(
                  ) [LessOperationClass]
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         10
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [CondFactOptionalClass]
              ) [CondFactClass]
              NoCondTermOptionalClass(
              ) [NoCondTermOptionalClass]
            ) [CondTermClass]
            NoConditionOptionalClass(
            ) [NoConditionOptionalClass]
          ) [ConditionClass]
          RParenClass(
          ) [RParenClass]
        ) [DoWhileStatement]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  16:28:09,467 - ===================================
INFO  16:28:09,470 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  16:28:09,470 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  16:28:09,470 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  16:28:09,470 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  16:28:09,470 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  16:28:09,470 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  16:28:09,470 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  16:28:09,471 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  16:28:09,471 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  16:28:09,471 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  16:28:09,471 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  16:28:09,471 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  16:28:09,471 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  16:28:09,471 - METHOD BODY STARTING!
INFO  16:28:09,471 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  16:28:09,471 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  16:28:09,471 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:28:09,471 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:28:09,471 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE array
INFO  16:28:09,472 - WE ARE USING AN ARRAY OF TYPE int ON LINE 9
INFO  16:28:09,472 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:28:09,472 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  16:28:09,472 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  16:28:09,472 - METHOD BODY ENDING!
INFO  16:28:09,472 - END OF DEFINING FUNCTION k
INFO  16:28:09,472 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  16:28:09,472 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  16:28:09,472 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  16:28:09,472 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  16:28:09,472 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  16:28:09,472 - VARIABLE r IS BEING DEFINED! ON LINE 27
INFO  16:28:09,472 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 27
INFO  16:28:09,472 - VARIABLE q IS BEING DEFINED! ON LINE 28
INFO  16:28:09,472 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 28
INFO  16:28:09,472 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 31
INFO  16:28:09,472 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 31
INFO  16:28:09,472 - ARRAY VARIABLE indexes IS BEING DEFINED! ON LINE 32
INFO  16:28:09,472 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  16:28:09,472 - VARIABLE dd IS BEING DEFINED! ON LINE 33
INFO  16:28:09,473 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  16:28:09,473 - VARIABLE ee IS BEING DEFINED! ON LINE 34
INFO  16:28:09,473 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 34
INFO  16:28:09,473 - VARIABLE ff IS BEING DEFINED! ON LINE 35
INFO  16:28:09,473 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 35
INFO  16:28:09,473 - VARIABLE gg IS BEING DEFINED! ON LINE 36
INFO  16:28:09,473 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 36
INFO  16:28:09,473 - VARIABLE hh IS BEING DEFINED! ON LINE 37
INFO  16:28:09,473 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 37
INFO  16:28:09,473 - VARIABLE ii IS BEING DEFINED! ON LINE 38
INFO  16:28:09,473 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 38
INFO  16:28:09,473 - METHOD BODY STARTING!
INFO  16:28:09,473 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,473 - BEGINNING OF AN ASSIGNEMENT! ON LINE 50
INFO  16:28:09,473 - CONST NUMBER 3 ON LINE 50
INFO  16:28:09,473 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:28:09,473 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 50
INFO  16:28:09,473 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 50
INFO  16:28:09,473 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  16:28:09,473 - BEGINNING OF AN ASSIGNEMENT! ON LINE 51
INFO  16:28:09,473 - CONST NUMBER 6 ON LINE 51
INFO  16:28:09,473 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  16:28:09,473 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 51
INFO  16:28:09,473 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 51
INFO  16:28:09,473 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,473 - WE ARE USING A VARIABLE OF TYPE int ON LINE 53
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  16:28:09,474 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  16:28:09,474 - WE ARE USING A VARIABLE OF TYPE int ON LINE 53
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 53
INFO  16:28:09,474 - USING TWO EXPRESSIONS OF TYPE int ON LINE 53
INFO  16:28:09,474 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,474 - WE ARE USING A VARIABLE OF TYPE int ON LINE 54
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:28:09,474 - CONST NUMBER 3 ON LINE 54
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 54
INFO  16:28:09,474 - USING TWO EXPRESSIONS OF TYPE int ON LINE 54
INFO  16:28:09,474 - CONST CHAR d ON LINE 55
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 55
INFO  16:28:09,474 - PRINT FUNCTION CALL IN USE! ON LINE 55
INFO  16:28:09,474 - CONST CHAR a ON LINE 56
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  16:28:09,474 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 56
INFO  16:28:09,474 - PRINT FUNCTION CALL IN USE! ON LINE 56
INFO  16:28:09,475 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  16:28:09,475 - WE ARE USING A VARIABLE OF TYPE int ON LINE 59
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  16:28:09,475 - CONST NUMBER 5 ON LINE 59
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  16:28:09,475 - USING TWO EXPRESSIONS OF TYPE int ON LINE 59
INFO  16:28:09,475 - CONST CHAR d ON LINE 60
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  16:28:09,475 - PRINT FUNCTION CALL IN USE! ON LINE 60
INFO  16:28:09,475 - CONST CHAR a ON LINE 61
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 61
INFO  16:28:09,475 - PRINT FUNCTION CALL IN USE! ON LINE 61
INFO  16:28:09,475 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,475 - WE ARE USING A VARIABLE OF TYPE int ON LINE 64
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:28:09,475 - CONST NUMBER 2 ON LINE 64
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  16:28:09,475 - USING TWO EXPRESSIONS OF TYPE int ON LINE 64
INFO  16:28:09,475 - CONST CHAR d ON LINE 65
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  16:28:09,475 - PRINT FUNCTION CALL IN USE! ON LINE 65
INFO  16:28:09,475 - CONST CHAR a ON LINE 66
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 66
INFO  16:28:09,475 - PRINT FUNCTION CALL IN USE! ON LINE 66
INFO  16:28:09,475 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  16:28:09,475 - WE ARE USING A VARIABLE OF TYPE int ON LINE 69
INFO  16:28:09,475 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  16:28:09,476 - CONST NUMBER 7 ON LINE 69
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 69
INFO  16:28:09,476 - USING TWO EXPRESSIONS OF TYPE int ON LINE 69
INFO  16:28:09,476 - CONST CHAR d ON LINE 70
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  16:28:09,476 - PRINT FUNCTION CALL IN USE! ON LINE 70
INFO  16:28:09,476 - CONST CHAR a ON LINE 71
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 71
INFO  16:28:09,476 - PRINT FUNCTION CALL IN USE! ON LINE 71
INFO  16:28:09,476 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  16:28:09,476 - WE ARE USING A VARIABLE OF TYPE int ON LINE 74
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  16:28:09,476 - CONST NUMBER 6 ON LINE 74
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 74
INFO  16:28:09,476 - USING TWO EXPRESSIONS OF TYPE int ON LINE 74
INFO  16:28:09,476 - CONST CHAR d ON LINE 75
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 75
INFO  16:28:09,476 - PRINT FUNCTION CALL IN USE! ON LINE 75
INFO  16:28:09,476 - CONST CHAR a ON LINE 76
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 76
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 76
INFO  16:28:09,476 - PRINT FUNCTION CALL IN USE! ON LINE 76
INFO  16:28:09,476 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,476 - WE ARE USING A VARIABLE OF TYPE int ON LINE 79
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 79
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 79
INFO  16:28:09,476 - CONST NUMBER 3 ON LINE 79
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 79
INFO  16:28:09,476 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 79
INFO  16:28:09,476 - USING TWO EXPRESSIONS OF TYPE int ON LINE 79
INFO  16:28:09,477 - CONST CHAR d ON LINE 80
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 80
INFO  16:28:09,477 - PRINT FUNCTION CALL IN USE! ON LINE 80
INFO  16:28:09,477 - CONST CHAR a ON LINE 81
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 81
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 81
INFO  16:28:09,477 - PRINT FUNCTION CALL IN USE! ON LINE 81
INFO  16:28:09,477 - CONST NUMBER 3 ON LINE 85
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 85
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 85
INFO  16:28:09,477 - PRINT FUNCTION CALL IN USE! ON LINE 85
INFO  16:28:09,477 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,477 - BEGINNING OF AN ASSIGNEMENT! ON LINE 88
INFO  16:28:09,477 - CONST NUMBER 10 ON LINE 88
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 88
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 88
INFO  16:28:09,477 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 88
INFO  16:28:09,477 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:28:09,477 - CONST CHAR x ON LINE 90
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 90
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 90
INFO  16:28:09,477 - PRINT FUNCTION CALL IN USE! ON LINE 90
INFO  16:28:09,477 - CONST CHAR = ON LINE 91
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 91
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 91
INFO  16:28:09,477 - PRINT FUNCTION CALL IN USE! ON LINE 91
INFO  16:28:09,477 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,477 - WE ARE USING A VARIABLE OF TYPE int ON LINE 92
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 92
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 92
INFO  16:28:09,477 - PRINT FUNCTION CALL IN USE! ON LINE 92
INFO  16:28:09,477 - CONST CHAR   ON LINE 93
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 93
INFO  16:28:09,477 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 93
INFO  16:28:09,477 - PRINT FUNCTION CALL IN USE! ON LINE 93
INFO  16:28:09,477 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,477 - USING -- ON x ON LINE 94
INFO  16:28:09,477 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,478 - WE ARE USING A VARIABLE OF TYPE int ON LINE 96
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 96
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 96
INFO  16:28:09,478 - CONST NUMBER 0 ON LINE 96
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 96
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 96
INFO  16:28:09,478 - USING TWO EXPRESSIONS OF TYPE int ON LINE 96
INFO  16:28:09,478 - ENDING OF A DO...WHILE LOOP! ON LINE 89
INFO  16:28:09,478 - CURRENT VARIABLE IN USE IS indexes AND IT IS OF TYPE array
INFO  16:28:09,478 - BEGINNING OF AN ASSIGNEMENT! ON LINE 98
INFO  16:28:09,478 - CONST NUMBER 10 ON LINE 98
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 98
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 98
INFO  16:28:09,478 - USAGE OF KEYWORD NEW! ON LINE 98
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 98
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 98
INFO  16:28:09,478 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 98
INFO  16:28:09,478 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,478 - BEGINNING OF AN ASSIGNEMENT! ON LINE 99
INFO  16:28:09,478 - CONST NUMBER 0 ON LINE 99
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 99
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 99
INFO  16:28:09,478 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 99
INFO  16:28:09,478 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:28:09,478 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,478 - WE ARE USING A VARIABLE OF TYPE int ON LINE 101
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 101
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 101
INFO  16:28:09,478 - CURRENT VARIABLE IN USE IS indexes AND IT IS OF TYPE array
INFO  16:28:09,478 - BEGINNING OF AN ASSIGNEMENT! ON LINE 101
INFO  16:28:09,478 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,478 - WE ARE USING A VARIABLE OF TYPE int ON LINE 101
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 101
INFO  16:28:09,478 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 101
INFO  16:28:09,478 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 101
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,479 - USING ++ ON x ON LINE 102
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,479 - WE ARE USING A VARIABLE OF TYPE int ON LINE 104
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 104
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 104
INFO  16:28:09,479 - CONST NUMBER 10 ON LINE 104
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 104
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 104
INFO  16:28:09,479 - USING TWO EXPRESSIONS OF TYPE int ON LINE 104
INFO  16:28:09,479 - ENDING OF A DO...WHILE LOOP! ON LINE 100
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,479 - BEGINNING OF AN ASSIGNEMENT! ON LINE 106
INFO  16:28:09,479 - CONST NUMBER 0 ON LINE 106
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 106
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 106
INFO  16:28:09,479 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 106
INFO  16:28:09,479 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  16:28:09,479 - BEGINNING OF AN ASSIGNEMENT! ON LINE 108
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS indexes AND IT IS OF TYPE array
INFO  16:28:09,479 - WE ARE USING A VARIABLE OF TYPE array ON LINE 108
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,479 - WE ARE USING A VARIABLE OF TYPE int ON LINE 108
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,479 - CURRENT VARIABLE IN USE IS indexes AND IT IS OF TYPE array
INFO  16:28:09,479 - WE ARE USING AN ARRAY OF TYPE int ON LINE 108
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,479 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,479 - TYPE -> array <- AND -> array <- ON LINE 108
INFO  16:28:09,480 - TYPE -> int <- AND -> int <- ON LINE 108
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 108
INFO  16:28:09,480 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 108
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS dd AND IT IS OF TYPE int
INFO  16:28:09,480 - WE ARE USING A VARIABLE OF TYPE int ON LINE 109
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 109
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 109
INFO  16:28:09,480 - PRINT FUNCTION CALL IN USE! ON LINE 109
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,480 - USING ++ ON x ON LINE 110
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,480 - WE ARE USING A VARIABLE OF TYPE int ON LINE 112
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 112
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 112
INFO  16:28:09,480 - CONST NUMBER 9 ON LINE 112
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 112
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 112
INFO  16:28:09,480 - USING TWO EXPRESSIONS OF TYPE int ON LINE 112
INFO  16:28:09,480 - ENDING OF A DO...WHILE LOOP! ON LINE 107
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:28:09,480 - BEGINNING OF AN ASSIGNEMENT! ON LINE 115
INFO  16:28:09,480 - CONST NUMBER 10 ON LINE 115
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 115
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 115
INFO  16:28:09,480 - USAGE OF KEYWORD NEW! ON LINE 115
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 115
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 115
INFO  16:28:09,480 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 115
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,480 - BEGINNING OF AN ASSIGNEMENT! ON LINE 116
INFO  16:28:09,480 - CONST NUMBER 0 ON LINE 116
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 116
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 116
INFO  16:28:09,480 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 116
INFO  16:28:09,480 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,480 - WE ARE USING A VARIABLE OF TYPE int ON LINE 118
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 118
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 118
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:28:09,480 - BEGINNING OF AN ASSIGNEMENT! ON LINE 118
INFO  16:28:09,480 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,480 - WE ARE USING A VARIABLE OF TYPE int ON LINE 118
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 118
INFO  16:28:09,480 - CONST NUMBER 10 ON LINE 118
INFO  16:28:09,480 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 118
INFO  16:28:09,481 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 11
INFO  16:28:09,481 - USING INTEGERS IN TERM! ON LINE 118
INFO  16:28:09,481 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 118
INFO  16:28:09,481 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,481 - USING ++ ON x ON LINE 119
INFO  16:28:09,481 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,481 - WE ARE USING A VARIABLE OF TYPE int ON LINE 120
INFO  16:28:09,481 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 120
INFO  16:28:09,481 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 120
INFO  16:28:09,481 - CONST NUMBER 10 ON LINE 120
INFO  16:28:09,481 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 120
INFO  16:28:09,481 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 120
INFO  16:28:09,481 - USING TWO EXPRESSIONS OF TYPE int ON LINE 120
INFO  16:28:09,481 - ENDING OF A DO...WHILE LOOP! ON LINE 117
INFO  16:28:09,481 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,481 - BEGINNING OF AN ASSIGNEMENT! ON LINE 122
INFO  16:28:09,481 - CONST NUMBER 0 ON LINE 122
INFO  16:28:09,481 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 122
INFO  16:28:09,481 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 122
INFO  16:28:09,481 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 122
INFO  16:28:09,481 - BEGINNING OF A DO...WHILE LOOP!
INFO  16:28:09,481 - CONST CHAR b ON LINE 124
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 124
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 124
INFO  16:28:09,574 - PRINT FUNCTION CALL IN USE! ON LINE 124
INFO  16:28:09,574 - CONST CHAR r ON LINE 125
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 125
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 125
INFO  16:28:09,574 - PRINT FUNCTION CALL IN USE! ON LINE 125
INFO  16:28:09,574 - CONST CHAR [ ON LINE 126
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 126
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 126
INFO  16:28:09,574 - PRINT FUNCTION CALL IN USE! ON LINE 126
INFO  16:28:09,574 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,574 - WE ARE USING A VARIABLE OF TYPE int ON LINE 127
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 127
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 127
INFO  16:28:09,574 - PRINT FUNCTION CALL IN USE! ON LINE 127
INFO  16:28:09,574 - CONST CHAR ] ON LINE 128
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 128
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 128
INFO  16:28:09,574 - PRINT FUNCTION CALL IN USE! ON LINE 128
INFO  16:28:09,574 - CONST CHAR = ON LINE 129
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 129
INFO  16:28:09,574 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 129
INFO  16:28:09,574 - PRINT FUNCTION CALL IN USE! ON LINE 129
INFO  16:28:09,574 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,574 - WE ARE USING A VARIABLE OF TYPE int ON LINE 130
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 130
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 130
INFO  16:28:09,575 - CURRENT VARIABLE IN USE IS indexes AND IT IS OF TYPE array
INFO  16:28:09,575 - WE ARE USING AN ARRAY OF TYPE int ON LINE 130
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 130
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 130
INFO  16:28:09,575 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  16:28:09,575 - WE ARE USING AN ARRAY OF TYPE int ON LINE 130
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 130
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 130
INFO  16:28:09,575 - PRINT FUNCTION CALL IN USE! ON LINE 130
INFO  16:28:09,575 - CONST CHAR   ON LINE 131
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 131
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 131
INFO  16:28:09,575 - PRINT FUNCTION CALL IN USE! ON LINE 131
INFO  16:28:09,575 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,575 - USING ++ ON x ON LINE 132
INFO  16:28:09,575 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  16:28:09,575 - WE ARE USING A VARIABLE OF TYPE int ON LINE 134
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 134
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 134
INFO  16:28:09,575 - CONST NUMBER 10 ON LINE 134
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 134
INFO  16:28:09,575 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 134
INFO  16:28:09,575 - USING TWO EXPRESSIONS OF TYPE int ON LINE 134
INFO  16:28:09,575 - ENDING OF A DO...WHILE LOOP! ON LINE 123
INFO  16:28:09,575 - METHOD BODY ENDING!
INFO  16:28:09,575 - END OF DEFINING FUNCTION main
INFO  16:28:09,575 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  16:28:09,575 -  Deklarisanih promenljivih ima = 16
INFO  16:28:09,575 - ===================================
INFO  16:28:09,583 - Parsiranje uspesno zavrseno!
