INFO  19:51:13,859 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  19:51:13,937 - #2 program
INFO  19:51:13,938 - #48 MJProgram
INFO  19:51:13,938 - #48 int
INFO  19:51:13,939 - #48 a
INFO  19:51:13,940 - #36 ,
INFO  19:51:13,940 - #48 b
INFO  19:51:13,941 - #44 [
INFO  19:51:13,941 - #45 ]
INFO  19:51:13,941 - #36 ,
INFO  19:51:13,941 - #48 c
INFO  19:51:13,941 - #36 ,
INFO  19:51:13,941 - #48 d
INFO  19:51:13,941 - #38 ;
INFO  19:51:13,941 - #48 char
INFO  19:51:13,942 - #48 e
INFO  19:51:13,942 - #36 ,
INFO  19:51:13,942 - #48 f
INFO  19:51:13,942 - #44 [
INFO  19:51:13,942 - #45 ]
INFO  19:51:13,942 - #36 ,
INFO  19:51:13,942 - #48 g
INFO  19:51:13,942 - #38 ;
INFO  19:51:13,952 - #48 bool
INFO  19:51:13,952 - #48 h
INFO  19:51:13,952 - #36 ,
INFO  19:51:13,952 - #48 i
INFO  19:51:13,952 - #44 [
INFO  19:51:13,952 - #45 ]
INFO  19:51:13,952 - #38 ;
INFO  19:51:13,952 - #9 const
INFO  19:51:13,953 - #48 int
INFO  19:51:13,953 - #48 aa
INFO  19:51:13,953 - #24 =
INFO  19:51:13,953 - #47 2
INFO  19:51:13,953 - #36 ,
INFO  19:51:13,953 - #48 bb
INFO  19:51:13,953 - #24 =
INFO  19:51:13,953 - #47 6
INFO  19:51:13,954 - #38 ;
INFO  19:51:13,954 - #9 const
INFO  19:51:13,954 - #48 char
INFO  19:51:13,954 - #48 cc
INFO  19:51:13,954 - #24 =
INFO  19:51:13,955 - #49 c
INFO  19:51:13,955 - #36 ,
INFO  19:51:13,955 - #48 dd
INFO  19:51:13,955 - #24 =
INFO  19:51:13,955 - #49 d
INFO  19:51:13,955 - #38 ;
INFO  19:51:13,955 - #9 const
INFO  19:51:13,955 - #48 bool
INFO  19:51:13,955 - #48 ee
INFO  19:51:13,955 - #24 =
INFO  19:51:13,956 - #50 true
INFO  19:51:13,956 - #36 ,
INFO  19:51:13,956 - #48 ff
INFO  19:51:13,956 - #24 =
INFO  19:51:13,956 - #50 false
INFO  19:51:13,956 - #38 ;
INFO  19:51:13,956 - #40 {
INFO  19:51:13,956 - #5 void
INFO  19:51:13,957 - #48 m
INFO  19:51:13,957 - #42 (
INFO  19:51:13,958 - #43 )
INFO  19:51:13,958 - #40 {
INFO  19:51:13,959 - #41 }
INFO  19:51:13,961 - #48 int
INFO  19:51:13,962 - #48 func
INFO  19:51:13,963 - #42 (
INFO  19:51:13,963 - #48 int
INFO  19:51:13,963 - #48 a
INFO  19:51:13,963 - #44 [
INFO  19:51:13,963 - #45 ]
INFO  19:51:13,963 - #36 ,
INFO  19:51:13,963 - #48 int
INFO  19:51:13,963 - #48 b
INFO  19:51:13,963 - #43 )
INFO  19:51:13,963 - #40 {
INFO  19:51:13,963 - #46 return
INFO  19:51:13,963 - #47 0
INFO  19:51:13,965 - #38 ;
INFO  19:51:13,966 - #41 }
INFO  19:51:13,966 - #5 void
INFO  19:51:13,966 - #48 main
INFO  19:51:13,967 - #42 (
INFO  19:51:13,967 - #48 int
INFO  19:51:13,967 - #48 a
INFO  19:51:13,967 - #36 ,
INFO  19:51:13,967 - #48 int
INFO  19:51:13,967 - #48 b
INFO  19:51:13,967 - #44 [
INFO  19:51:13,967 - #45 ]
INFO  19:51:13,967 - #36 ,
INFO  19:51:13,967 - #48 char
INFO  19:51:13,967 - #48 c
INFO  19:51:13,967 - #36 ,
INFO  19:51:13,967 - #48 char
INFO  19:51:13,967 - #48 d
INFO  19:51:13,967 - #44 [
INFO  19:51:13,967 - #45 ]
INFO  19:51:13,967 - #36 ,
INFO  19:51:13,967 - #48 bool
INFO  19:51:13,968 - #48 e
INFO  19:51:13,968 - #36 ,
INFO  19:51:13,968 - #48 bool
INFO  19:51:13,968 - #48 f
INFO  19:51:13,968 - #44 [
INFO  19:51:13,968 - #45 ]
INFO  19:51:13,968 - #43 )
INFO  19:51:13,968 - #48 int
INFO  19:51:13,968 - #48 x
INFO  19:51:13,968 - #36 ,
INFO  19:51:13,968 - #48 y
INFO  19:51:13,968 - #36 ,
INFO  19:51:13,968 - #48 z
INFO  19:51:13,968 - #38 ;
INFO  19:51:13,968 - #48 char
INFO  19:51:13,969 - #48 xx
INFO  19:51:13,969 - #36 ,
INFO  19:51:13,969 - #48 yy
INFO  19:51:13,969 - #36 ,
INFO  19:51:13,970 - #48 zz
INFO  19:51:13,970 - #38 ;
INFO  19:51:13,970 - #40 {
INFO  19:51:13,970 - #48 b
INFO  19:51:13,970 - #24 =
INFO  19:51:13,973 - #48 e
INFO  19:51:13,974 - #39 ?
INFO  19:51:13,975 - #48 b
INFO  19:51:13,976 - #37 :
INFO  19:51:13,976 - #48 b
INFO  19:51:13,976 - #38 ;
INFO  19:51:13,976 - #12 do
INFO  19:51:13,976 - #40 {
INFO  19:51:13,978 - #48 a
INFO  19:51:13,978 - #24 =
INFO  19:51:13,978 - #47 2
INFO  19:51:13,978 - #38 ;
INFO  19:51:13,978 - #41 }
INFO  19:51:13,978 - #13 while
INFO  19:51:13,978 - #42 (
INFO  19:51:13,978 - #48 a
INFO  19:51:13,978 - #25 ==
INFO  19:51:13,979 - #48 func
INFO  19:51:13,980 - #42 (
INFO  19:51:13,980 - #48 b
INFO  19:51:13,980 - #36 ,
INFO  19:51:13,980 - #48 a
INFO  19:51:13,980 - #43 )
INFO  19:51:13,980 - #43 )
INFO  19:51:13,982 - #38 ;
INFO  19:51:13,982 - #48 func
INFO  19:51:13,982 - #42 (
INFO  19:51:13,982 - #48 b
INFO  19:51:13,982 - #36 ,
INFO  19:51:13,982 - #48 func
INFO  19:51:13,982 - #42 (
INFO  19:51:13,982 - #48 b
INFO  19:51:13,982 - #36 ,
INFO  19:51:13,983 - #48 b
INFO  19:51:13,983 - #44 [
INFO  19:51:13,983 - #47 0
INFO  19:51:13,984 - #45 ]
INFO  19:51:13,984 - #43 )
INFO  19:51:13,985 - #43 )
INFO  19:51:13,985 - #38 ;
INFO  19:51:13,985 - #48 d
INFO  19:51:13,985 - #44 [
INFO  19:51:13,985 - #47 0
INFO  19:51:13,985 - #45 ]
INFO  19:51:13,985 - #24 =
INFO  19:51:13,985 - #48 d
INFO  19:51:13,985 - #44 [
INFO  19:51:13,985 - #47 1
INFO  19:51:13,985 - #45 ]
INFO  19:51:13,985 - #38 ;
INFO  19:51:13,985 - #41 }
INFO  19:51:13,985 - #41 }
INFO  19:51:13,994 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        NoMethodDecl(
        ) [NoMethodDecl]
        MethodDecl(
          ReturnValueClassVoid(
           m
          ) [ReturnValueClassVoid]
          NoFormParam(
          ) [NoFormParam]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          NoStmt(
          ) [NoStmt]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         func
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    NumberConst(
                     0
                    ) [NumberConst]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      FormParams(
        FormalParamDecls(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  SingleFormalParamDecl(
                    FormalParamDeclClassNoArray(
                      Type(
                       int
                      ) [Type]
                     a
                    ) [FormalParamDeclClassNoArray]
                  ) [SingleFormalParamDecl]
                  FormalParamDeclClassArray(
                    Type(
                     int
                    ) [Type]
                   b
                  ) [FormalParamDeclClassArray]
                ) [FormalParamDecls]
                FormalParamDeclClassNoArray(
                  Type(
                   char
                  ) [Type]
                 c
                ) [FormalParamDeclClassNoArray]
              ) [FormalParamDecls]
              FormalParamDeclClassArray(
                Type(
                 char
                ) [Type]
               d
              ) [FormalParamDeclClassArray]
            ) [FormalParamDecls]
            FormalParamDeclClassNoArray(
              Type(
               bool
              ) [Type]
             e
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
          FormalParamDeclClassArray(
            Type(
             bool
            ) [Type]
           f
          ) [FormalParamDeclClassArray]
        ) [FormalParamDecls]
      ) [FormParams]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   x
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 y
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               z
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           char
          ) [Type]
          VarListClass(
            VarListClass(
              VarListSingle(
                VarClassNoArray(
                 xx
                ) [VarClassNoArray]
              ) [VarListSingle]
              VarClassNoArray(
               yy
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             zz
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              NoStmt(
              ) [NoStmt]
              Assignment(
                DesignatorStatementClass(
                  Designator(
                   b
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  DesignatorStatementOptionsClassAssignExpression(
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassTwoClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                               e
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              NoFactorOptional(
                              ) [NoFactorOptional]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                               b
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              NoFactorOptional(
                              ) [NoFactorOptional]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                               b
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              NoFactorOptional(
                              ) [NoFactorOptional]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassTwoClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [DesignatorStatementClass]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementClass(
                      Designator(
                       a
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      DesignatorStatementOptionsClassAssignExpression(
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 2
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [DesignatorStatementClass]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                               a
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              NoFactorOptional(
                              ) [NoFactorOptional]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    CondFactOptionalClass(
                      RelationOperationClassEqualComparation(
                      ) [RelationOperationClassEqualComparation]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                 func
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                FactorOptionalParams(
                                  Actuals(
                                    ActualParams(
                                      ActualParam(
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                   b
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                  NoFactorOptional(
                                                  ) [NoFactorOptional]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [ActualParam]
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                 a
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                                NoFactorOptional(
                                                ) [NoFactorOptional]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ActualParams]
                                  ) [Actuals]
                                ) [FactorOptionalParams]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
            ) [DoWhileStatement]
          ) [Statements]
          Assignment(
            DesignatorStatementClass(
              Designator(
               func
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              DesignatorStatementActualParameters(
                Actuals(
                  ActualParams(
                    ActualParam(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                 b
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                NoFactorOptional(
                                ) [NoFactorOptional]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [ActualParam]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                               func
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              FactorOptionalParams(
                                Actuals(
                                  ActualParams(
                                    ActualParam(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                 b
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                                NoFactorOptional(
                                                ) [NoFactorOptional]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ActualParam]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                               b
                                                OptionalDesignatorArray(
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                  LSquareClass(
                                                  ) [LSquareClass]
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          NumberConst(
                                                           0
                                                          ) [NumberConst]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [OptionalDesignatorArray]
                                              ) [Designator]
                                              NoFactorOptional(
                                              ) [NoFactorOptional]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ActualParams]
                                ) [Actuals]
                              ) [FactorOptionalParams]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [ActualParams]
                ) [Actuals]
              ) [DesignatorStatementActualParameters]
            ) [DesignatorStatementClass]
          ) [Assignment]
        ) [Statements]
        Assignment(
          DesignatorStatementClass(
            Designator(
             d
              OptionalDesignatorArray(
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
                LSquareClass(
                ) [LSquareClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         0
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [OptionalDesignatorArray]
            ) [Designator]
            DesignatorStatementOptionsClassAssignExpression(
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                         d
                          OptionalDesignatorArray(
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     1
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                        NoFactorOptional(
                        ) [NoFactorOptional]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [DesignatorStatementClass]
        ) [Assignment]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  19:51:13,995 - ===================================
INFO  19:51:13,999 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  19:51:13,999 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  19:51:13,999 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  19:51:13,999 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  19:51:13,999 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  19:51:13,999 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  19:51:13,999 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  19:51:14,000 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  19:51:14,000 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  19:51:14,000 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  19:51:14,000 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  19:51:14,000 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  19:51:14,000 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  19:51:14,000 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  19:51:14,000 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  19:51:14,000 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  19:51:14,000 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  19:51:14,000 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  19:51:14,000 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  19:51:14,000 - FUNCTION m WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  19:51:14,000 - FUNCTION func WITH RETURN VALUE!  ON LINE 13
INFO  19:51:14,000 - RETURN ASSIGNEMENT! ON LINE 13
INFO  19:51:14,001 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 15
INFO  19:51:14,001 - VARIABLE x IS BEING DEFINED! ON LINE 16
INFO  19:51:14,001 - VARIABLE y IS BEING DEFINED! ON LINE 16
INFO  19:51:14,001 - VARIABLE z IS BEING DEFINED! ON LINE 16
INFO  19:51:14,001 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 16
INFO  19:51:14,001 - VARIABLE xx IS BEING DEFINED! ON LINE 17
INFO  19:51:14,001 - VARIABLE yy IS BEING DEFINED! ON LINE 17
INFO  19:51:14,001 - VARIABLE zz IS BEING DEFINED! ON LINE 17
INFO  19:51:14,001 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 17
INFO  19:51:14,001 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:51:14,001 - CURRENT VARIABLE IN USE IS e AND IT IS OF TYPE 5
INFO  19:51:14,001 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:51:14,001 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:51:14,001 - SUCCESSFUL TERNARY! TYPES: 1 AND 1 ! ON LINE 21
INFO  19:51:14,001 - SUCCESSFUL ASSIGNEMENT! TYPES: 1 AND 1 ! ON LINE 21
INFO  19:51:14,001 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE 1
INFO  19:51:14,001 - SUCCESSFUL ASSIGNEMENT! ON LINE 24
INFO  19:51:14,001 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE 1
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE 1
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE 1
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE 1
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE 1
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE 3
INFO  19:51:14,002 - GLOBAL METHOD func HAS BEEN CALLED!
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE 3
INFO  19:51:14,002 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE 3
INFO  19:51:14,002 - SUCCESSFUL ASSIGNEMENT! TYPES: 2 AND 2 ! ON LINE 30
INFO  19:51:14,002 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  19:51:14,002 -  Deklarisanih promenljivih ima = 15
INFO  19:51:14,002 - ===================================
INFO  19:51:14,003 - Parsiranje uspesno zavrseno!
