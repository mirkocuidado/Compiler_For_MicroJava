INFO  19:09:44,537 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  19:09:44,619 - #2 program
INFO  19:09:44,619 - #43 MJProgram
INFO  19:09:44,619 - #43 int
INFO  19:09:44,621 - #43 a
INFO  19:09:44,622 - #31 ,
INFO  19:09:44,622 - #43 b
INFO  19:09:44,622 - #31 ,
INFO  19:09:44,622 - #43 c
INFO  19:09:44,622 - #31 ,
INFO  19:09:44,623 - #43 d
INFO  19:09:44,623 - #33 ;
INFO  19:09:44,623 - #9 const
INFO  19:09:44,623 - #43 int
INFO  19:09:44,623 - #43 y
INFO  19:09:44,623 - #19 =
INFO  19:09:44,623 - #42 3
INFO  19:09:44,624 - #33 ;
INFO  19:09:44,624 - #35 {
INFO  19:09:44,625 - #43 int
INFO  19:09:44,626 - #43 k
INFO  19:09:44,626 - #37 (
INFO  19:09:44,627 - #43 int
INFO  19:09:44,627 - #43 a
INFO  19:09:44,627 - #31 ,
INFO  19:09:44,627 - #43 int
INFO  19:09:44,627 - #43 b
INFO  19:09:44,627 - #38 )
INFO  19:09:44,628 - #35 {
INFO  19:09:44,628 - #41 return
INFO  19:09:44,630 - #43 b
INFO  19:09:44,632 - #33 ;
INFO  19:09:44,640 - #36 }
INFO  19:09:44,641 - #5 void
INFO  19:09:44,646 - #43 main
INFO  19:09:44,646 - #37 (
INFO  19:09:44,646 - #38 )
INFO  19:09:44,649 - #43 int
INFO  19:09:44,649 - #43 x
INFO  19:09:44,649 - #33 ;
INFO  19:09:44,649 - #43 char
INFO  19:09:44,649 - #43 z
INFO  19:09:44,649 - #33 ;
INFO  19:09:44,649 - #43 char
INFO  19:09:44,650 - #43 xx
INFO  19:09:44,650 - #39 [
INFO  19:09:44,650 - #40 ]
INFO  19:09:44,650 - #33 ;
INFO  19:09:44,650 - #43 char
INFO  19:09:44,650 - #43 yy
INFO  19:09:44,650 - #39 [
INFO  19:09:44,650 - #40 ]
INFO  19:09:44,651 - #33 ;
INFO  19:09:44,651 - #43 int
INFO  19:09:44,651 - #43 br
INFO  19:09:44,651 - #39 [
INFO  19:09:44,651 - #40 ]
INFO  19:09:44,651 - #33 ;
INFO  19:09:44,651 - #35 {
INFO  19:09:44,651 - #43 x
INFO  19:09:44,651 - #19 =
INFO  19:09:44,651 - #42 2
INFO  19:09:44,653 - #49 +
INFO  19:09:44,653 - #42 3
INFO  19:09:44,653 - #46 *
INFO  19:09:44,653 - #37 (
INFO  19:09:44,654 - #42 4
INFO  19:09:44,654 - #49 +
INFO  19:09:44,654 - #42 5
INFO  19:09:44,654 - #38 )
INFO  19:09:44,654 - #49 +
INFO  19:09:44,654 - #43 k
INFO  19:09:44,654 - #37 (
INFO  19:09:44,654 - #42 0
INFO  19:09:44,654 - #31 ,
INFO  19:09:44,655 - #42 1
INFO  19:09:44,655 - #38 )
INFO  19:09:44,655 - #33 ;
INFO  19:09:44,655 - #43 xx
INFO  19:09:44,655 - #19 =
INFO  19:09:44,655 - #16 new
INFO  19:09:44,656 - #43 char
INFO  19:09:44,656 - #39 [
INFO  19:09:44,656 - #43 x
INFO  19:09:44,656 - #40 ]
INFO  19:09:44,656 - #33 ;
INFO  19:09:44,656 - #43 yy
INFO  19:09:44,656 - #19 =
INFO  19:09:44,656 - #16 new
INFO  19:09:44,656 - #43 char
INFO  19:09:44,656 - #39 [
INFO  19:09:44,656 - #43 x
INFO  19:09:44,656 - #40 ]
INFO  19:09:44,656 - #33 ;
INFO  19:09:44,657 - #43 br
INFO  19:09:44,657 - #19 =
INFO  19:09:44,657 - #16 new
INFO  19:09:44,657 - #43 int
INFO  19:09:44,657 - #39 [
INFO  19:09:44,657 - #42 10
INFO  19:09:44,657 - #40 ]
INFO  19:09:44,657 - #33 ;
INFO  19:09:44,657 - #43 br
INFO  19:09:44,657 - #39 [
INFO  19:09:44,658 - #42 0
INFO  19:09:44,660 - #40 ]
INFO  19:09:44,660 - #19 =
INFO  19:09:44,660 - #42 10
INFO  19:09:44,660 - #33 ;
INFO  19:09:44,660 - #18 print
INFO  19:09:44,660 - #37 (
INFO  19:09:44,660 - #43 br
INFO  19:09:44,660 - #39 [
INFO  19:09:44,660 - #42 0
INFO  19:09:44,660 - #40 ]
INFO  19:09:44,660 - #38 )
INFO  19:09:44,661 - #33 ;
INFO  19:09:44,661 - #43 br
INFO  19:09:44,661 - #39 [
INFO  19:09:44,661 - #42 0
INFO  19:09:44,662 - #40 ]
INFO  19:09:44,662 - #28 ++
INFO  19:09:44,662 - #33 ;
INFO  19:09:44,662 - #18 print
INFO  19:09:44,662 - #37 (
INFO  19:09:44,662 - #43 br
INFO  19:09:44,662 - #39 [
INFO  19:09:44,662 - #42 0
INFO  19:09:44,664 - #40 ]
INFO  19:09:44,665 - #38 )
INFO  19:09:44,665 - #33 ;
INFO  19:09:44,665 - #36 }
INFO  19:09:44,665 - #36 }
INFO  19:09:44,678 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            VarDeclListClass(
              VarDeclListClass(
                NoVarDeclList(
                ) [NoVarDeclList]
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                ) [VarDeclClass]
              ) [VarDeclListClass]
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListSingle(
                  VarClassNoArray(
                   z
                  ) [VarClassNoArray]
                ) [VarListSingle]
              ) [VarDeclClass]
            ) [VarDeclListClass]
            VarDeclClass(
              Type(
               char
              ) [Type]
              VarListSingle(
                VarClassArray(
                 xx
                ) [VarClassArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassArray(
               yy
              ) [VarClassArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassArray(
             br
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   2
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                ExprOptionalListClass(
                                  ExprOptionalListClass(
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                    PlusOperation(
                                     +
                                    ) [PlusOperation]
                                    TermClass(
                                      NumberConst(
                                       3
                                      ) [NumberConst]
                                      TermOptionalListClass(
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                        MultiplyOperationClass(
                                         *
                                        ) [MultiplyOperationClass]
                                        ParenFactorClass(
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   4
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                ExprOptionalListClass(
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                  PlusOperation(
                                                   +
                                                  ) [PlusOperation]
                                                  TermClass(
                                                    NumberConst(
                                                     5
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                ) [ExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [ParenFactorClass]
                                      ) [TermOptionalListClass]
                                    ) [TermClass]
                                  ) [ExprOptionalListClass]
                                  PlusOperation(
                                   +
                                  ) [PlusOperation]
                                  TermClass(
                                    FactorOptionalParams(
                                      Designator(
                                        DesigIdent(
                                         k
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                      Actuals(
                                        ActualParams(
                                          ActualParam(
                                            ClassOneClass(
                                              NormalExpressionClass(
                                                ExprFirstOptionClassWithMinus(
                                                  TermClass(
                                                    NumberConst(
                                                     0
                                                    ) [NumberConst]
                                                    NoTermOptionalListClass(
                                                    ) [NoTermOptionalListClass]
                                                  ) [TermClass]
                                                  NoExprOptionalListClass(
                                                  ) [NoExprOptionalListClass]
                                                ) [ExprFirstOptionClassWithMinus]
                                              ) [NormalExpressionClass]
                                            ) [ClassOneClass]
                                          ) [ActualParam]
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   1
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [ActualParams]
                                      ) [Actuals]
                                    ) [FactorOptionalParams]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                ) [ExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           xx
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NewFactorClass(
                                  Type(
                                   char
                                  ) [Type]
                                  FactorOptionalSecondClass(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 x
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [FactorOptionalSecondClass]
                                ) [NewFactorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         yy
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NewFactorClass(
                                Type(
                                 char
                                ) [Type]
                                FactorOptionalSecondClass(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               x
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [FactorOptionalSecondClass]
                              ) [NewFactorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NewFactorClass(
                              Type(
                               int
                              ) [Type]
                              FactorOptionalSecondClass(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         10
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [FactorOptionalSecondClass]
                            ) [NewFactorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     br
                    ) [DesigIdent]
                    OptionalDesignatorArray(
                      HelperClass(
                      ) [HelperClass]
                      LSquareClass(
                      ) [LSquareClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               0
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [OptionalDesignatorArray]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           10
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            PrintStmt(
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           br
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     0
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
              NoCommaNumberClass(
              ) [NoCommaNumberClass]
            ) [PrintStmt]
          ) [Statements]
          Assignment(
            DesignatorStatementPlusPlus(
              Designator(
                DesigIdent(
                 br
                ) [DesigIdent]
                OptionalDesignatorArray(
                  HelperClass(
                  ) [HelperClass]
                  LSquareClass(
                  ) [LSquareClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [OptionalDesignatorArray]
              ) [Designator]
            ) [DesignatorStatementPlusPlus]
          ) [Assignment]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       br
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  19:09:44,680 - ===================================
INFO  19:09:44,688 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  19:09:44,688 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  19:09:44,688 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  19:09:44,689 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  19:09:44,689 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  19:09:44,689 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  19:09:44,689 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  19:09:44,689 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  19:09:44,689 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  19:09:44,689 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  19:09:44,690 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  19:09:44,690 - METHOD BODY STARTING!
INFO  19:09:44,690 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  19:09:44,690 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  19:09:44,690 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  19:09:44,690 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  19:09:44,690 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  19:09:44,691 - METHOD BODY ENDING!
INFO  19:09:44,691 - END OF DEFINING FUNCTION k
INFO  19:09:44,691 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  19:09:44,691 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  19:09:44,691 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  19:09:44,692 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  19:09:44,692 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  19:09:44,692 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  19:09:44,692 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  19:09:44,692 - ARRAY VARIABLE yy IS BEING DEFINED! ON LINE 16
INFO  19:09:44,692 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 16
INFO  19:09:44,692 - ARRAY VARIABLE br IS BEING DEFINED! ON LINE 17
INFO  19:09:44,693 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 17
INFO  19:09:44,693 - METHOD BODY STARTING!
INFO  19:09:44,694 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  19:09:44,694 - BEGINNING OF AN ASSIGNEMENT! ON LINE 22
INFO  19:09:44,694 - CONST NUMBER 2 ON LINE 22
INFO  19:09:44,694 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,694 - CONST NUMBER 3 ON LINE 22
INFO  19:09:44,694 - CONST NUMBER 4 ON LINE 22
INFO  19:09:44,694 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,694 - CONST NUMBER 5 ON LINE 22
INFO  19:09:44,694 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,695 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  19:09:44,695 - USING INTEGERS IN TERM! ON LINE 22
INFO  19:09:44,695 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  19:09:44,695 - USING INTEGERS IN TERM! ON LINE 22
INFO  19:09:44,695 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  19:09:44,695 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  19:09:44,695 - CONST NUMBER 0 ON LINE 22
INFO  19:09:44,695 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,695 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,695 - CONST NUMBER 1 ON LINE 22
INFO  19:09:44,695 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,696 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,696 - TYPE -> int <- AND -> int <- ON LINE 22
INFO  19:09:44,696 - TYPE -> int <- AND -> int <- ON LINE 22
INFO  19:09:44,696 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  19:09:44,696 - USING INTEGERS IN TERM! ON LINE 6
INFO  19:09:44,696 - USING INTEGERS IN TERM! ON LINE 22
INFO  19:09:44,696 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 22
INFO  19:09:44,696 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  19:09:44,696 - BEGINNING OF AN ASSIGNEMENT! ON LINE 29
INFO  19:09:44,696 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  19:09:44,696 - WE ARE USING A VARIABLE OF TYPE int ON LINE 29
INFO  19:09:44,696 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  19:09:44,696 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  19:09:44,696 - USAGE OF KEYWORD NEW! ON LINE 29
INFO  19:09:44,696 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  19:09:44,696 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 29
INFO  19:09:44,696 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 29
INFO  19:09:44,697 - CURRENT VARIABLE IN USE IS yy AND IT IS OF TYPE array
INFO  19:09:44,697 - BEGINNING OF AN ASSIGNEMENT! ON LINE 30
INFO  19:09:44,697 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  19:09:44,697 - WE ARE USING A VARIABLE OF TYPE int ON LINE 30
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  19:09:44,697 - USAGE OF KEYWORD NEW! ON LINE 30
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  19:09:44,697 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 30
INFO  19:09:44,697 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  19:09:44,697 - BEGINNING OF AN ASSIGNEMENT! ON LINE 39
INFO  19:09:44,697 - CONST NUMBER 10 ON LINE 39
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  19:09:44,697 - USAGE OF KEYWORD NEW! ON LINE 39
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 39
INFO  19:09:44,697 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 39
INFO  19:09:44,697 - CONST NUMBER 0 ON LINE 40
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  19:09:44,697 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  19:09:44,697 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  19:09:44,697 - BEGINNING OF AN ASSIGNEMENT! ON LINE 40
INFO  19:09:44,698 - CONST NUMBER 10 ON LINE 40
INFO  19:09:44,698 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  19:09:44,698 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  19:09:44,698 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 40
INFO  19:09:44,698 - CONST NUMBER 0 ON LINE 44
INFO  19:09:44,698 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  19:09:44,698 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  19:09:44,698 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  19:09:44,698 - WE ARE USING AN ARRAY OF TYPE int ON LINE 44
INFO  19:09:44,698 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  19:09:44,698 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 44
INFO  19:09:44,698 - PRINT FUNCTION CALL IN USE! ON LINE 44
INFO  19:09:44,698 - CONST NUMBER 0 ON LINE 45
INFO  19:09:44,698 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  19:09:44,699 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  19:09:44,699 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  19:09:44,699 - USING ++ ON br ON LINE 45
INFO  19:09:44,699 - CONST NUMBER 0 ON LINE 46
INFO  19:09:44,699 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  19:09:44,699 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  19:09:44,699 - CURRENT VARIABLE IN USE IS br AND IT IS OF TYPE array
INFO  19:09:44,699 - WE ARE USING AN ARRAY OF TYPE int ON LINE 46
INFO  19:09:44,699 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  19:09:44,699 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 46
INFO  19:09:44,699 - PRINT FUNCTION CALL IN USE! ON LINE 46
INFO  19:09:44,699 - METHOD BODY ENDING!
INFO  19:09:44,700 - END OF DEFINING FUNCTION main
INFO  19:09:44,700 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  19:09:44,700 -  Deklarisanih promenljivih ima = 9
INFO  19:09:44,700 - ===================================
INFO  19:09:44,706 - Parsiranje uspesno zavrseno!
