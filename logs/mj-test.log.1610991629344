INFO  18:39:12,031 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:39:12,107 - #2 program
INFO  18:39:12,108 - #44 MJProgram
INFO  18:39:12,108 - #44 int
INFO  18:39:12,109 - #44 a
INFO  18:39:12,110 - #31 ,
INFO  18:39:12,111 - #44 b
INFO  18:39:12,111 - #39 [
INFO  18:39:12,111 - #40 ]
INFO  18:39:12,111 - #31 ,
INFO  18:39:12,111 - #44 c
INFO  18:39:12,111 - #31 ,
INFO  18:39:12,112 - #44 d
INFO  18:39:12,112 - #33 ;
INFO  18:39:12,112 - #44 char
INFO  18:39:12,112 - #44 e
INFO  18:39:12,112 - #31 ,
INFO  18:39:12,112 - #44 f
INFO  18:39:12,113 - #39 [
INFO  18:39:12,113 - #40 ]
INFO  18:39:12,113 - #31 ,
INFO  18:39:12,113 - #44 g
INFO  18:39:12,113 - #33 ;
INFO  18:39:12,122 - #44 bool
INFO  18:39:12,122 - #44 h
INFO  18:39:12,122 - #31 ,
INFO  18:39:12,122 - #44 i
INFO  18:39:12,122 - #39 [
INFO  18:39:12,123 - #40 ]
INFO  18:39:12,123 - #33 ;
INFO  18:39:12,123 - #9 const
INFO  18:39:12,123 - #44 int
INFO  18:39:12,123 - #44 aa
INFO  18:39:12,123 - #19 =
INFO  18:39:12,123 - #43 2
INFO  18:39:12,124 - #31 ,
INFO  18:39:12,124 - #44 bb
INFO  18:39:12,124 - #19 =
INFO  18:39:12,124 - #43 6
INFO  18:39:12,124 - #33 ;
INFO  18:39:12,125 - #9 const
INFO  18:39:12,125 - #44 char
INFO  18:39:12,125 - #44 cc
INFO  18:39:12,125 - #19 =
INFO  18:39:12,126 - #45 c
INFO  18:39:12,126 - #31 ,
INFO  18:39:12,126 - #44 dd
INFO  18:39:12,126 - #19 =
INFO  18:39:12,126 - #45 d
INFO  18:39:12,126 - #33 ;
INFO  18:39:12,126 - #9 const
INFO  18:39:12,126 - #44 bool
INFO  18:39:12,127 - #44 ee
INFO  18:39:12,127 - #19 =
INFO  18:39:12,127 - #46 true
INFO  18:39:12,127 - #31 ,
INFO  18:39:12,127 - #44 ff
INFO  18:39:12,127 - #19 =
INFO  18:39:12,127 - #46 false
INFO  18:39:12,127 - #33 ;
INFO  18:39:12,128 - #35 {
INFO  18:39:12,128 - #5 void
INFO  18:39:12,129 - #44 m
INFO  18:39:12,129 - #37 (
INFO  18:39:12,129 - #38 )
INFO  18:39:12,130 - #35 {
INFO  18:39:12,130 - #36 }
INFO  18:39:12,132 - #44 int
INFO  18:39:12,134 - #44 func
INFO  18:39:12,134 - #37 (
INFO  18:39:12,134 - #44 int
INFO  18:39:12,134 - #44 a
INFO  18:39:12,134 - #39 [
INFO  18:39:12,134 - #40 ]
INFO  18:39:12,134 - #31 ,
INFO  18:39:12,134 - #44 int
INFO  18:39:12,134 - #44 b
INFO  18:39:12,134 - #38 )
INFO  18:39:12,135 - #35 {
INFO  18:39:12,135 - #41 return
INFO  18:39:12,135 - #43 0
INFO  18:39:12,136 - #33 ;
INFO  18:39:12,138 - #36 }
INFO  18:39:12,138 - #5 void
INFO  18:39:12,138 - #44 main
INFO  18:39:12,138 - #37 (
INFO  18:39:12,138 - #44 int
INFO  18:39:12,138 - #44 a
INFO  18:39:12,138 - #31 ,
INFO  18:39:12,139 - #44 int
INFO  18:39:12,139 - #44 b
INFO  18:39:12,139 - #39 [
INFO  18:39:12,139 - #40 ]
INFO  18:39:12,139 - #31 ,
INFO  18:39:12,139 - #44 char
INFO  18:39:12,139 - #44 c
INFO  18:39:12,139 - #31 ,
INFO  18:39:12,139 - #44 char
INFO  18:39:12,139 - #44 d
INFO  18:39:12,139 - #39 [
INFO  18:39:12,139 - #40 ]
INFO  18:39:12,139 - #31 ,
INFO  18:39:12,139 - #44 bool
INFO  18:39:12,139 - #44 e
INFO  18:39:12,139 - #31 ,
INFO  18:39:12,139 - #44 bool
INFO  18:39:12,139 - #44 f
INFO  18:39:12,139 - #39 [
INFO  18:39:12,140 - #40 ]
INFO  18:39:12,140 - #38 )
INFO  18:39:12,140 - #44 int
INFO  18:39:12,140 - #44 x
INFO  18:39:12,140 - #31 ,
INFO  18:39:12,140 - #44 y
INFO  18:39:12,140 - #31 ,
INFO  18:39:12,140 - #44 z
INFO  18:39:12,141 - #33 ;
INFO  18:39:12,141 - #44 char
INFO  18:39:12,141 - #44 xx
INFO  18:39:12,141 - #31 ,
INFO  18:39:12,141 - #44 yy
INFO  18:39:12,141 - #31 ,
INFO  18:39:12,141 - #44 zz
INFO  18:39:12,142 - #33 ;
INFO  18:39:12,142 - #35 {
INFO  18:39:12,142 - #44 x
INFO  18:39:12,142 - #19 =
INFO  18:39:12,145 - #43 123
INFO  18:39:12,146 - #33 ;
INFO  18:39:12,146 - #44 xx
INFO  18:39:12,147 - #19 =
INFO  18:39:12,147 - #45 c
INFO  18:39:12,147 - #33 ;
INFO  18:39:12,147 - #14 if
INFO  18:39:12,147 - #37 (
INFO  18:39:12,147 - #44 a
INFO  18:39:12,147 - #20 ==
INFO  18:39:12,147 - #44 x
INFO  18:39:12,148 - #38 )
INFO  18:39:12,150 - #35 {
INFO  18:39:12,150 - #14 if
INFO  18:39:12,150 - #37 (
INFO  18:39:12,150 - #44 c
INFO  18:39:12,150 - #20 ==
INFO  18:39:12,150 - #44 d
INFO  18:39:12,150 - #39 [
INFO  18:39:12,151 - #43 3
INFO  18:39:12,152 - #40 ]
INFO  18:39:12,152 - #26 &&
INFO  18:39:12,153 - #44 a
INFO  18:39:12,154 - #24 >=
INFO  18:39:12,154 - #44 b
INFO  18:39:12,155 - #39 [
INFO  18:39:12,155 - #44 y
INFO  18:39:12,155 - #40 ]
INFO  18:39:12,155 - #38 )
INFO  18:39:12,156 - #35 {
INFO  18:39:12,156 - #44 z
INFO  18:39:12,156 - #19 =
INFO  18:39:12,156 - #43 300
INFO  18:39:12,156 - #33 ;
INFO  18:39:12,156 - #36 }
INFO  18:39:12,156 - #15 else
INFO  18:39:12,158 - #44 z
INFO  18:39:12,158 - #19 =
INFO  18:39:12,159 - #43 400
INFO  18:39:12,159 - #33 ;
INFO  18:39:12,159 - #36 }
INFO  18:39:12,160 - #15 else
INFO  18:39:12,160 - #44 z
INFO  18:39:12,160 - #19 =
INFO  18:39:12,160 - #43 500
INFO  18:39:12,160 - #33 ;
INFO  18:39:12,160 - #44 b
INFO  18:39:12,160 - #19 =
INFO  18:39:12,160 - #44 e
INFO  18:39:12,160 - #34 ?
INFO  18:39:12,161 - #44 b
INFO  18:39:12,162 - #32 :
INFO  18:39:12,162 - #44 b
INFO  18:39:12,163 - #33 ;
INFO  18:39:12,163 - #12 do
INFO  18:39:12,163 - #35 {
INFO  18:39:12,164 - #44 a
INFO  18:39:12,165 - #19 =
INFO  18:39:12,165 - #43 2
INFO  18:39:12,165 - #33 ;
INFO  18:39:12,165 - #36 }
INFO  18:39:12,165 - #13 while
INFO  18:39:12,165 - #37 (
INFO  18:39:12,165 - #44 a
INFO  18:39:12,166 - #20 ==
INFO  18:39:12,167 - #44 func
INFO  18:39:12,167 - #37 (
INFO  18:39:12,167 - #44 b
INFO  18:39:12,167 - #31 ,
INFO  18:39:12,167 - #44 a
INFO  18:39:12,167 - #38 )
INFO  18:39:12,167 - #38 )
INFO  18:39:12,167 - #33 ;
INFO  18:39:12,169 - #44 func
INFO  18:39:12,169 - #37 (
INFO  18:39:12,169 - #44 b
INFO  18:39:12,169 - #31 ,
INFO  18:39:12,169 - #44 func
INFO  18:39:12,169 - #37 (
INFO  18:39:12,169 - #44 b
INFO  18:39:12,169 - #31 ,
INFO  18:39:12,169 - #44 b
INFO  18:39:12,169 - #39 [
INFO  18:39:12,169 - #43 0
INFO  18:39:12,169 - #40 ]
INFO  18:39:12,169 - #38 )
INFO  18:39:12,169 - #38 )
INFO  18:39:12,169 - #33 ;
INFO  18:39:12,170 - #44 d
INFO  18:39:12,170 - #39 [
INFO  18:39:12,170 - #43 0
INFO  18:39:12,170 - #40 ]
INFO  18:39:12,170 - #19 =
INFO  18:39:12,170 - #44 d
INFO  18:39:12,170 - #39 [
INFO  18:39:12,170 - #43 1
INFO  18:39:12,170 - #40 ]
INFO  18:39:12,170 - #33 ;
INFO  18:39:12,170 - #36 }
INFO  18:39:12,170 - #5 void
INFO  18:39:12,170 - #44 k
INFO  18:39:12,170 - #37 (
INFO  18:39:12,170 - #44 int
INFO  18:39:12,170 - #44 z
INFO  18:39:12,170 - #38 )
INFO  18:39:12,170 - #35 {
INFO  18:39:12,170 - #44 z
INFO  18:39:12,170 - #19 =
INFO  18:39:12,171 - #43 400
INFO  18:39:12,171 - #33 ;
INFO  18:39:12,171 - #41 return
INFO  18:39:12,171 - #33 ;
INFO  18:39:12,171 - #36 }
INFO  18:39:12,172 - #36 }
INFO  18:39:12,181 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        GroupDeclarations(
          GroupDeclarations(
            GroupDeclarations(
              NoGroupDecl(
              ) [NoGroupDecl]
              GroupDeclarationVars(
                VarDeclClass(
                  Type(
                   int
                  ) [Type]
                  VarListClass(
                    VarListClass(
                      VarListClass(
                        VarListSingle(
                          VarClassNoArray(
                           a
                          ) [VarClassNoArray]
                        ) [VarListSingle]
                        VarClassArray(
                         b
                        ) [VarClassArray]
                      ) [VarListClass]
                      VarClassNoArray(
                       c
                      ) [VarClassNoArray]
                    ) [VarListClass]
                    VarClassNoArray(
                     d
                    ) [VarClassNoArray]
                  ) [VarListClass]
                ) [VarDeclClass]
              ) [GroupDeclarationVars]
            ) [GroupDeclarations]
            GroupDeclarationVars(
              VarDeclClass(
                Type(
                 char
                ) [Type]
                VarListClass(
                  VarListClass(
                    VarListSingle(
                      VarClassNoArray(
                       e
                      ) [VarClassNoArray]
                    ) [VarListSingle]
                    VarClassArray(
                     f
                    ) [VarClassArray]
                  ) [VarListClass]
                  VarClassNoArray(
                   g
                  ) [VarClassNoArray]
                ) [VarListClass]
              ) [VarDeclClass]
            ) [GroupDeclarationVars]
          ) [GroupDeclarations]
          GroupDeclarationVars(
            VarDeclClass(
              Type(
               bool
              ) [Type]
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   h
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassArray(
                 i
                ) [VarClassArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [GroupDeclarationVars]
        ) [GroupDeclarations]
        GroupDeclarationsConsts(
          ConstDeclClass(
            Type(
             int
            ) [Type]
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 aa
                  ValuesNumber(
                   2
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               bb
                ValuesNumber(
                 6
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
          ) [ConstDeclClass]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           char
          ) [Type]
          ConstListClass(
            ConstListSingle(
              ConstListNoArray(
               cc
                ValuesChar(
                 c
                ) [ValuesChar]
              ) [ConstListNoArray]
            ) [ConstListSingle]
            ConstListNoArray(
             dd
              ValuesChar(
               d
              ) [ValuesChar]
            ) [ConstListNoArray]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         bool
        ) [Type]
        ConstListClass(
          ConstListSingle(
            ConstListNoArray(
             ee
              ValuesBoolean(
               true
              ) [ValuesBoolean]
            ) [ConstListNoArray]
          ) [ConstListSingle]
          ConstListNoArray(
           ff
            ValuesBoolean(
             false
            ) [ValuesBoolean]
          ) [ConstListNoArray]
        ) [ConstListClass]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassVoid(
             m
            ) [ReturnValueClassVoid]
            NoFormParam(
            ) [NoFormParam]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            NoStmt(
            ) [NoStmt]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           func
          ) [ReturnValueClassNoVoid]
          FormParams(
            FormalParamDecls(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 a
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               b
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       0
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassVoid(
         main
        ) [ReturnValueClassVoid]
        FormParams(
          FormalParamDecls(
            FormalParamDecls(
              FormalParamDecls(
                FormalParamDecls(
                  FormalParamDecls(
                    SingleFormalParamDecl(
                      FormalParamDeclClassNoArray(
                        Type(
                         int
                        ) [Type]
                       a
                      ) [FormalParamDeclClassNoArray]
                    ) [SingleFormalParamDecl]
                    FormalParamDeclClassArray(
                      Type(
                       int
                      ) [Type]
                     b
                    ) [FormalParamDeclClassArray]
                  ) [FormalParamDecls]
                  FormalParamDeclClassNoArray(
                    Type(
                     char
                    ) [Type]
                   c
                  ) [FormalParamDeclClassNoArray]
                ) [FormalParamDecls]
                FormalParamDeclClassArray(
                  Type(
                   char
                  ) [Type]
                 d
                ) [FormalParamDeclClassArray]
              ) [FormalParamDecls]
              FormalParamDeclClassNoArray(
                Type(
                 bool
                ) [Type]
               e
              ) [FormalParamDeclClassNoArray]
            ) [FormalParamDecls]
            FormalParamDeclClassArray(
              Type(
               bool
              ) [Type]
             f
            ) [FormalParamDeclClassArray]
          ) [FormalParamDecls]
        ) [FormParams]
        VarDeclListClass(
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     x
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   y
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 z
                ) [VarClassNoArray]
              ) [VarListClass]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   xx
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 yy
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               zz
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             x
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   123
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           xx
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                CharConst(
                                 c
                                ) [CharConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  IfStatement(
                    IfConditionNoError(
                      ConditionClass(
                        CondTermClass(
                          CondFactClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       a
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                            CondFactOptionalClass(
                              RelationOperationClassEqualComparation(
                              ) [RelationOperationClassEqualComparation]
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    DesignatorClass(
                                      Designator(
                                        DesigIdent(
                                         x
                                        ) [DesigIdent]
                                        NoOptionalDesignatorClass(
                                        ) [NoOptionalDesignatorClass]
                                      ) [Designator]
                                    ) [DesignatorClass]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [CondFactOptionalClass]
                          ) [CondFactClass]
                          NoCondTermOptionalClass(
                          ) [NoCondTermOptionalClass]
                        ) [CondTermClass]
                        NoConditionOptionalClass(
                        ) [NoConditionOptionalClass]
                      ) [ConditionClass]
                    ) [IfConditionNoError]
                    StatementStatement(
                      Statements(
                        NoStmt(
                        ) [NoStmt]
                        IfStatement(
                          IfConditionNoError(
                            ConditionClass(
                              CondTermClass(
                                CondFactClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        DesignatorClass(
                                          Designator(
                                            DesigIdent(
                                             c
                                            ) [DesigIdent]
                                            NoOptionalDesignatorClass(
                                            ) [NoOptionalDesignatorClass]
                                          ) [Designator]
                                        ) [DesignatorClass]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                  CondFactOptionalClass(
                                    RelationOperationClassEqualComparation(
                                    ) [RelationOperationClassEqualComparation]
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               d
                                              ) [DesigIdent]
                                              OptionalDesignatorArray(
                                                HelperClass(
                                                ) [HelperClass]
                                                LSquareClass(
                                                ) [LSquareClass]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         3
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [OptionalDesignatorArray]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [CondFactOptionalClass]
                                ) [CondFactClass]
                                CondTermOptionalClass(
                                  NoCondTermOptionalClass(
                                  ) [NoCondTermOptionalClass]
                                  FakeAndClass(
                                  ) [FakeAndClass]
                                  CondFactClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               a
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                    CondFactOptionalClass(
                                      GreaterOrEqualOperationClass(
                                      ) [GreaterOrEqualOperationClass]
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 b
                                                ) [DesigIdent]
                                                OptionalDesignatorArray(
                                                  HelperClass(
                                                  ) [HelperClass]
                                                  LSquareClass(
                                                  ) [LSquareClass]
                                                  ClassOneClass(
                                                    NormalExpressionClass(
                                                      ExprFirstOptionClassWithMinus(
                                                        TermClass(
                                                          DesignatorClass(
                                                            Designator(
                                                              DesigIdent(
                                                               y
                                                              ) [DesigIdent]
                                                              NoOptionalDesignatorClass(
                                                              ) [NoOptionalDesignatorClass]
                                                            ) [Designator]
                                                          ) [DesignatorClass]
                                                          NoTermOptionalListClass(
                                                          ) [NoTermOptionalListClass]
                                                        ) [TermClass]
                                                        NoExprOptionalListClass(
                                                        ) [NoExprOptionalListClass]
                                                      ) [ExprFirstOptionClassWithMinus]
                                                    ) [NormalExpressionClass]
                                                  ) [ClassOneClass]
                                                ) [OptionalDesignatorArray]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [CondFactOptionalClass]
                                  ) [CondFactClass]
                                ) [CondTermOptionalClass]
                              ) [CondTermClass]
                              NoConditionOptionalClass(
                              ) [NoConditionOptionalClass]
                            ) [ConditionClass]
                          ) [IfConditionNoError]
                          StatementStatement(
                            Statements(
                              NoStmt(
                              ) [NoStmt]
                              Assignment(
                                DesignatorStatementOptionsClassAssignExpression(
                                  Designator(
                                    DesigIdent(
                                     z
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                  AssignOpClass(
                                    AssignOperationClass(
                                    ) [AssignOperationClass]
                                  ) [AssignOpClass]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           300
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [DesignatorStatementOptionsClassAssignExpression]
                              ) [Assignment]
                            ) [Statements]
                          ) [StatementStatement]
                          Empty(
                          ) [Empty]
                          YesOptionalStatement(
                            Assignment(
                              DesignatorStatementOptionsClassAssignExpression(
                                Designator(
                                  DesigIdent(
                                   z
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                AssignOpClass(
                                  AssignOperationClass(
                                  ) [AssignOperationClass]
                                ) [AssignOpClass]
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         400
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [DesignatorStatementOptionsClassAssignExpression]
                            ) [Assignment]
                          ) [YesOptionalStatement]
                        ) [IfStatement]
                      ) [Statements]
                    ) [StatementStatement]
                    Empty(
                    ) [Empty]
                    YesOptionalStatement(
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             z
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  NumberConst(
                                   500
                                  ) [NumberConst]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [YesOptionalStatement]
                  ) [IfStatement]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       b
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassTwoClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 e
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      TernaryClass(
                      ) [TernaryClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 b
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      ColonClass(
                      ) [ColonClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 b
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassTwoClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              DoWhileStatement(
                DoClass(
                ) [DoClass]
                StatementStatement(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           a
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 2
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                ) [StatementStatement]
                LParenClass(
                ) [LParenClass]
                ConditionClass(
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 a
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      CondFactOptionalClass(
                        RelationOperationClassEqualComparation(
                        ) [RelationOperationClassEqualComparation]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              FactorOptionalParams(
                                Designator(
                                  DesigIdent(
                                   func
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                Actuals(
                                  ActualParams(
                                    ActualParam(
                                      ClassOneClass(
                                        NormalExpressionClass(
                                          ExprFirstOptionClassWithMinus(
                                            TermClass(
                                              DesignatorClass(
                                                Designator(
                                                  DesigIdent(
                                                   b
                                                  ) [DesigIdent]
                                                  NoOptionalDesignatorClass(
                                                  ) [NoOptionalDesignatorClass]
                                                ) [Designator]
                                              ) [DesignatorClass]
                                              NoTermOptionalListClass(
                                              ) [NoTermOptionalListClass]
                                            ) [TermClass]
                                            NoExprOptionalListClass(
                                            ) [NoExprOptionalListClass]
                                          ) [ExprFirstOptionClassWithMinus]
                                        ) [NormalExpressionClass]
                                      ) [ClassOneClass]
                                    ) [ActualParam]
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 a
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ActualParams]
                                ) [Actuals]
                              ) [FactorOptionalParams]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [CondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                ) [ConditionClass]
                RParenClass(
                ) [RParenClass]
              ) [DoWhileStatement]
            ) [Statements]
            Assignment(
              DesignatorStatementActualParameters(
                Designator(
                  DesigIdent(
                   func
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                Actuals(
                  ActualParams(
                    ActualParam(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              DesignatorClass(
                                Designator(
                                  DesigIdent(
                                   b
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                              ) [DesignatorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [ActualParam]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            FactorOptionalParams(
                              Designator(
                                DesigIdent(
                                 func
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              Actuals(
                                ActualParams(
                                  ActualParam(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 b
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ActualParam]
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               b
                                              ) [DesigIdent]
                                              OptionalDesignatorArray(
                                                HelperClass(
                                                ) [HelperClass]
                                                LSquareClass(
                                                ) [LSquareClass]
                                                ClassOneClass(
                                                  NormalExpressionClass(
                                                    ExprFirstOptionClassWithMinus(
                                                      TermClass(
                                                        NumberConst(
                                                         0
                                                        ) [NumberConst]
                                                        NoTermOptionalListClass(
                                                        ) [NoTermOptionalListClass]
                                                      ) [TermClass]
                                                      NoExprOptionalListClass(
                                                      ) [NoExprOptionalListClass]
                                                    ) [ExprFirstOptionClassWithMinus]
                                                  ) [NormalExpressionClass]
                                                ) [ClassOneClass]
                                              ) [OptionalDesignatorArray]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParams]
                              ) [Actuals]
                            ) [FactorOptionalParams]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [ActualParams]
                ) [Actuals]
              ) [DesignatorStatementActualParameters]
            ) [Assignment]
          ) [Statements]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 d
                ) [DesigIdent]
                OptionalDesignatorArray(
                  HelperClass(
                  ) [HelperClass]
                  LSquareClass(
                  ) [LSquareClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [OptionalDesignatorArray]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           d
                          ) [DesigIdent]
                          OptionalDesignatorArray(
                            HelperClass(
                            ) [HelperClass]
                            LSquareClass(
                            ) [LSquareClass]
                            ClassOneClass(
                              NormalExpressionClass(
                                ExprFirstOptionClassWithMinus(
                                  TermClass(
                                    NumberConst(
                                     1
                                    ) [NumberConst]
                                    NoTermOptionalListClass(
                                    ) [NoTermOptionalListClass]
                                  ) [TermClass]
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                ) [ExprFirstOptionClassWithMinus]
                              ) [NormalExpressionClass]
                            ) [ClassOneClass]
                          ) [OptionalDesignatorArray]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       k
      ) [ReturnValueClassVoid]
      FormParams(
        SingleFormalParamDecl(
          FormalParamDeclClassNoArray(
            Type(
             int
            ) [Type]
           z
          ) [FormalParamDeclClassNoArray]
        ) [SingleFormalParamDecl]
      ) [FormParams]
      NoVarDeclList(
      ) [NoVarDeclList]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 z
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      NumberConst(
                       400
                      ) [NumberConst]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        ReturnNoExpr(
        ) [ReturnNoExpr]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:39:12,184 - ===================================
INFO  18:39:12,189 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:39:12,189 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:39:12,189 - ARRAY VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:39:12,189 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:39:12,189 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:39:12,189 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:39:12,189 - VARIABLE e IS BEING DEFINED! ON LINE 3
INFO  18:39:12,190 - ARRAY VARIABLE f IS BEING DEFINED! ON LINE 3
INFO  18:39:12,190 - VARIABLE g IS BEING DEFINED! ON LINE 3
INFO  18:39:12,190 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 3
INFO  18:39:12,190 - VARIABLE h IS BEING DEFINED! ON LINE 4
INFO  18:39:12,190 - ARRAY VARIABLE i IS BEING DEFINED! ON LINE 4
INFO  18:39:12,190 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 4
INFO  18:39:12,190 - CONST VALUE 2 IS BEING USED! ON LINE 6
INFO  18:39:12,190 - CONST VARIABLE aa IS BEING DEFINED! ON LINE 6
INFO  18:39:12,190 - CONST VALUE 6 IS BEING USED! ON LINE 6
INFO  18:39:12,190 - CONST VARIABLE bb IS BEING DEFINED! ON LINE 6
INFO  18:39:12,190 - CONST VALUE c IS BEING USED! ON LINE 7
INFO  18:39:12,190 - CONST VARIABLE cc IS BEING DEFINED! ON LINE 7
INFO  18:39:12,190 - CONST VALUE d IS BEING USED! ON LINE 7
INFO  18:39:12,191 - CONST VARIABLE dd IS BEING DEFINED! ON LINE 7
INFO  18:39:12,191 - CONST VALUE true IS BEING USED! ON LINE 8
INFO  18:39:12,191 - CONST VARIABLE ee IS BEING DEFINED! ON LINE 8
INFO  18:39:12,191 - CONST VALUE false IS BEING USED! ON LINE 8
INFO  18:39:12,191 - CONST VARIABLE ff IS BEING DEFINED! ON LINE 8
INFO  18:39:12,191 - FUNCTION m WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:39:12,191 - METHOD BODY STARTING!
INFO  18:39:12,191 - METHOD BODY ENDING!
INFO  18:39:12,191 - END OF DEFINING FUNCTION m
INFO  18:39:12,191 - FUNCTION func WITH RETURN VALUE OF TYPE int ON LINE 13
INFO  18:39:12,191 - FORMAL ARRAY PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 13
INFO  18:39:12,191 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 13
INFO  18:39:12,191 - METHOD BODY STARTING!
INFO  18:39:12,192 - CONST NUMBER 0 ON LINE 13
INFO  18:39:12,192 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  18:39:12,192 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  18:39:12,192 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 13
INFO  18:39:12,192 - METHOD BODY ENDING!
INFO  18:39:12,192 - END OF DEFINING FUNCTION func
INFO  18:39:12,192 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 15
INFO  18:39:12,192 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 15
INFO  18:39:12,192 - FORMAL ARRAY PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 15
INFO  18:39:12,192 - FORMAL PARAMETER c DEFINED AND IT IS OF TYPE char ON LINE 15
INFO  18:39:12,192 - FORMAL ARRAY PARAMETER d DEFINED AND IT IS OF TYPE char ON LINE 15
INFO  18:39:12,192 - FORMAL PARAMETER e DEFINED AND IT IS OF TYPE boolean ON LINE 15
INFO  18:39:12,192 - FORMAL ARRAY PARAMETER f DEFINED AND IT IS OF TYPE boolean ON LINE 15
INFO  18:39:12,192 - VARIABLE x IS BEING DEFINED! ON LINE 16
INFO  18:39:12,193 - VARIABLE y IS BEING DEFINED! ON LINE 16
INFO  18:39:12,193 - VARIABLE z IS BEING DEFINED! ON LINE 16
INFO  18:39:12,193 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 16
INFO  18:39:12,193 - VARIABLE xx IS BEING DEFINED! ON LINE 17
INFO  18:39:12,193 - VARIABLE yy IS BEING DEFINED! ON LINE 17
INFO  18:39:12,193 - VARIABLE zz IS BEING DEFINED! ON LINE 17
INFO  18:39:12,193 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 17
INFO  18:39:12,193 - METHOD BODY STARTING!
INFO  18:39:12,193 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:39:12,193 - BEGINNING OF AN ASSIGNEMENT! ON LINE 21
INFO  18:39:12,193 - CONST NUMBER 123 ON LINE 21
INFO  18:39:12,193 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:39:12,193 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:39:12,193 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 21
INFO  18:39:12,193 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE char
INFO  18:39:12,193 - BEGINNING OF AN ASSIGNEMENT! ON LINE 22
INFO  18:39:12,194 - CONST CHAR c ON LINE 22
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  18:39:12,194 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 22
INFO  18:39:12,194 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:39:12,194 - WE ARE USING A VARIABLE OF TYPE int ON LINE 24
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:39:12,194 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:39:12,194 - WE ARE USING A VARIABLE OF TYPE int ON LINE 24
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:39:12,194 - USING TWO EXPRESSIONS OF TYPE int ON LINE 24
INFO  18:39:12,194 - CURRENT VARIABLE IN USE IS c AND IT IS OF TYPE char
INFO  18:39:12,194 - WE ARE USING A VARIABLE OF TYPE char ON LINE 25
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,194 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - CONST NUMBER 3 ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  18:39:12,195 - WE ARE USING AN ARRAY OF TYPE char ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - USING TWO EXPRESSIONS OF TYPE char ON LINE 25
INFO  18:39:12,195 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:39:12,195 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - CURRENT VARIABLE IN USE IS y AND IT IS OF TYPE int
INFO  18:39:12,195 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,195 - WE ARE USING AN ARRAY OF TYPE int ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:39:12,195 - USING TWO EXPRESSIONS OF TYPE int ON LINE 25
INFO  18:39:12,195 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:39:12,195 - BEGINNING OF AN ASSIGNEMENT! ON LINE 26
INFO  18:39:12,196 - CONST NUMBER 300 ON LINE 26
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 26
INFO  18:39:12,196 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 26
INFO  18:39:12,196 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:39:12,196 - BEGINNING OF AN ASSIGNEMENT! ON LINE 28
INFO  18:39:12,196 - CONST NUMBER 400 ON LINE 28
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:39:12,196 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 28
INFO  18:39:12,196 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:39:12,196 - BEGINNING OF AN ASSIGNEMENT! ON LINE 30
INFO  18:39:12,196 - CONST NUMBER 500 ON LINE 30
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:39:12,196 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 30
INFO  18:39:12,196 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,196 - BEGINNING OF AN ASSIGNEMENT! ON LINE 33
INFO  18:39:12,196 - CURRENT VARIABLE IN USE IS e AND IT IS OF TYPE boolean
INFO  18:39:12,196 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 33
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  18:39:12,196 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  18:39:12,197 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,197 - WE ARE USING A VARIABLE OF TYPE array ON LINE 33
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  18:39:12,197 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,197 - WE ARE USING A VARIABLE OF TYPE array ON LINE 33
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 33
INFO  18:39:12,197 - SUCCESSFUL TERNARY! TYPES: int AND int ! ON LINE 33
INFO  18:39:12,197 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 33
INFO  18:39:12,197 - BEGINNING OF A DO...WHILE LOOP!
INFO  18:39:12,197 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:39:12,197 - BEGINNING OF AN ASSIGNEMENT! ON LINE 36
INFO  18:39:12,197 - CONST NUMBER 2 ON LINE 36
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  18:39:12,197 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 36
INFO  18:39:12,197 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:39:12,197 - WE ARE USING A VARIABLE OF TYPE int ON LINE 38
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,197 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,198 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  18:39:12,198 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,198 - WE ARE USING A VARIABLE OF TYPE array ON LINE 38
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,198 - CURRENT VARIABLE IN USE IS a AND IT IS OF TYPE int
INFO  18:39:12,198 - WE ARE USING A VARIABLE OF TYPE int ON LINE 38
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,198 - TYPE -> array <- AND -> array <- ON LINE 38
INFO  18:39:12,198 - TYPE -> int <- AND -> int <- ON LINE 38
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  18:39:12,198 - USING TWO EXPRESSIONS OF TYPE int ON LINE 38
INFO  18:39:12,198 - ENDING OF A DO...WHILE LOOP! ON LINE 35
INFO  18:39:12,198 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  18:39:12,198 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,198 - WE ARE USING A VARIABLE OF TYPE array ON LINE 40
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,198 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,198 - CURRENT VARIABLE IN USE IS func AND IT IS OF TYPE int
INFO  18:39:12,199 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,199 - WE ARE USING A VARIABLE OF TYPE array ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - CONST NUMBER 0 ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE array
INFO  18:39:12,199 - WE ARE USING AN ARRAY OF TYPE int ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - TYPE -> array <- AND -> array <- ON LINE 40
INFO  18:39:12,199 - TYPE -> int <- AND -> int <- ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  18:39:12,199 - TYPE -> array <- AND -> array <- ON LINE 40
INFO  18:39:12,199 - TYPE -> int <- AND -> int <- ON LINE 40
INFO  18:39:12,199 - GLOBAL METHOD func HAS BEEN CALLED!
INFO  18:39:12,200 - CONST NUMBER 0 ON LINE 42
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:39:12,200 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  18:39:12,200 - BEGINNING OF AN ASSIGNEMENT! ON LINE 42
INFO  18:39:12,200 - CONST NUMBER 1 ON LINE 42
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:39:12,200 - CURRENT VARIABLE IN USE IS d AND IT IS OF TYPE array
INFO  18:39:12,200 - WE ARE USING AN ARRAY OF TYPE char ON LINE 42
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 42
INFO  18:39:12,200 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 42
INFO  18:39:12,200 - METHOD BODY ENDING!
INFO  18:39:12,200 - END OF DEFINING FUNCTION main
INFO  18:39:12,200 - FUNCTION k WITH VOID AS RETURN VALUE!  ON LINE 45
INFO  18:39:12,200 - FORMAL PARAMETER z DEFINED AND IT IS OF TYPE int ON LINE 45
INFO  18:39:12,200 - METHOD BODY STARTING!
INFO  18:39:12,200 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE int
INFO  18:39:12,200 - BEGINNING OF AN ASSIGNEMENT! ON LINE 47
INFO  18:39:12,200 - CONST NUMBER 400 ON LINE 47
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:39:12,200 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  18:39:12,200 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 47
INFO  18:39:12,200 - return; AND THE FUNCTION IS VOID!
INFO  18:39:12,200 - METHOD BODY ENDING!
INFO  18:39:12,201 - END OF DEFINING FUNCTION k
INFO  18:39:12,201 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:39:12,201 -  Deklarisanih promenljivih ima = 15
INFO  18:39:12,201 - ===================================
INFO  18:39:12,208 - Parsiranje uspesno zavrseno!
