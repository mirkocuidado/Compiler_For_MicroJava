INFO  23:40:30,303 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  23:40:30,442 - #2 program
INFO  23:40:30,442 - #43 MJProgram
INFO  23:40:30,442 - #43 int
INFO  23:40:30,443 - #43 a
INFO  23:40:30,444 - #31 ,
INFO  23:40:30,444 - #43 b
INFO  23:40:30,445 - #31 ,
INFO  23:40:30,445 - #43 c
INFO  23:40:30,445 - #31 ,
INFO  23:40:30,445 - #43 d
INFO  23:40:30,445 - #33 ;
INFO  23:40:30,445 - #9 const
INFO  23:40:30,445 - #43 int
INFO  23:40:30,446 - #43 term
INFO  23:40:30,446 - #19 =
INFO  23:40:30,446 - #42 0
INFO  23:40:30,446 - #33 ;
INFO  23:40:30,446 - #9 const
INFO  23:40:30,446 - #43 int
INFO  23:40:30,447 - #43 y
INFO  23:40:30,447 - #19 =
INFO  23:40:30,447 - #42 3
INFO  23:40:30,447 - #33 ;
INFO  23:40:30,448 - #35 {
INFO  23:40:30,448 - #43 int
INFO  23:40:30,449 - #43 k
INFO  23:40:30,449 - #37 (
INFO  23:40:30,449 - #43 int
INFO  23:40:30,449 - #43 a
INFO  23:40:30,449 - #31 ,
INFO  23:40:30,449 - #43 int
INFO  23:40:30,449 - #43 b
INFO  23:40:30,449 - #38 )
INFO  23:40:30,450 - #35 {
INFO  23:40:30,451 - #41 return
INFO  23:40:30,454 - #43 b
INFO  23:40:30,459 - #33 ;
INFO  23:40:30,467 - #36 }
INFO  23:40:30,468 - #5 void
INFO  23:40:30,472 - #43 main
INFO  23:40:30,473 - #37 (
INFO  23:40:30,473 - #38 )
INFO  23:40:30,474 - #43 int
INFO  23:40:30,474 - #43 x
INFO  23:40:30,474 - #33 ;
INFO  23:40:30,474 - #35 {
INFO  23:40:30,474 - #43 x
INFO  23:40:30,474 - #19 =
INFO  23:40:30,475 - #43 term
INFO  23:40:30,476 - #34 ?
INFO  23:40:30,476 - #43 k
INFO  23:40:30,478 - #37 (
INFO  23:40:30,478 - #42 10
INFO  23:40:30,478 - #31 ,
INFO  23:40:30,478 - #42 11
INFO  23:40:30,479 - #38 )
INFO  23:40:30,479 - #32 :
INFO  23:40:30,479 - #43 k
INFO  23:40:30,481 - #37 (
INFO  23:40:30,481 - #42 12
INFO  23:40:30,481 - #31 ,
INFO  23:40:30,481 - #42 13
INFO  23:40:30,481 - #38 )
INFO  23:40:30,481 - #33 ;
INFO  23:40:30,482 - #18 print
INFO  23:40:30,482 - #37 (
INFO  23:40:30,482 - #43 x
INFO  23:40:30,482 - #38 )
INFO  23:40:30,483 - #33 ;
INFO  23:40:30,483 - #14 if
INFO  23:40:30,483 - #37 (
INFO  23:40:30,483 - #43 term
INFO  23:40:30,483 - #38 )
INFO  23:40:30,485 - #35 {
INFO  23:40:30,486 - #36 }
INFO  23:40:30,486 - #15 else
INFO  23:40:30,486 - #14 if
INFO  23:40:30,486 - #37 (
INFO  23:40:30,486 - #43 term
INFO  23:40:30,486 - #21 !=
INFO  23:40:30,487 - #42 0
INFO  23:40:30,489 - #38 )
INFO  23:40:30,489 - #35 {
INFO  23:40:30,489 - #36 }
INFO  23:40:30,490 - #36 }
INFO  23:40:30,491 - #36 }
INFO  23:40:30,504 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        NoVarDeclList(
        ) [NoVarDeclList]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             x
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            NoStmt(
            ) [NoStmt]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   x
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassTwoClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             term
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                  TernaryClass(
                  ) [TernaryClass]
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          Designator(
                            DesigIdent(
                             k
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          Actuals(
                            ActualParams(
                              ActualParam(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         10
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [ActualParam]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       11
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParams]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                  ColonClass(
                  ) [ColonClass]
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          Designator(
                            DesigIdent(
                             k
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          Actuals(
                            ActualParams(
                              ActualParam(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         12
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [ActualParam]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       13
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParams]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassTwoClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         x
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        IfStatement(
          IfConditionNoError(
            ConditionClass(
              CondTermClass(
                CondFactClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             term
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                  NoCondFactOptionalClass(
                  ) [NoCondFactOptionalClass]
                ) [CondFactClass]
                NoCondTermOptionalClass(
                ) [NoCondTermOptionalClass]
              ) [CondTermClass]
              NoConditionOptionalClass(
              ) [NoConditionOptionalClass]
            ) [ConditionClass]
          ) [IfConditionNoError]
          StatementStatement(
            NoStmt(
            ) [NoStmt]
          ) [StatementStatement]
          YesOptionalStatement(
            IfStatement(
              IfConditionNoError(
                ConditionClass(
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 term
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      CondFactOptionalClass(
                        RelationOperationClassNotEqualComparation(
                        ) [RelationOperationClassNotEqualComparation]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               0
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [CondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                ) [ConditionClass]
              ) [IfConditionNoError]
              StatementStatement(
                NoStmt(
                ) [NoStmt]
              ) [StatementStatement]
              NoOptionalStatement(
              ) [NoOptionalStatement]
            ) [IfStatement]
          ) [YesOptionalStatement]
        ) [IfStatement]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  23:40:30,505 - ===================================
INFO  23:40:30,509 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  23:40:30,510 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  23:40:30,510 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  23:40:30,510 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  23:40:30,510 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  23:40:30,510 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  23:40:30,510 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  23:40:30,510 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  23:40:30,510 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  23:40:30,510 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  23:40:30,510 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  23:40:30,510 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  23:40:30,511 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  23:40:30,511 - METHOD BODY STARTING!
INFO  23:40:30,511 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  23:40:30,511 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  23:40:30,511 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:40:30,511 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  23:40:30,511 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  23:40:30,511 - METHOD BODY ENDING!
INFO  23:40:30,511 - END OF DEFINING FUNCTION k
INFO  23:40:30,511 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  23:40:30,511 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  23:40:30,511 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  23:40:30,511 - METHOD BODY STARTING!
INFO  23:40:30,511 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  23:40:30,511 - BEGINNING OF AN ASSIGNEMENT! ON LINE 59
INFO  23:40:30,512 - CURRENT VARIABLE IN USE IS term AND IT IS OF TYPE int
INFO  23:40:30,512 - WE ARE USING A VARIABLE OF TYPE int ON LINE 59
INFO  23:40:30,512 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,512 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,512 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  23:40:30,512 - CONST NUMBER 10 ON LINE 59
INFO  23:40:30,512 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,512 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,512 - CONST NUMBER 11 ON LINE 59
INFO  23:40:30,512 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,512 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,512 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:40:30,512 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:40:30,512 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  23:40:30,513 - CONST NUMBER 12 ON LINE 59
INFO  23:40:30,513 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - CONST NUMBER 13 ON LINE 59
INFO  23:40:30,513 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:40:30,513 - TYPE -> int <- AND -> int <- ON LINE 59
INFO  23:40:30,513 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 59
INFO  23:40:30,513 - SUCCESSFUL TERNARY! TYPES: int AND int ! ON LINE 59
INFO  23:40:30,513 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 59
INFO  23:40:30,514 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  23:40:30,514 - WE ARE USING A VARIABLE OF TYPE int ON LINE 60
INFO  23:40:30,514 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  23:40:30,514 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 60
INFO  23:40:30,514 - PRINT FUNCTION CALL IN USE! ON LINE 60
INFO  23:40:30,514 - CURRENT VARIABLE IN USE IS term AND IT IS OF TYPE int
INFO  23:40:30,514 - WE ARE USING A VARIABLE OF TYPE int ON LINE 62
INFO  23:40:30,514 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  23:40:30,514 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
ERROR 23:40:30,514 - ERROR ON LINE 62 : CONDFACT CAN'T CONSIST OF ONE EXPR WHICH IS NOT BOOL ON LINE 62
INFO  23:40:30,515 - CURRENT VARIABLE IN USE IS term AND IT IS OF TYPE int
INFO  23:40:30,515 - WE ARE USING A VARIABLE OF TYPE int ON LINE 65
INFO  23:40:30,515 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  23:40:30,515 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  23:40:30,515 - CONST NUMBER 0 ON LINE 65
INFO  23:40:30,515 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  23:40:30,515 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  23:40:30,515 - USING TWO EXPRESSIONS OF TYPE int ON LINE 65
INFO  23:40:30,515 - METHOD BODY ENDING!
INFO  23:40:30,515 - END OF DEFINING FUNCTION main
INFO  23:40:30,515 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  23:40:30,516 -  Deklarisanih promenljivih ima = 5
INFO  23:40:30,516 - ===================================
ERROR 23:40:30,517 - Parsiranje NIJE uspesno zavrseno!
