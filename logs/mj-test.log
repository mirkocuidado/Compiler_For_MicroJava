INFO  01:32:39,146 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  01:32:39,216 - #34 program
INFO  01:32:39,216 - #48 MJProgram
INFO  01:32:39,217 - #7 const
INFO  01:32:39,218 - #37 ;
ERROR 01:32:39,218 - 
Sintaksna greska na liniji 2
INFO  01:32:39,219 - #7 const
INFO  01:32:39,219 - #48 int
INFO  01:32:39,219 - #48 a
ERROR 01:32:39,220 - Successful error recovery by parser on line 2 -> Const Declaration Semi
INFO  01:32:39,221 - #33 =
INFO  01:32:39,222 - #47 3
INFO  01:32:39,222 - #42 ,
INFO  01:32:39,222 - #48 b
INFO  01:32:39,222 - #33 =
INFO  01:32:39,222 - #47 4
INFO  01:32:39,222 - #42 ,
INFO  01:32:39,223 - #48 c
INFO  01:32:39,223 - #33 =
INFO  01:32:39,233 - #37 ;
ERROR 01:32:39,233 - 
Sintaksna greska na liniji 3
INFO  01:32:39,233 - #7 const
INFO  01:32:39,233 - #48 int
INFO  01:32:39,233 - #48 a
ERROR 01:32:39,233 - Successful error recovery by parser on line 3 -> Const Declaration
INFO  01:32:39,234 - #37 ;
ERROR 01:32:39,235 - 
Sintaksna greska na liniji 4
INFO  01:32:39,235 - #35 {
INFO  01:32:39,235 - #44 void
INFO  01:32:39,235 - #48 main
ERROR 01:32:39,235 - Successful error recovery by parser on line 4 -> Const Declaration
INFO  01:32:39,236 - #38 (
INFO  01:32:39,237 - #39 )
INFO  01:32:39,237 - #35 {
INFO  01:32:39,238 - #49 if
INFO  01:32:39,239 - #38 (
INFO  01:32:39,239 - #48 a
INFO  01:32:39,239 - #20 ==
INFO  01:32:39,243 - #47 3
INFO  01:32:39,244 - #26 &&
INFO  01:32:39,245 - #48 b
INFO  01:32:39,245 - #20 ==
INFO  01:32:39,246 - #26 &&
ERROR 01:32:39,246 - 
Sintaksna greska na liniji 8
INFO  01:32:39,246 - #48 c
INFO  01:32:39,246 - #20 ==
INFO  01:32:39,246 - #47 4
INFO  01:32:39,246 - #26 &&
INFO  01:32:39,246 - #48 d
INFO  01:32:39,246 - #20 ==
INFO  01:32:39,246 - #47 5
INFO  01:32:39,246 - #39 )
INFO  01:32:39,246 - #35 {
INFO  01:32:39,246 - #48 zzz
INFO  01:32:39,246 - #33 =
ERROR 01:32:39,247 - Successful error recovery by parser on line 8 -> ConditionOptional
INFO  01:32:39,247 - #47 0
INFO  01:32:39,249 - #37 ;
INFO  01:32:39,249 - #36 }
INFO  01:32:39,249 - #50 else
INFO  01:32:39,249 - #35 {
INFO  01:32:39,249 - #48 zzz
INFO  01:32:39,250 - #33 =
INFO  01:32:39,250 - #47 1
INFO  01:32:39,250 - #37 ;
INFO  01:32:39,250 - #36 }
INFO  01:32:39,250 - #36 }
INFO  01:32:39,250 - #36 }
INFO  01:32:39,253 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationsConsts(
          ConstDeclYesError(
          ) [ConstDeclYesError]
        ) [GroupDeclarationsConsts]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListClass(
            ConstListClass(
              ConstListSingle(
                ConstListNoArray(
                 a
                  ValuesNumber(
                   3
                  ) [ValuesNumber]
                ) [ConstListNoArray]
              ) [ConstListSingle]
              ConstListNoArray(
               b
                ValuesNumber(
                 4
                ) [ValuesNumber]
              ) [ConstListNoArray]
            ) [ConstListClass]
            ErrorConstVariableList(
            ) [ErrorConstVariableList]
          ) [ConstListClass]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ErrorConstVariableList(
          ) [ErrorConstVariableList]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    NoMethodDecl(
    ) [NoMethodDecl]
    MethodDecl(
      ReturnValueClassVoid(
      ) [ReturnValueClassVoid]
     main
      NoFormParam(
      ) [NoFormParam]
      NoVarDeclList(
      ) [NoVarDeclList]
      Statements(
        NoStmt(
        ) [NoStmt]
        IfStatement(
          IfConditionNoError(
            IfConditionYesErrorTwo(
            ) [IfConditionYesErrorTwo]
          ) [IfConditionNoError]
          StatementStatement(
            Statements(
              NoStmt(
              ) [NoStmt]
              Assignment(
                DesignatorStatementClass(
                  Designator(
                   zzz
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  DesignatorStatementOptionsClassAssignExpression(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [DesignatorStatementClass]
              ) [Assignment]
            ) [Statements]
          ) [StatementStatement]
          YesOptionalStatement(
            StatementStatement(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementClass(
                    Designator(
                     zzz
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    DesignatorStatementOptionsClassAssignExpression(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               1
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [DesignatorStatementClass]
                ) [Assignment]
              ) [Statements]
            ) [StatementStatement]
          ) [YesOptionalStatement]
        ) [IfStatement]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  01:32:39,253 - ===================================
