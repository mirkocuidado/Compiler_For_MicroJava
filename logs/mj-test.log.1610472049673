INFO  18:20:32,722 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  18:20:32,866 - #2 program
INFO  18:20:32,867 - #43 MJProgram
INFO  18:20:32,868 - #43 int
INFO  18:20:32,871 - #43 a
INFO  18:20:32,873 - #31 ,
INFO  18:20:32,873 - #43 b
INFO  18:20:32,873 - #31 ,
INFO  18:20:32,874 - #43 c
INFO  18:20:32,874 - #31 ,
INFO  18:20:32,874 - #43 d
INFO  18:20:32,874 - #33 ;
INFO  18:20:32,874 - #9 const
INFO  18:20:32,875 - #43 int
INFO  18:20:32,875 - #43 y
INFO  18:20:32,875 - #19 =
INFO  18:20:32,876 - #42 3
INFO  18:20:32,876 - #33 ;
INFO  18:20:32,876 - #35 {
INFO  18:20:32,877 - #43 int
INFO  18:20:32,878 - #43 k
INFO  18:20:32,878 - #37 (
INFO  18:20:32,879 - #43 int
INFO  18:20:32,879 - #43 a
INFO  18:20:32,879 - #31 ,
INFO  18:20:32,879 - #43 int
INFO  18:20:32,879 - #43 b
INFO  18:20:32,879 - #38 )
INFO  18:20:32,880 - #35 {
INFO  18:20:32,881 - #41 return
INFO  18:20:32,883 - #43 b
INFO  18:20:32,886 - #33 ;
INFO  18:20:32,890 - #36 }
INFO  18:20:32,891 - #5 void
INFO  18:20:32,895 - #43 main
INFO  18:20:32,895 - #37 (
INFO  18:20:32,895 - #38 )
INFO  18:20:32,897 - #43 int
INFO  18:20:32,897 - #43 x
INFO  18:20:32,897 - #33 ;
INFO  18:20:32,897 - #43 char
INFO  18:20:32,898 - #43 z
INFO  18:20:32,898 - #33 ;
INFO  18:20:32,898 - #43 char
INFO  18:20:32,898 - #43 xx
INFO  18:20:32,898 - #39 [
INFO  18:20:32,898 - #40 ]
INFO  18:20:32,898 - #33 ;
INFO  18:20:32,899 - #35 {
INFO  18:20:32,899 - #43 x
INFO  18:20:32,899 - #19 =
INFO  18:20:32,899 - #42 2
INFO  18:20:32,902 - #49 +
INFO  18:20:32,902 - #42 3
INFO  18:20:32,902 - #46 *
INFO  18:20:32,902 - #37 (
INFO  18:20:32,903 - #42 4
INFO  18:20:32,903 - #49 +
INFO  18:20:32,903 - #42 5
INFO  18:20:32,903 - #38 )
INFO  18:20:32,903 - #49 +
INFO  18:20:32,904 - #43 k
INFO  18:20:32,904 - #37 (
INFO  18:20:32,904 - #42 0
INFO  18:20:32,904 - #31 ,
INFO  18:20:32,905 - #42 1
INFO  18:20:32,905 - #38 )
INFO  18:20:32,905 - #33 ;
INFO  18:20:32,906 - #18 print
INFO  18:20:32,906 - #37 (
INFO  18:20:32,907 - #43 x
INFO  18:20:32,907 - #38 )
INFO  18:20:32,909 - #33 ;
INFO  18:20:32,909 - #43 xx
INFO  18:20:32,909 - #19 =
INFO  18:20:32,909 - #16 new
INFO  18:20:32,909 - #43 char
INFO  18:20:32,909 - #39 [
INFO  18:20:32,909 - #42 7
INFO  18:20:32,910 - #40 ]
INFO  18:20:32,910 - #33 ;
INFO  18:20:32,911 - #43 xx
INFO  18:20:32,911 - #39 [
INFO  18:20:32,913 - #42 0
INFO  18:20:32,915 - #40 ]
INFO  18:20:32,916 - #19 =
INFO  18:20:32,916 - #44 d
INFO  18:20:32,916 - #33 ;
INFO  18:20:32,916 - #43 z
INFO  18:20:32,916 - #19 =
INFO  18:20:32,916 - #43 xx
INFO  18:20:32,916 - #39 [
INFO  18:20:32,916 - #42 0
INFO  18:20:32,916 - #40 ]
INFO  18:20:32,916 - #33 ;
INFO  18:20:32,917 - #18 print
INFO  18:20:32,917 - #37 (
INFO  18:20:32,917 - #43 z
INFO  18:20:32,917 - #38 )
INFO  18:20:32,917 - #33 ;
INFO  18:20:32,917 - #18 print
INFO  18:20:32,917 - #37 (
INFO  18:20:32,917 - #43 xx
INFO  18:20:32,917 - #39 [
INFO  18:20:32,917 - #42 0
INFO  18:20:32,917 - #40 ]
INFO  18:20:32,917 - #38 )
INFO  18:20:32,917 - #33 ;
INFO  18:20:32,917 - #36 }
INFO  18:20:32,918 - #36 }
INFO  18:20:32,930 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      NoGroupDecl(
      ) [NoGroupDecl]
      GroupDeclarationVars(
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListClass(
            VarListClass(
              VarListClass(
                VarListSingle(
                  VarClassNoArray(
                   a
                  ) [VarClassNoArray]
                ) [VarListSingle]
                VarClassNoArray(
                 b
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               c
              ) [VarClassNoArray]
            ) [VarListClass]
            VarClassNoArray(
             d
            ) [VarClassNoArray]
          ) [VarListClass]
        ) [VarDeclClass]
      ) [GroupDeclarationVars]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          VarDeclListClass(
            NoVarDeclList(
            ) [NoVarDeclList]
            VarDeclClass(
              Type(
               int
              ) [Type]
              VarListSingle(
                VarClassNoArray(
                 x
                ) [VarClassNoArray]
              ) [VarListSingle]
            ) [VarDeclClass]
          ) [VarDeclListClass]
          VarDeclClass(
            Type(
             char
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               z
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           char
          ) [Type]
          VarListSingle(
            VarClassArray(
             xx
            ) [VarClassArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           x
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 2
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              ExprOptionalListClass(
                                ExprOptionalListClass(
                                  NoExprOptionalListClass(
                                  ) [NoExprOptionalListClass]
                                  PlusOperation(
                                   +
                                  ) [PlusOperation]
                                  TermClass(
                                    NumberConst(
                                     3
                                    ) [NumberConst]
                                    TermOptionalListClass(
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                      MultiplyOperationClass(
                                       *
                                      ) [MultiplyOperationClass]
                                      ParenFactorClass(
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 4
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              ExprOptionalListClass(
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                                PlusOperation(
                                                 +
                                                ) [PlusOperation]
                                                TermClass(
                                                  NumberConst(
                                                   5
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                              ) [ExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [ParenFactorClass]
                                    ) [TermOptionalListClass]
                                  ) [TermClass]
                                ) [ExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  FactorOptionalParams(
                                    Designator(
                                      DesigIdent(
                                       k
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                    Actuals(
                                      ActualParams(
                                        ActualParam(
                                          ClassOneClass(
                                            NormalExpressionClass(
                                              ExprFirstOptionClassWithMinus(
                                                TermClass(
                                                  NumberConst(
                                                   0
                                                  ) [NumberConst]
                                                  NoTermOptionalListClass(
                                                  ) [NoTermOptionalListClass]
                                                ) [TermClass]
                                                NoExprOptionalListClass(
                                                ) [NoExprOptionalListClass]
                                              ) [ExprFirstOptionClassWithMinus]
                                            ) [NormalExpressionClass]
                                          ) [ClassOneClass]
                                        ) [ActualParam]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                NumberConst(
                                                 1
                                                ) [NumberConst]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [ActualParams]
                                    ) [Actuals]
                                  ) [FactorOptionalParams]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 x
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       xx
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NewFactorClass(
                              Type(
                               char
                              ) [Type]
                              FactorOptionalSecondClass(
                                ClassOneClass(
                                  NormalExpressionClass(
                                    ExprFirstOptionClassWithMinus(
                                      TermClass(
                                        NumberConst(
                                         7
                                        ) [NumberConst]
                                        NoTermOptionalListClass(
                                        ) [NoTermOptionalListClass]
                                      ) [TermClass]
                                      NoExprOptionalListClass(
                                      ) [NoExprOptionalListClass]
                                    ) [ExprFirstOptionClassWithMinus]
                                  ) [NormalExpressionClass]
                                ) [ClassOneClass]
                              ) [FactorOptionalSecondClass]
                            ) [NewFactorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     xx
                    ) [DesigIdent]
                    OptionalDesignatorArray(
                      HelperClass(
                      ) [HelperClass]
                      LSquareClass(
                      ) [LSquareClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               0
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [OptionalDesignatorArray]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          CharConst(
                           d
                          ) [CharConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   z
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             xx
                            ) [DesigIdent]
                            OptionalDesignatorArray(
                              HelperClass(
                              ) [HelperClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      NumberConst(
                                       0
                                      ) [NumberConst]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         z
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        PrintStmt(
          ClassOneClass(
            NormalExpressionClass(
              ExprFirstOptionClassWithMinus(
                TermClass(
                  DesignatorClass(
                    Designator(
                      DesigIdent(
                       xx
                      ) [DesigIdent]
                      OptionalDesignatorArray(
                        HelperClass(
                        ) [HelperClass]
                        LSquareClass(
                        ) [LSquareClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                NumberConst(
                                 0
                                ) [NumberConst]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              NoExprOptionalListClass(
                              ) [NoExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [OptionalDesignatorArray]
                    ) [Designator]
                  ) [DesignatorClass]
                  NoTermOptionalListClass(
                  ) [NoTermOptionalListClass]
                ) [TermClass]
                NoExprOptionalListClass(
                ) [NoExprOptionalListClass]
              ) [ExprFirstOptionClassWithMinus]
            ) [NormalExpressionClass]
          ) [ClassOneClass]
          NoCommaNumberClass(
          ) [NoCommaNumberClass]
        ) [PrintStmt]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  18:20:32,933 - ===================================
INFO  18:20:32,938 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  18:20:32,939 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  18:20:32,939 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  18:20:32,939 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  18:20:32,939 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  18:20:32,939 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  18:20:32,939 - CONST VALUE 3 IS BEING USED! ON LINE 4
INFO  18:20:32,940 - CONST VARIABLE y IS BEING DEFINED! ON LINE 4
INFO  18:20:32,940 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  18:20:32,940 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:20:32,940 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  18:20:32,940 - METHOD BODY STARTING!
INFO  18:20:32,940 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  18:20:32,941 - WE ARE USING A VARIABLE OF TYPE int ON LINE 7
INFO  18:20:32,941 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:20:32,941 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 7
INFO  18:20:32,941 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 7
INFO  18:20:32,941 - METHOD BODY ENDING!
INFO  18:20:32,941 - END OF DEFINING FUNCTION k
INFO  18:20:32,941 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 11
INFO  18:20:32,941 - VARIABLE x IS BEING DEFINED! ON LINE 12
INFO  18:20:32,941 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 12
INFO  18:20:32,942 - VARIABLE z IS BEING DEFINED! ON LINE 13
INFO  18:20:32,942 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 13
INFO  18:20:32,942 - ARRAY VARIABLE xx IS BEING DEFINED! ON LINE 15
INFO  18:20:32,942 - VARIABLES OF TYPE char HAVE BEEN DEFINED! ON LINE 15
INFO  18:20:32,942 - METHOD BODY STARTING!
INFO  18:20:32,942 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:20:32,943 - BEGINNING OF AN ASSIGNEMENT! ON LINE 20
INFO  18:20:32,943 - CONST NUMBER 2 ON LINE 20
INFO  18:20:32,943 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,943 - CONST NUMBER 3 ON LINE 20
INFO  18:20:32,943 - CONST NUMBER 4 ON LINE 20
INFO  18:20:32,943 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,943 - CONST NUMBER 5 ON LINE 20
INFO  18:20:32,943 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,943 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 15
INFO  18:20:32,943 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:20:32,943 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 10
INFO  18:20:32,943 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:20:32,943 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 6
INFO  18:20:32,944 - CURRENT VARIABLE IN USE IS k AND IT IS OF TYPE int
INFO  18:20:32,944 - CONST NUMBER 0 ON LINE 20
INFO  18:20:32,944 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,944 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,944 - CONST NUMBER 1 ON LINE 20
INFO  18:20:32,944 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,944 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,944 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:20:32,944 - TYPE -> int <- AND -> int <- ON LINE 20
INFO  18:20:32,945 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  18:20:32,945 - USING INTEGERS IN TERM! ON LINE 6
INFO  18:20:32,945 - USING INTEGERS IN TERM! ON LINE 20
INFO  18:20:32,946 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 20
INFO  18:20:32,946 - CURRENT VARIABLE IN USE IS x AND IT IS OF TYPE int
INFO  18:20:32,946 - WE ARE USING A VARIABLE OF TYPE int ON LINE 21
INFO  18:20:32,947 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:20:32,947 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 21
INFO  18:20:32,947 - PRINT FUNCTION CALL IN USE! ON LINE 21
INFO  18:20:32,947 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:20:32,947 - BEGINNING OF AN ASSIGNEMENT! ON LINE 24
INFO  18:20:32,947 - CONST NUMBER 7 ON LINE 24
INFO  18:20:32,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:20:32,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:20:32,948 - USAGE OF KEYWORD NEW! ON LINE 24
INFO  18:20:32,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:20:32,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 24
INFO  18:20:32,948 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 24
INFO  18:20:32,948 - CONST NUMBER 0 ON LINE 25
INFO  18:20:32,948 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:20:32,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:20:32,949 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:20:32,949 - BEGINNING OF AN ASSIGNEMENT! ON LINE 25
INFO  18:20:32,949 - CONST CHAR d ON LINE 25
INFO  18:20:32,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:20:32,949 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  18:20:32,950 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 25
INFO  18:20:32,950 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  18:20:32,950 - BEGINNING OF AN ASSIGNEMENT! ON LINE 27
INFO  18:20:32,950 - CONST NUMBER 0 ON LINE 27
INFO  18:20:32,950 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:20:32,950 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:20:32,950 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:20:32,950 - WE ARE USING AN ARRAY OF TYPE char ON LINE 27
INFO  18:20:32,950 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:20:32,950 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  18:20:32,950 - SUCCESSFUL ASSIGNEMENT! TYPES: char AND char ! ON LINE 27
INFO  18:20:32,950 - CURRENT VARIABLE IN USE IS z AND IT IS OF TYPE char
INFO  18:20:32,950 - WE ARE USING A VARIABLE OF TYPE char ON LINE 28
INFO  18:20:32,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:20:32,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 28
INFO  18:20:32,951 - PRINT FUNCTION CALL IN USE! ON LINE 28
INFO  18:20:32,951 - CONST NUMBER 0 ON LINE 30
INFO  18:20:32,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:20:32,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:20:32,951 - CURRENT VARIABLE IN USE IS xx AND IT IS OF TYPE array
INFO  18:20:32,951 - WE ARE USING AN ARRAY OF TYPE char ON LINE 30
INFO  18:20:32,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:20:32,951 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 30
INFO  18:20:32,951 - PRINT FUNCTION CALL IN USE! ON LINE 30
INFO  18:20:32,951 - METHOD BODY ENDING!
INFO  18:20:32,951 - END OF DEFINING FUNCTION main
INFO  18:20:32,951 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  18:20:32,951 -  Deklarisanih promenljivih ima = 7
INFO  18:20:32,951 - ===================================
INFO  18:20:32,957 - Parsiranje uspesno zavrseno!
