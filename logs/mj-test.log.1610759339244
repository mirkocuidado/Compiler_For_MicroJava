INFO  02:06:34,731 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  02:06:34,819 - #2 program
INFO  02:06:34,819 - #43 p
INFO  02:06:34,819 - #43 int
INFO  02:06:34,821 - #43 buffer
INFO  02:06:34,822 - #39 [
INFO  02:06:34,822 - #40 ]
INFO  02:06:34,822 - #33 ;
INFO  02:06:34,822 - #35 {
INFO  02:06:34,822 - #43 int
INFO  02:06:34,823 - #43 give_me_length_of_array
INFO  02:06:34,823 - #37 (
INFO  02:06:34,823 - #43 int
INFO  02:06:34,823 - #43 array
INFO  02:06:34,824 - #39 [
INFO  02:06:34,824 - #40 ]
INFO  02:06:34,824 - #38 )
INFO  02:06:34,824 - #35 {
INFO  02:06:34,825 - #41 return
INFO  02:06:34,826 - #43 len
INFO  02:06:34,827 - #37 (
INFO  02:06:34,832 - #43 array
INFO  02:06:34,832 - #38 )
INFO  02:06:34,834 - #33 ;
INFO  02:06:34,834 - #36 }
INFO  02:06:34,835 - #43 int
INFO  02:06:34,837 - #43 num_plus_ten
INFO  02:06:34,837 - #37 (
INFO  02:06:34,837 - #43 int
INFO  02:06:34,837 - #43 num
INFO  02:06:34,837 - #38 )
INFO  02:06:34,837 - #35 {
INFO  02:06:34,837 - #41 return
INFO  02:06:34,837 - #43 num
INFO  02:06:34,837 - #49 +
INFO  02:06:34,837 - #42 10
INFO  02:06:34,837 - #33 ;
INFO  02:06:34,838 - #36 }
INFO  02:06:34,838 - #43 int
INFO  02:06:34,838 - #43 sum_all_elements_of_array
INFO  02:06:34,838 - #37 (
INFO  02:06:34,838 - #43 int
INFO  02:06:34,838 - #43 array
INFO  02:06:34,838 - #39 [
INFO  02:06:34,838 - #40 ]
INFO  02:06:34,838 - #38 )
INFO  02:06:34,838 - #43 int
INFO  02:06:34,838 - #43 sum
INFO  02:06:34,838 - #31 ,
INFO  02:06:34,838 - #43 i
INFO  02:06:34,839 - #33 ;
INFO  02:06:34,839 - #35 {
INFO  02:06:34,839 - #43 sum
INFO  02:06:34,839 - #19 =
INFO  02:06:34,839 - #42 0
INFO  02:06:34,840 - #33 ;
INFO  02:06:34,841 - #43 i
INFO  02:06:34,841 - #19 =
INFO  02:06:34,841 - #42 0
INFO  02:06:34,841 - #33 ;
INFO  02:06:34,841 - #12 do
INFO  02:06:34,841 - #35 {
INFO  02:06:34,842 - #43 sum
INFO  02:06:34,842 - #19 =
INFO  02:06:34,842 - #43 sum
INFO  02:06:34,843 - #49 +
INFO  02:06:34,843 - #43 array
INFO  02:06:34,843 - #39 [
INFO  02:06:34,844 - #43 i
INFO  02:06:34,845 - #40 ]
INFO  02:06:34,845 - #33 ;
INFO  02:06:34,845 - #43 i
INFO  02:06:34,845 - #28 ++
INFO  02:06:34,845 - #33 ;
INFO  02:06:34,845 - #36 }
INFO  02:06:34,845 - #13 while
INFO  02:06:34,845 - #37 (
INFO  02:06:34,846 - #43 i
INFO  02:06:34,847 - #23 <
INFO  02:06:34,847 - #43 give_me_length_of_array
INFO  02:06:34,848 - #37 (
INFO  02:06:34,848 - #43 array
INFO  02:06:34,848 - #38 )
INFO  02:06:34,848 - #38 )
INFO  02:06:34,850 - #33 ;
INFO  02:06:34,851 - #41 return
INFO  02:06:34,851 - #43 sum
INFO  02:06:34,851 - #33 ;
INFO  02:06:34,851 - #36 }
INFO  02:06:34,851 - #5 void
INFO  02:06:34,852 - #43 main
INFO  02:06:34,852 - #37 (
INFO  02:06:34,852 - #38 )
INFO  02:06:34,852 - #43 int
INFO  02:06:34,852 - #43 index
INFO  02:06:34,853 - #33 ;
INFO  02:06:34,853 - #43 int
INFO  02:06:34,853 - #43 sum
INFO  02:06:34,853 - #33 ;
INFO  02:06:34,853 - #35 {
INFO  02:06:34,853 - #43 buffer
INFO  02:06:34,853 - #19 =
INFO  02:06:34,853 - #16 new
INFO  02:06:34,853 - #43 int
INFO  02:06:34,853 - #39 [
INFO  02:06:34,853 - #42 10
INFO  02:06:34,853 - #40 ]
INFO  02:06:34,853 - #33 ;
INFO  02:06:34,853 - #43 index
INFO  02:06:34,853 - #19 =
INFO  02:06:34,854 - #42 0
INFO  02:06:34,854 - #33 ;
INFO  02:06:34,854 - #12 do
INFO  02:06:34,854 - #35 {
INFO  02:06:34,854 - #43 buffer
INFO  02:06:34,854 - #39 [
INFO  02:06:34,854 - #43 index
INFO  02:06:34,854 - #40 ]
INFO  02:06:34,854 - #19 =
INFO  02:06:34,854 - #43 num_plus_ten
INFO  02:06:34,854 - #37 (
INFO  02:06:34,854 - #43 index
INFO  02:06:34,854 - #38 )
INFO  02:06:34,854 - #33 ;
INFO  02:06:34,854 - #43 index
INFO  02:06:34,854 - #28 ++
INFO  02:06:34,854 - #33 ;
INFO  02:06:34,854 - #36 }
INFO  02:06:34,855 - #13 while
INFO  02:06:34,855 - #37 (
INFO  02:06:34,855 - #43 index
INFO  02:06:34,855 - #23 <
INFO  02:06:34,855 - #43 give_me_length_of_array
INFO  02:06:34,855 - #37 (
INFO  02:06:34,855 - #43 buffer
INFO  02:06:34,855 - #38 )
INFO  02:06:34,855 - #38 )
INFO  02:06:34,855 - #33 ;
INFO  02:06:34,855 - #43 sum
INFO  02:06:34,855 - #19 =
INFO  02:06:34,855 - #43 sum_all_elements_of_array
INFO  02:06:34,855 - #37 (
INFO  02:06:34,855 - #43 buffer
INFO  02:06:34,855 - #38 )
INFO  02:06:34,855 - #33 ;
INFO  02:06:34,856 - #18 print
INFO  02:06:34,856 - #37 (
INFO  02:06:34,856 - #43 sum
INFO  02:06:34,856 - #38 )
INFO  02:06:34,856 - #33 ;
INFO  02:06:34,857 - #41 return
INFO  02:06:34,857 - #33 ;
INFO  02:06:34,857 - #36 }
INFO  02:06:34,857 - #36 }
INFO  02:06:34,866 - Program(
  ProgramName(
   p
  ) [ProgramName]
  GroupDeclarations(
    NoGroupDecl(
    ) [NoGroupDecl]
    GroupDeclarationVars(
      VarDeclClass(
        Type(
         int
        ) [Type]
        VarListSingle(
          VarClassArray(
           buffer
          ) [VarClassArray]
        ) [VarListSingle]
      ) [VarDeclClass]
    ) [GroupDeclarationVars]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      MethodDeclarations(
        MethodDeclarations(
          NoMethodDecl(
          ) [NoMethodDecl]
          MethodDecl(
            ReturnValueClassNoVoid(
              Type(
               int
              ) [Type]
             give_me_length_of_array
            ) [ReturnValueClassNoVoid]
            FormParams(
              SingleFormalParamDecl(
                FormalParamDeclClassArray(
                  Type(
                   int
                  ) [Type]
                 array
                ) [FormalParamDeclClassArray]
              ) [SingleFormalParamDecl]
            ) [FormParams]
            NoVarDeclList(
            ) [NoVarDeclList]
            LBraceClass(
            ) [LBraceClass]
            Statements(
              NoStmt(
              ) [NoStmt]
              ReturnExpr(
                ReturnNonTerminalClass(
                ) [ReturnNonTerminalClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          Designator(
                            DesigIdent(
                             len
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          Actuals(
                            ActualParam(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           array
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParam]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [ReturnExpr]
            ) [Statements]
            RBraceClass(
            ) [RBraceClass]
          ) [MethodDecl]
        ) [MethodDeclarations]
        MethodDecl(
          ReturnValueClassNoVoid(
            Type(
             int
            ) [Type]
           num_plus_ten
          ) [ReturnValueClassNoVoid]
          FormParams(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               num
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
          ) [FormParams]
          NoVarDeclList(
          ) [NoVarDeclList]
          LBraceClass(
          ) [LBraceClass]
          Statements(
            NoStmt(
            ) [NoStmt]
            ReturnExpr(
              ReturnNonTerminalClass(
              ) [ReturnNonTerminalClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      DesignatorClass(
                        Designator(
                          DesigIdent(
                           num
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorClass]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    ExprOptionalListClass(
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                      PlusOperation(
                       +
                      ) [PlusOperation]
                      TermClass(
                        NumberConst(
                         10
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                    ) [ExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [ReturnExpr]
          ) [Statements]
          RBraceClass(
          ) [RBraceClass]
        ) [MethodDecl]
      ) [MethodDeclarations]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         sum_all_elements_of_array
        ) [ReturnValueClassNoVoid]
        FormParams(
          SingleFormalParamDecl(
            FormalParamDeclClassArray(
              Type(
               int
              ) [Type]
             array
            ) [FormalParamDeclClassArray]
          ) [SingleFormalParamDecl]
        ) [FormParams]
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListSingle(
                VarClassNoArray(
                 sum
                ) [VarClassNoArray]
              ) [VarListSingle]
              VarClassNoArray(
               i
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          Statements(
            Statements(
              Statements(
                NoStmt(
                ) [NoStmt]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       sum
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              Assignment(
                DesignatorStatementOptionsClassAssignExpression(
                  Designator(
                    DesigIdent(
                     i
                    ) [DesigIdent]
                    NoOptionalDesignatorClass(
                    ) [NoOptionalDesignatorClass]
                  ) [Designator]
                  AssignOpClass(
                    AssignOperationClass(
                    ) [AssignOperationClass]
                  ) [AssignOpClass]
                  ClassOneClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          NumberConst(
                           0
                          ) [NumberConst]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                  ) [ClassOneClass]
                ) [DesignatorStatementOptionsClassAssignExpression]
              ) [Assignment]
            ) [Statements]
            DoWhileStatement(
              DoClass(
              ) [DoClass]
              StatementStatement(
                Statements(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    Assignment(
                      DesignatorStatementOptionsClassAssignExpression(
                        Designator(
                          DesigIdent(
                           sum
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                        AssignOpClass(
                          AssignOperationClass(
                          ) [AssignOperationClass]
                        ) [AssignOpClass]
                        ClassOneClass(
                          NormalExpressionClass(
                            ExprFirstOptionClassWithMinus(
                              TermClass(
                                DesignatorClass(
                                  Designator(
                                    DesigIdent(
                                     sum
                                    ) [DesigIdent]
                                    NoOptionalDesignatorClass(
                                    ) [NoOptionalDesignatorClass]
                                  ) [Designator]
                                ) [DesignatorClass]
                                NoTermOptionalListClass(
                                ) [NoTermOptionalListClass]
                              ) [TermClass]
                              ExprOptionalListClass(
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                                PlusOperation(
                                 +
                                ) [PlusOperation]
                                TermClass(
                                  DesignatorClass(
                                    Designator(
                                      DesigIdent(
                                       array
                                      ) [DesigIdent]
                                      OptionalDesignatorArray(
                                        HelperClass(
                                        ) [HelperClass]
                                        LSquareClass(
                                        ) [LSquareClass]
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     i
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [OptionalDesignatorArray]
                                    ) [Designator]
                                  ) [DesignatorClass]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                              ) [ExprOptionalListClass]
                            ) [ExprFirstOptionClassWithMinus]
                          ) [NormalExpressionClass]
                        ) [ClassOneClass]
                      ) [DesignatorStatementOptionsClassAssignExpression]
                    ) [Assignment]
                  ) [Statements]
                  Assignment(
                    DesignatorStatementPlusPlus(
                      Designator(
                        DesigIdent(
                         i
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorStatementPlusPlus]
                  ) [Assignment]
                ) [Statements]
              ) [StatementStatement]
              LParenClass(
              ) [LParenClass]
              ConditionClass(
                CondTermClass(
                  CondFactClass(
                    NormalExpressionClass(
                      ExprFirstOptionClassWithMinus(
                        TermClass(
                          DesignatorClass(
                            Designator(
                              DesigIdent(
                               i
                              ) [DesigIdent]
                              NoOptionalDesignatorClass(
                              ) [NoOptionalDesignatorClass]
                            ) [Designator]
                          ) [DesignatorClass]
                          NoTermOptionalListClass(
                          ) [NoTermOptionalListClass]
                        ) [TermClass]
                        NoExprOptionalListClass(
                        ) [NoExprOptionalListClass]
                      ) [ExprFirstOptionClassWithMinus]
                    ) [NormalExpressionClass]
                    CondFactOptionalClass(
                      LessOperationClass(
                      ) [LessOperationClass]
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            FactorOptionalParams(
                              Designator(
                                DesigIdent(
                                 give_me_length_of_array
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                              Actuals(
                                ActualParam(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          DesignatorClass(
                                            Designator(
                                              DesigIdent(
                                               array
                                              ) [DesigIdent]
                                              NoOptionalDesignatorClass(
                                              ) [NoOptionalDesignatorClass]
                                            ) [Designator]
                                          ) [DesignatorClass]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [ActualParam]
                              ) [Actuals]
                            ) [FactorOptionalParams]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [CondFactOptionalClass]
                  ) [CondFactClass]
                  NoCondTermOptionalClass(
                  ) [NoCondTermOptionalClass]
                ) [CondTermClass]
                NoConditionOptionalClass(
                ) [NoConditionOptionalClass]
              ) [ConditionClass]
              RParenClass(
              ) [RParenClass]
            ) [DoWhileStatement]
          ) [Statements]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         sum
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               index
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           int
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             sum
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  Assignment(
                    DesignatorStatementOptionsClassAssignExpression(
                      Designator(
                        DesigIdent(
                         buffer
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                      AssignOpClass(
                        AssignOperationClass(
                        ) [AssignOperationClass]
                      ) [AssignOpClass]
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NewFactorClass(
                                Type(
                                 int
                                ) [Type]
                                FactorOptionalSecondClass(
                                  ClassOneClass(
                                    NormalExpressionClass(
                                      ExprFirstOptionClassWithMinus(
                                        TermClass(
                                          NumberConst(
                                           10
                                          ) [NumberConst]
                                          NoTermOptionalListClass(
                                          ) [NoTermOptionalListClass]
                                        ) [TermClass]
                                        NoExprOptionalListClass(
                                        ) [NoExprOptionalListClass]
                                      ) [ExprFirstOptionClassWithMinus]
                                    ) [NormalExpressionClass]
                                  ) [ClassOneClass]
                                ) [FactorOptionalSecondClass]
                              ) [NewFactorClass]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                    ) [DesignatorStatementOptionsClassAssignExpression]
                  ) [Assignment]
                ) [Statements]
                Assignment(
                  DesignatorStatementOptionsClassAssignExpression(
                    Designator(
                      DesigIdent(
                       index
                      ) [DesigIdent]
                      NoOptionalDesignatorClass(
                      ) [NoOptionalDesignatorClass]
                    ) [Designator]
                    AssignOpClass(
                      AssignOperationClass(
                      ) [AssignOperationClass]
                    ) [AssignOpClass]
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             0
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                  ) [DesignatorStatementOptionsClassAssignExpression]
                ) [Assignment]
              ) [Statements]
              DoWhileStatement(
                DoClass(
                ) [DoClass]
                StatementStatement(
                  Statements(
                    Statements(
                      NoStmt(
                      ) [NoStmt]
                      Assignment(
                        DesignatorStatementOptionsClassAssignExpression(
                          Designator(
                            DesigIdent(
                             buffer
                            ) [DesigIdent]
                            OptionalDesignatorArray(
                              HelperClass(
                              ) [HelperClass]
                              LSquareClass(
                              ) [LSquareClass]
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           index
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [OptionalDesignatorArray]
                          ) [Designator]
                          AssignOpClass(
                            AssignOperationClass(
                            ) [AssignOperationClass]
                          ) [AssignOpClass]
                          ClassOneClass(
                            NormalExpressionClass(
                              ExprFirstOptionClassWithMinus(
                                TermClass(
                                  FactorOptionalParams(
                                    Designator(
                                      DesigIdent(
                                       num_plus_ten
                                      ) [DesigIdent]
                                      NoOptionalDesignatorClass(
                                      ) [NoOptionalDesignatorClass]
                                    ) [Designator]
                                    Actuals(
                                      ActualParam(
                                        ClassOneClass(
                                          NormalExpressionClass(
                                            ExprFirstOptionClassWithMinus(
                                              TermClass(
                                                DesignatorClass(
                                                  Designator(
                                                    DesigIdent(
                                                     index
                                                    ) [DesigIdent]
                                                    NoOptionalDesignatorClass(
                                                    ) [NoOptionalDesignatorClass]
                                                  ) [Designator]
                                                ) [DesignatorClass]
                                                NoTermOptionalListClass(
                                                ) [NoTermOptionalListClass]
                                              ) [TermClass]
                                              NoExprOptionalListClass(
                                              ) [NoExprOptionalListClass]
                                            ) [ExprFirstOptionClassWithMinus]
                                          ) [NormalExpressionClass]
                                        ) [ClassOneClass]
                                      ) [ActualParam]
                                    ) [Actuals]
                                  ) [FactorOptionalParams]
                                  NoTermOptionalListClass(
                                  ) [NoTermOptionalListClass]
                                ) [TermClass]
                                NoExprOptionalListClass(
                                ) [NoExprOptionalListClass]
                              ) [ExprFirstOptionClassWithMinus]
                            ) [NormalExpressionClass]
                          ) [ClassOneClass]
                        ) [DesignatorStatementOptionsClassAssignExpression]
                      ) [Assignment]
                    ) [Statements]
                    Assignment(
                      DesignatorStatementPlusPlus(
                        Designator(
                          DesigIdent(
                           index
                          ) [DesigIdent]
                          NoOptionalDesignatorClass(
                          ) [NoOptionalDesignatorClass]
                        ) [Designator]
                      ) [DesignatorStatementPlusPlus]
                    ) [Assignment]
                  ) [Statements]
                ) [StatementStatement]
                LParenClass(
                ) [LParenClass]
                ConditionClass(
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 index
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      CondFactOptionalClass(
                        LessOperationClass(
                        ) [LessOperationClass]
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              FactorOptionalParams(
                                Designator(
                                  DesigIdent(
                                   give_me_length_of_array
                                  ) [DesigIdent]
                                  NoOptionalDesignatorClass(
                                  ) [NoOptionalDesignatorClass]
                                ) [Designator]
                                Actuals(
                                  ActualParam(
                                    ClassOneClass(
                                      NormalExpressionClass(
                                        ExprFirstOptionClassWithMinus(
                                          TermClass(
                                            DesignatorClass(
                                              Designator(
                                                DesigIdent(
                                                 buffer
                                                ) [DesigIdent]
                                                NoOptionalDesignatorClass(
                                                ) [NoOptionalDesignatorClass]
                                              ) [Designator]
                                            ) [DesignatorClass]
                                            NoTermOptionalListClass(
                                            ) [NoTermOptionalListClass]
                                          ) [TermClass]
                                          NoExprOptionalListClass(
                                          ) [NoExprOptionalListClass]
                                        ) [ExprFirstOptionClassWithMinus]
                                      ) [NormalExpressionClass]
                                    ) [ClassOneClass]
                                  ) [ActualParam]
                                ) [Actuals]
                              ) [FactorOptionalParams]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [CondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                ) [ConditionClass]
                RParenClass(
                ) [RParenClass]
              ) [DoWhileStatement]
            ) [Statements]
            Assignment(
              DesignatorStatementOptionsClassAssignExpression(
                Designator(
                  DesigIdent(
                   sum
                  ) [DesigIdent]
                  NoOptionalDesignatorClass(
                  ) [NoOptionalDesignatorClass]
                ) [Designator]
                AssignOpClass(
                  AssignOperationClass(
                  ) [AssignOperationClass]
                ) [AssignOpClass]
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        FactorOptionalParams(
                          Designator(
                            DesigIdent(
                             sum_all_elements_of_array
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                          Actuals(
                            ActualParam(
                              ClassOneClass(
                                NormalExpressionClass(
                                  ExprFirstOptionClassWithMinus(
                                    TermClass(
                                      DesignatorClass(
                                        Designator(
                                          DesigIdent(
                                           buffer
                                          ) [DesigIdent]
                                          NoOptionalDesignatorClass(
                                          ) [NoOptionalDesignatorClass]
                                        ) [Designator]
                                      ) [DesignatorClass]
                                      NoTermOptionalListClass(
                                      ) [NoTermOptionalListClass]
                                    ) [TermClass]
                                    NoExprOptionalListClass(
                                    ) [NoExprOptionalListClass]
                                  ) [ExprFirstOptionClassWithMinus]
                                ) [NormalExpressionClass]
                              ) [ClassOneClass]
                            ) [ActualParam]
                          ) [Actuals]
                        ) [FactorOptionalParams]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
              ) [DesignatorStatementOptionsClassAssignExpression]
            ) [Assignment]
          ) [Statements]
          PrintStmt(
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         sum
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
            NoCommaNumberClass(
            ) [NoCommaNumberClass]
          ) [PrintStmt]
        ) [Statements]
        ReturnNoExpr(
        ) [ReturnNoExpr]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  02:06:34,868 - ===================================
INFO  02:06:34,872 - PROGRAM NAME DETECTED => p ON LINE 1
INFO  02:06:34,872 - ARRAY VARIABLE buffer IS BEING DEFINED! ON LINE 3
INFO  02:06:34,872 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 3
INFO  02:06:34,872 - FUNCTION give_me_length_of_array WITH RETURN VALUE OF TYPE int ON LINE 7
INFO  02:06:34,872 - FORMAL ARRAY PARAMETER array DEFINED AND IT IS OF TYPE int ON LINE 7
INFO  02:06:34,872 - METHOD BODY STARTING!
INFO  02:06:34,873 - CURRENT VARIABLE IN USE IS len AND IT IS OF TYPE int
INFO  02:06:34,873 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  02:06:34,873 - WE ARE USING A VARIABLE OF TYPE array ON LINE 9
INFO  02:06:34,874 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:06:34,874 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:06:34,874 - TYPE -> array <- AND -> array <- ON LINE 9
INFO  02:06:34,874 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:06:34,874 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:06:34,874 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  02:06:34,874 - METHOD BODY ENDING!
INFO  02:06:34,874 - END OF DEFINING FUNCTION give_me_length_of_array
INFO  02:06:34,875 - FUNCTION num_plus_ten WITH RETURN VALUE OF TYPE int ON LINE 12
INFO  02:06:34,875 - FORMAL PARAMETER num DEFINED AND IT IS OF TYPE int ON LINE 12
INFO  02:06:34,875 - METHOD BODY STARTING!
INFO  02:06:34,875 - CURRENT VARIABLE IN USE IS num AND IT IS OF TYPE int
INFO  02:06:34,875 - WE ARE USING A VARIABLE OF TYPE int ON LINE 13
INFO  02:06:34,875 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  02:06:34,875 - CONST NUMBER 10 ON LINE 13
INFO  02:06:34,875 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 13
INFO  02:06:34,875 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:06:34,875 - USING INTEGERS IN TERM! ON LINE 13
INFO  02:06:34,875 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 13
INFO  02:06:34,875 - METHOD BODY ENDING!
INFO  02:06:34,875 - END OF DEFINING FUNCTION num_plus_ten
INFO  02:06:34,875 - FUNCTION sum_all_elements_of_array WITH RETURN VALUE OF TYPE int ON LINE 16
INFO  02:06:34,875 - FORMAL ARRAY PARAMETER array DEFINED AND IT IS OF TYPE int ON LINE 16
INFO  02:06:34,875 - VARIABLE sum IS BEING DEFINED! ON LINE 17
INFO  02:06:34,875 - VARIABLE i IS BEING DEFINED! ON LINE 17
INFO  02:06:34,875 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 17
INFO  02:06:34,875 - METHOD BODY STARTING!
INFO  02:06:34,875 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  02:06:34,876 - BEGINNING OF AN ASSIGNEMENT! ON LINE 19
INFO  02:06:34,876 - CONST NUMBER 0 ON LINE 19
INFO  02:06:34,876 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  02:06:34,876 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 19
INFO  02:06:34,876 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 19
INFO  02:06:34,876 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  02:06:34,876 - BEGINNING OF AN ASSIGNEMENT! ON LINE 20
INFO  02:06:34,876 - CONST NUMBER 0 ON LINE 20
INFO  02:06:34,876 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  02:06:34,876 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 20
INFO  02:06:34,876 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 20
INFO  02:06:34,876 - BEGINNING OF A DO...WHILE LOOP!
INFO  02:06:34,876 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  02:06:34,876 - BEGINNING OF AN ASSIGNEMENT! ON LINE 22
INFO  02:06:34,876 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  02:06:34,876 - WE ARE USING A VARIABLE OF TYPE int ON LINE 22
INFO  02:06:34,876 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  02:06:34,877 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  02:06:34,877 - WE ARE USING A VARIABLE OF TYPE int ON LINE 22
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  02:06:34,877 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  02:06:34,877 - WE ARE USING AN ARRAY OF TYPE int ON LINE 22
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 22
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  02:06:34,877 - USING INTEGERS IN TERM! ON LINE 22
INFO  02:06:34,877 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 22
INFO  02:06:34,877 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  02:06:34,877 - USING ++ ON i ON LINE 23
INFO  02:06:34,877 - CURRENT VARIABLE IN USE IS i AND IT IS OF TYPE int
INFO  02:06:34,877 - WE ARE USING A VARIABLE OF TYPE int ON LINE 25
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  02:06:34,877 - CURRENT VARIABLE IN USE IS give_me_length_of_array AND IT IS OF TYPE int
INFO  02:06:34,877 - CURRENT VARIABLE IN USE IS array AND IT IS OF TYPE array
INFO  02:06:34,877 - WE ARE USING A VARIABLE OF TYPE array ON LINE 25
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  02:06:34,877 - TYPE -> array <- AND -> array <- ON LINE 25
INFO  02:06:34,877 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  02:06:34,878 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 25
INFO  02:06:34,878 - USING TWO EXPRESSIONS OF TYPE int ON LINE 25
INFO  02:06:34,878 - ENDING OF A DO...WHILE LOOP! ON LINE 21
INFO  02:06:34,878 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  02:06:34,878 - WE ARE USING A VARIABLE OF TYPE int ON LINE 27
INFO  02:06:34,878 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  02:06:34,878 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 27
INFO  02:06:34,878 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 27
INFO  02:06:34,878 - METHOD BODY ENDING!
INFO  02:06:34,878 - END OF DEFINING FUNCTION sum_all_elements_of_array
INFO  02:06:34,878 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 31
INFO  02:06:34,878 - VARIABLE index IS BEING DEFINED! ON LINE 32
INFO  02:06:34,878 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 32
INFO  02:06:34,878 - VARIABLE sum IS BEING DEFINED! ON LINE 33
INFO  02:06:34,878 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 33
INFO  02:06:34,878 - METHOD BODY STARTING!
INFO  02:06:34,879 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  02:06:34,879 - BEGINNING OF AN ASSIGNEMENT! ON LINE 36
INFO  02:06:34,879 - CONST NUMBER 10 ON LINE 36
INFO  02:06:34,879 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  02:06:34,879 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  02:06:34,879 - USAGE OF KEYWORD NEW! ON LINE 36
INFO  02:06:34,879 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  02:06:34,879 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 36
INFO  02:06:34,879 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 36
INFO  02:06:34,879 - CURRENT VARIABLE IN USE IS index AND IT IS OF TYPE int
INFO  02:06:34,879 - BEGINNING OF AN ASSIGNEMENT! ON LINE 38
INFO  02:06:34,879 - CONST NUMBER 0 ON LINE 38
INFO  02:06:34,879 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  02:06:34,879 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 38
INFO  02:06:34,879 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 38
INFO  02:06:34,880 - BEGINNING OF A DO...WHILE LOOP!
INFO  02:06:34,880 - CURRENT VARIABLE IN USE IS index AND IT IS OF TYPE int
INFO  02:06:34,880 - WE ARE USING A VARIABLE OF TYPE int ON LINE 40
INFO  02:06:34,880 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  02:06:34,880 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  02:06:34,880 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  02:06:34,880 - BEGINNING OF AN ASSIGNEMENT! ON LINE 40
INFO  02:06:34,880 - CURRENT VARIABLE IN USE IS num_plus_ten AND IT IS OF TYPE int
INFO  02:06:34,880 - CURRENT VARIABLE IN USE IS index AND IT IS OF TYPE int
INFO  02:06:34,880 - WE ARE USING A VARIABLE OF TYPE int ON LINE 40
INFO  02:06:34,880 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  02:06:34,880 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  02:06:34,880 - TYPE -> int <- AND -> int <- ON LINE 40
INFO  02:06:34,880 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  02:06:34,880 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 40
INFO  02:06:34,880 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 40
INFO  02:06:34,880 - CURRENT VARIABLE IN USE IS index AND IT IS OF TYPE int
INFO  02:06:34,880 - USING ++ ON index ON LINE 41
INFO  02:06:34,881 - CURRENT VARIABLE IN USE IS index AND IT IS OF TYPE int
INFO  02:06:34,881 - WE ARE USING A VARIABLE OF TYPE int ON LINE 43
INFO  02:06:34,881 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  02:06:34,881 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  02:06:34,881 - CURRENT VARIABLE IN USE IS give_me_length_of_array AND IT IS OF TYPE int
INFO  02:06:34,881 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  02:06:34,881 - WE ARE USING A VARIABLE OF TYPE array ON LINE 43
INFO  02:06:34,881 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  02:06:34,881 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  02:06:34,881 - TYPE -> array <- AND -> array <- ON LINE 43
INFO  02:06:34,881 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  02:06:34,881 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 43
INFO  02:06:34,881 - USING TWO EXPRESSIONS OF TYPE int ON LINE 43
INFO  02:06:34,881 - ENDING OF A DO...WHILE LOOP! ON LINE 39
INFO  02:06:34,881 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  02:06:34,881 - BEGINNING OF AN ASSIGNEMENT! ON LINE 45
INFO  02:06:34,882 - CURRENT VARIABLE IN USE IS sum_all_elements_of_array AND IT IS OF TYPE int
INFO  02:06:34,882 - CURRENT VARIABLE IN USE IS buffer AND IT IS OF TYPE array
INFO  02:06:34,882 - WE ARE USING A VARIABLE OF TYPE array ON LINE 45
INFO  02:06:34,882 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  02:06:34,882 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  02:06:34,882 - TYPE -> array <- AND -> array <- ON LINE 45
INFO  02:06:34,882 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  02:06:34,882 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 45
INFO  02:06:34,882 - SUCCESSFUL ASSIGNEMENT! TYPES: int AND int ! ON LINE 45
INFO  02:06:34,882 - CURRENT VARIABLE IN USE IS sum AND IT IS OF TYPE int
INFO  02:06:34,882 - WE ARE USING A VARIABLE OF TYPE int ON LINE 47
INFO  02:06:34,882 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  02:06:34,882 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 47
INFO  02:06:34,882 - PRINT FUNCTION CALL IN USE! ON LINE 47
INFO  02:06:34,882 - return; AND THE FUNCTION IS VOID!
INFO  02:06:34,882 - METHOD BODY ENDING!
INFO  02:06:34,882 - END OF DEFINING FUNCTION main
INFO  02:06:34,882 - PROGRAM ENDED => p ON LINE 1
INFO  02:06:34,882 -  Deklarisanih promenljivih ima = 5
INFO  02:06:34,882 - ===================================
