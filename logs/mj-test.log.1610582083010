INFO  00:53:46,198 - Compiling source file: C:\Users\38164\OneDrive\Desktop\Izvorni kod plz\MJCompiler\test\program.mj
INFO  00:53:46,280 - #2 program
INFO  00:53:46,280 - #43 MJProgram
INFO  00:53:46,280 - #43 int
INFO  00:53:46,282 - #43 a
INFO  00:53:46,283 - #31 ,
INFO  00:53:46,283 - #43 b
INFO  00:53:46,283 - #31 ,
INFO  00:53:46,283 - #43 c
INFO  00:53:46,283 - #31 ,
INFO  00:53:46,283 - #43 d
INFO  00:53:46,284 - #33 ;
INFO  00:53:46,284 - #9 const
INFO  00:53:46,284 - #43 int
INFO  00:53:46,284 - #43 term
INFO  00:53:46,284 - #19 =
INFO  00:53:46,285 - #42 0
INFO  00:53:46,285 - #33 ;
INFO  00:53:46,285 - #9 const
INFO  00:53:46,285 - #43 int
INFO  00:53:46,285 - #43 y
INFO  00:53:46,286 - #19 =
INFO  00:53:46,286 - #42 3
INFO  00:53:46,286 - #33 ;
INFO  00:53:46,286 - #35 {
INFO  00:53:46,286 - #43 int
INFO  00:53:46,287 - #43 k
INFO  00:53:46,287 - #37 (
INFO  00:53:46,287 - #43 int
INFO  00:53:46,287 - #43 a
INFO  00:53:46,287 - #31 ,
INFO  00:53:46,287 - #43 int
INFO  00:53:46,288 - #43 b
INFO  00:53:46,288 - #38 )
INFO  00:53:46,288 - #35 {
INFO  00:53:46,289 - #41 return
INFO  00:53:46,293 - #43 b
INFO  00:53:46,298 - #33 ;
INFO  00:53:46,303 - #36 }
INFO  00:53:46,303 - #5 void
INFO  00:53:46,309 - #43 main
INFO  00:53:46,309 - #37 (
INFO  00:53:46,309 - #38 )
INFO  00:53:46,310 - #43 int
INFO  00:53:46,310 - #43 x
INFO  00:53:46,310 - #33 ;
INFO  00:53:46,310 - #43 bool
INFO  00:53:46,310 - #43 p
INFO  00:53:46,310 - #33 ;
INFO  00:53:46,310 - #35 {
INFO  00:53:46,311 - #43 p
INFO  00:53:46,311 - #19 =
INFO  00:53:46,311 - #45 true
INFO  00:53:46,312 - #33 ;
INFO  00:53:46,312 - #14 if
INFO  00:53:46,312 - #37 (
INFO  00:53:46,312 - #43 p
INFO  00:53:46,313 - #38 )
INFO  00:53:46,315 - #35 {
INFO  00:53:46,315 - #18 print
INFO  00:53:46,315 - #37 (
INFO  00:53:46,315 - #42 100
INFO  00:53:46,315 - #38 )
INFO  00:53:46,316 - #33 ;
INFO  00:53:46,316 - #36 }
INFO  00:53:46,316 - #15 else
INFO  00:53:46,321 - #14 if
INFO  00:53:46,321 - #37 (
INFO  00:53:46,321 - #43 p
INFO  00:53:46,321 - #38 )
INFO  00:53:46,321 - #35 {
INFO  00:53:46,321 - #18 print
INFO  00:53:46,321 - #37 (
INFO  00:53:46,321 - #42 200
INFO  00:53:46,321 - #38 )
INFO  00:53:46,321 - #33 ;
INFO  00:53:46,321 - #36 }
INFO  00:53:46,321 - #15 else
INFO  00:53:46,321 - #35 {
INFO  00:53:46,322 - #18 print
INFO  00:53:46,322 - #37 (
INFO  00:53:46,322 - #42 300
INFO  00:53:46,322 - #38 )
INFO  00:53:46,322 - #33 ;
INFO  00:53:46,322 - #36 }
INFO  00:53:46,322 - #36 }
INFO  00:53:46,323 - #36 }
INFO  00:53:46,330 - Program(
  ProgramName(
   MJProgram
  ) [ProgramName]
  GroupDeclarations(
    GroupDeclarations(
      GroupDeclarations(
        NoGroupDecl(
        ) [NoGroupDecl]
        GroupDeclarationVars(
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListClass(
              VarListClass(
                VarListClass(
                  VarListSingle(
                    VarClassNoArray(
                     a
                    ) [VarClassNoArray]
                  ) [VarListSingle]
                  VarClassNoArray(
                   b
                  ) [VarClassNoArray]
                ) [VarListClass]
                VarClassNoArray(
                 c
                ) [VarClassNoArray]
              ) [VarListClass]
              VarClassNoArray(
               d
              ) [VarClassNoArray]
            ) [VarListClass]
          ) [VarDeclClass]
        ) [GroupDeclarationVars]
      ) [GroupDeclarations]
      GroupDeclarationsConsts(
        ConstDeclClass(
          Type(
           int
          ) [Type]
          ConstListSingle(
            ConstListNoArray(
             term
              ValuesNumber(
               0
              ) [ValuesNumber]
            ) [ConstListNoArray]
          ) [ConstListSingle]
        ) [ConstDeclClass]
      ) [GroupDeclarationsConsts]
    ) [GroupDeclarations]
    GroupDeclarationsConsts(
      ConstDeclClass(
        Type(
         int
        ) [Type]
        ConstListSingle(
          ConstListNoArray(
           y
            ValuesNumber(
             3
            ) [ValuesNumber]
          ) [ConstListNoArray]
        ) [ConstListSingle]
      ) [ConstDeclClass]
    ) [GroupDeclarationsConsts]
  ) [GroupDeclarations]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        ReturnValueClassNoVoid(
          Type(
           int
          ) [Type]
         k
        ) [ReturnValueClassNoVoid]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclClassNoArray(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDeclClassNoArray]
            ) [SingleFormalParamDecl]
            FormalParamDeclClassNoArray(
              Type(
               int
              ) [Type]
             b
            ) [FormalParamDeclClassNoArray]
          ) [FormalParamDecls]
        ) [FormParams]
        NoVarDeclList(
        ) [NoVarDeclList]
        LBraceClass(
        ) [LBraceClass]
        Statements(
          NoStmt(
          ) [NoStmt]
          ReturnExpr(
            ReturnNonTerminalClass(
            ) [ReturnNonTerminalClass]
            ClassOneClass(
              NormalExpressionClass(
                ExprFirstOptionClassWithMinus(
                  TermClass(
                    DesignatorClass(
                      Designator(
                        DesigIdent(
                         b
                        ) [DesigIdent]
                        NoOptionalDesignatorClass(
                        ) [NoOptionalDesignatorClass]
                      ) [Designator]
                    ) [DesignatorClass]
                    NoTermOptionalListClass(
                    ) [NoTermOptionalListClass]
                  ) [TermClass]
                  NoExprOptionalListClass(
                  ) [NoExprOptionalListClass]
                ) [ExprFirstOptionClassWithMinus]
              ) [NormalExpressionClass]
            ) [ClassOneClass]
          ) [ReturnExpr]
        ) [Statements]
        RBraceClass(
        ) [RBraceClass]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      ReturnValueClassVoid(
       main
      ) [ReturnValueClassVoid]
      NoFormParam(
      ) [NoFormParam]
      VarDeclListClass(
        VarDeclListClass(
          NoVarDeclList(
          ) [NoVarDeclList]
          VarDeclClass(
            Type(
             int
            ) [Type]
            VarListSingle(
              VarClassNoArray(
               x
              ) [VarClassNoArray]
            ) [VarListSingle]
          ) [VarDeclClass]
        ) [VarDeclListClass]
        VarDeclClass(
          Type(
           bool
          ) [Type]
          VarListSingle(
            VarClassNoArray(
             p
            ) [VarClassNoArray]
          ) [VarListSingle]
        ) [VarDeclClass]
      ) [VarDeclListClass]
      LBraceClass(
      ) [LBraceClass]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          Assignment(
            DesignatorStatementOptionsClassAssignExpression(
              Designator(
                DesigIdent(
                 p
                ) [DesigIdent]
                NoOptionalDesignatorClass(
                ) [NoOptionalDesignatorClass]
              ) [Designator]
              AssignOpClass(
                AssignOperationClass(
                ) [AssignOperationClass]
              ) [AssignOpClass]
              ClassOneClass(
                NormalExpressionClass(
                  ExprFirstOptionClassWithMinus(
                    TermClass(
                      BooleanClassConstFactor(
                       true
                      ) [BooleanClassConstFactor]
                      NoTermOptionalListClass(
                      ) [NoTermOptionalListClass]
                    ) [TermClass]
                    NoExprOptionalListClass(
                    ) [NoExprOptionalListClass]
                  ) [ExprFirstOptionClassWithMinus]
                ) [NormalExpressionClass]
              ) [ClassOneClass]
            ) [DesignatorStatementOptionsClassAssignExpression]
          ) [Assignment]
        ) [Statements]
        IfStatement(
          IfConditionNoError(
            ConditionClass(
              CondTermClass(
                CondFactClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        DesignatorClass(
                          Designator(
                            DesigIdent(
                             p
                            ) [DesigIdent]
                            NoOptionalDesignatorClass(
                            ) [NoOptionalDesignatorClass]
                          ) [Designator]
                        ) [DesignatorClass]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                  NoCondFactOptionalClass(
                  ) [NoCondFactOptionalClass]
                ) [CondFactClass]
                NoCondTermOptionalClass(
                ) [NoCondTermOptionalClass]
              ) [CondTermClass]
              NoConditionOptionalClass(
              ) [NoConditionOptionalClass]
            ) [ConditionClass]
          ) [IfConditionNoError]
          StatementStatement(
            Statements(
              NoStmt(
              ) [NoStmt]
              PrintStmt(
                ClassOneClass(
                  NormalExpressionClass(
                    ExprFirstOptionClassWithMinus(
                      TermClass(
                        NumberConst(
                         100
                        ) [NumberConst]
                        NoTermOptionalListClass(
                        ) [NoTermOptionalListClass]
                      ) [TermClass]
                      NoExprOptionalListClass(
                      ) [NoExprOptionalListClass]
                    ) [ExprFirstOptionClassWithMinus]
                  ) [NormalExpressionClass]
                ) [ClassOneClass]
                NoCommaNumberClass(
                ) [NoCommaNumberClass]
              ) [PrintStmt]
            ) [Statements]
          ) [StatementStatement]
          Empty(
          ) [Empty]
          YesOptionalStatement(
            IfStatement(
              IfConditionNoError(
                ConditionClass(
                  CondTermClass(
                    CondFactClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            DesignatorClass(
                              Designator(
                                DesigIdent(
                                 p
                                ) [DesigIdent]
                                NoOptionalDesignatorClass(
                                ) [NoOptionalDesignatorClass]
                              ) [Designator]
                            ) [DesignatorClass]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                      NoCondFactOptionalClass(
                      ) [NoCondFactOptionalClass]
                    ) [CondFactClass]
                    NoCondTermOptionalClass(
                    ) [NoCondTermOptionalClass]
                  ) [CondTermClass]
                  NoConditionOptionalClass(
                  ) [NoConditionOptionalClass]
                ) [ConditionClass]
              ) [IfConditionNoError]
              StatementStatement(
                Statements(
                  NoStmt(
                  ) [NoStmt]
                  PrintStmt(
                    ClassOneClass(
                      NormalExpressionClass(
                        ExprFirstOptionClassWithMinus(
                          TermClass(
                            NumberConst(
                             200
                            ) [NumberConst]
                            NoTermOptionalListClass(
                            ) [NoTermOptionalListClass]
                          ) [TermClass]
                          NoExprOptionalListClass(
                          ) [NoExprOptionalListClass]
                        ) [ExprFirstOptionClassWithMinus]
                      ) [NormalExpressionClass]
                    ) [ClassOneClass]
                    NoCommaNumberClass(
                    ) [NoCommaNumberClass]
                  ) [PrintStmt]
                ) [Statements]
              ) [StatementStatement]
              Empty(
              ) [Empty]
              YesOptionalStatement(
                StatementStatement(
                  Statements(
                    NoStmt(
                    ) [NoStmt]
                    PrintStmt(
                      ClassOneClass(
                        NormalExpressionClass(
                          ExprFirstOptionClassWithMinus(
                            TermClass(
                              NumberConst(
                               300
                              ) [NumberConst]
                              NoTermOptionalListClass(
                              ) [NoTermOptionalListClass]
                            ) [TermClass]
                            NoExprOptionalListClass(
                            ) [NoExprOptionalListClass]
                          ) [ExprFirstOptionClassWithMinus]
                        ) [NormalExpressionClass]
                      ) [ClassOneClass]
                      NoCommaNumberClass(
                      ) [NoCommaNumberClass]
                    ) [PrintStmt]
                  ) [Statements]
                ) [StatementStatement]
              ) [YesOptionalStatement]
            ) [IfStatement]
          ) [YesOptionalStatement]
        ) [IfStatement]
      ) [Statements]
      RBraceClass(
      ) [RBraceClass]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  00:53:46,330 - ===================================
INFO  00:53:46,336 - PROGRAM NAME DETECTED => MJProgram ON LINE 1
INFO  00:53:46,336 - VARIABLE a IS BEING DEFINED! ON LINE 2
INFO  00:53:46,337 - VARIABLE b IS BEING DEFINED! ON LINE 2
INFO  00:53:46,337 - VARIABLE c IS BEING DEFINED! ON LINE 2
INFO  00:53:46,337 - VARIABLE d IS BEING DEFINED! ON LINE 2
INFO  00:53:46,337 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 2
INFO  00:53:46,337 - CONST VALUE 0 IS BEING USED! ON LINE 4
INFO  00:53:46,337 - CONST VARIABLE term IS BEING DEFINED! ON LINE 4
INFO  00:53:46,337 - CONST VALUE 3 IS BEING USED! ON LINE 5
INFO  00:53:46,337 - CONST VARIABLE y IS BEING DEFINED! ON LINE 5
INFO  00:53:46,337 - FUNCTION k WITH RETURN VALUE OF TYPE int ON LINE 9
INFO  00:53:46,337 - FORMAL PARAMETER a DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  00:53:46,337 - FORMAL PARAMETER b DEFINED AND IT IS OF TYPE int ON LINE 9
INFO  00:53:46,337 - METHOD BODY STARTING!
INFO  00:53:46,337 - CURRENT VARIABLE IN USE IS b AND IT IS OF TYPE int
INFO  00:53:46,337 - WE ARE USING A VARIABLE OF TYPE int ON LINE 9
INFO  00:53:46,337 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  00:53:46,338 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 9
INFO  00:53:46,338 - SUCCESSFUL RETURN! TYPES: int AND int ! ON LINE 9
INFO  00:53:46,338 - METHOD BODY ENDING!
INFO  00:53:46,338 - END OF DEFINING FUNCTION k
INFO  00:53:46,338 - FUNCTION main WITH VOID AS RETURN VALUE!  ON LINE 23
INFO  00:53:46,338 - VARIABLE x IS BEING DEFINED! ON LINE 24
INFO  00:53:46,338 - VARIABLES OF TYPE int HAVE BEEN DEFINED! ON LINE 24
INFO  00:53:46,338 - VARIABLE p IS BEING DEFINED! ON LINE 26
INFO  00:53:46,338 - VARIABLES OF TYPE bool HAVE BEEN DEFINED! ON LINE 26
INFO  00:53:46,338 - METHOD BODY STARTING!
INFO  00:53:46,338 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  00:53:46,338 - BEGINNING OF AN ASSIGNEMENT! ON LINE 62
INFO  00:53:46,338 - CONST CHAR true ON LINE 62
INFO  00:53:46,338 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 62
INFO  00:53:46,339 - SUCCESSFUL ASSIGNEMENT! TYPES: boolean AND boolean ! ON LINE 62
INFO  00:53:46,339 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  00:53:46,339 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 64
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 64
INFO  00:53:46,339 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 64
INFO  00:53:46,339 - CONST NUMBER 100 ON LINE 65
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 65
INFO  00:53:46,339 - PRINT FUNCTION CALL IN USE! ON LINE 65
INFO  00:53:46,339 - CURRENT VARIABLE IN USE IS p AND IT IS OF TYPE boolean
INFO  00:53:46,339 - WE ARE USING A VARIABLE OF TYPE boolean ON LINE 67
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 67
INFO  00:53:46,339 - USING ONLY ONE BOOLEAN IN TERM! ON LINE 67
INFO  00:53:46,339 - CONST NUMBER 200 ON LINE 68
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  00:53:46,339 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 68
INFO  00:53:46,340 - PRINT FUNCTION CALL IN USE! ON LINE 68
INFO  00:53:46,340 - CONST NUMBER 300 ON LINE 70
INFO  00:53:46,340 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  00:53:46,340 - USING ONLY ONE EXPRESSION IN TERM! ON LINE 70
INFO  00:53:46,340 - PRINT FUNCTION CALL IN USE! ON LINE 70
INFO  00:53:46,340 - METHOD BODY ENDING!
INFO  00:53:46,340 - END OF DEFINING FUNCTION main
INFO  00:53:46,340 - PROGRAM ENDED => MJProgram ON LINE 1
INFO  00:53:46,340 -  Deklarisanih promenljivih ima = 6
INFO  00:53:46,340 - ===================================
INFO  00:53:46,344 - Parsiranje uspesno zavrseno!
