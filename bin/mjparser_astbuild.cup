

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal CHAR, BOOLEAN, BREAK, CLASS, ENUM, CONST, SWITCH, DO, WHILE, NEW,
		READ, EXTENDS, CONTINUE, CASE, MINUS, MUL, DIV, MOD, EQUAL_COMPARATION, 
		NOT_EQUAL_COMPARATION, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL,
		AND, OR, PLUS_PLUS, MINUS_MINUS, DOT, TERNARY, COLON, EQUAL;

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, RETURN, PLUS, COMMA, PRINT, VOID, LSQUARE_BRACKET, RSQUARE_BRACKET;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;

nonterminal Program Program;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal Type Type;
nonterminal MethodsOption MethodsOption;
nonterminal ExtendsOption ExtendsOption;
nonterminal MethodDecl MethodDecl;
nonterminal VarList VarList;
nonterminal Variable Variable;
nonterminal 
			GroupDeclList GroupDeclList;
nonterminal GroupDecl GroupDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstList ConstList;
nonterminal ConstVariable ConstVariable;
nonterminal ValueOptions ValueOptions;
nonterminal ReturnValue ReturnValue;
			
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Addop Addop;
nonterminal Factor Factor;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;

Program ::= (Program) PROG IDENT:I1 GroupDeclList:G2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(I1, G2, M3); RESULT.setLine(I1left); :};

GroupDeclList ::= (GroupDeclarations) GroupDeclList:G1 GroupDecl:G2 {: RESULT=new GroupDeclarations(G1, G2); RESULT.setLine(G1left); :}
			  |
			  (NoGroupDecl) {: RESULT=new NoGroupDecl(); :} /* epsilon */
			  ;
			  
GroupDecl ::= (GroupDeclarationVars) VarDecl:V1 {: RESULT=new GroupDeclarationVars(V1); RESULT.setLine(V1left); :}
			  |
			  (GroupDeclarationClasses) ClassDecl:C1 {: RESULT=new GroupDeclarationClasses(C1); RESULT.setLine(C1left); :}
			  |
			  (GroupDeclarationsConsts) ConstDecl:C1 {: RESULT=new GroupDeclarationsConsts(C1); RESULT.setLine(C1left); :}
			  ;

ClassDecl ::= (ClassDeclClass) CLASS IDENT:className ExtendsOption:E1 LBRACE VarDeclList:V2 MethodsOption:M3 RBRACE {: RESULT=new ClassDeclClass(className, E1, V2, M3); RESULT.setLine(classNameleft); :};

ExtendsOption ::= (ExtendsClassName) EXTENDS Type:extendsClassType {: RESULT=new ExtendsClassName(extendsClassType); RESULT.setLine(extendsClassTypeleft); :}
				|
				(NoExtendsOption) {: RESULT=new NoExtendsOption(); :} /* epsilon */
				;

MethodsOption ::= (MethodsClassName) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new MethodsClassName(M1); RESULT.setLine(M1left); :}
				|
				(NoMethodsOption) {: RESULT=new NoMethodsOption(); :} /* epsilon */ 
				;
				

ConstDecl ::= (ConstDeclClass) CONST Type:constVarType ConstList:C1 SEMI {: RESULT=new ConstDeclClass(constVarType, C1); RESULT.setLine(constVarTypeleft); :};

ConstList ::= (ConstListClass) ConstList:C1 COMMA ConstVariable:C2 {: RESULT=new ConstListClass(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (ConstListSingle) ConstVariable:C1 {: RESULT=new ConstListSingle(C1); RESULT.setLine(C1left); :}
			  ;

ConstVariable ::= (ConstListNoArray) IDENT:constVarName EQUAL ValueOptions:V1 {: RESULT=new ConstListNoArray(constVarName, V1); RESULT.setLine(constVarNameleft); :};

ValueOptions ::= (ValuesNumber) NUMBER:N1 {: RESULT=new ValuesNumber(N1); RESULT.setLine(N1left); :}
				 |
 				 (ValuesBoolean) BOOLEAN {: RESULT=new ValuesBoolean(); :}
 				 |
 				 (ValuesChar) CHAR {: RESULT=new ValuesChar(); :}
 				 ;

VarDeclList ::= (VarDeclListClass) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListClass(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
				;

VarDecl ::= (VarDeclClass) Type:varType VarList:V1 SEMI {: RESULT=new VarDeclClass(varType, V1); RESULT.setLine(varTypeleft); :};

VarList ::= (VarListClass) VarList:V1 COMMA Variable:V2 {: RESULT=new VarListClass(V1, V2); RESULT.setLine(V1left); :}
			|
			(VarListSingle) Variable:V1 {: RESULT=new VarListSingle(V1); RESULT.setLine(V1left); :}
			;
				
Variable ::= (VarClassNoArray) IDENT:varName {: RESULT=new VarClassNoArray(varName); RESULT.setLine(varNameleft); :}
		|
		(VarClassArray) IDENT:varName LSQUARE_BRACKET RSQUARE_BRACKET {: RESULT=new VarClassArray(varName); RESULT.setLine(varNameleft); :}
		;
		
						
			













Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) ReturnValue:R1 IDENT:methName LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(R1, methName, F2, V3, S4); RESULT.setLine(R1left); :};

ReturnValue ::= (ReturnValueClassNoVoid) Type:retType {: RESULT=new ReturnValueClassNoVoid(retType); RESULT.setLine(retTypeleft); :}
				|
				(ReturnValueClassVoid) VOID {: RESULT=new ReturnValueClassVoid(); :}
				; 
				
FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;
	
FormalParamDecl ::= (FormalParamDeclClassNoArray) Type:varType IDENT:varName {: RESULT=new FormalParamDeclClassNoArray(varType, varName); RESULT.setLine(varTypeleft); :}
		|
		(FormalParamDeclClassArray) Type:varType IDENT:varName LSQUARE_BRACKET RSQUARE_BRACKET {: RESULT=new FormalParamDeclClassArray(varType, varName); RESULT.setLine(varTypeleft); :}
		;







StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		   |
		   (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		   ; 

Unmatched ::= (UnmatchedIf) IF Expr:E1 Statement:S2 {: RESULT=new UnmatchedIf(E1, S2); RESULT.setLine(E1left); :}
		 	|
		 	(UnmatchedIfElse) IF Expr:E1 Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(E1, M2, U3); RESULT.setLine(E1left); :}
		 	;
		 

Matched ::= (Assignment) Designator:dest EQUAL Expr:e SEMI {: RESULT=new Assignment(dest, e); RESULT.setLine(destleft); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   |
		   (MatchedStatement) IF Expr:E1 Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedStatement(E1, M2, M3); RESULT.setLine(E1left); :}
		   ;
			
Expr ::= (AddExpr) Expr:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
	 |
	 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
	 ;

Term ::= (Term) Factor:t {: RESULT=new Term(t); RESULT.setLine(tleft); :};

Factor ::= (Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		| 
		(FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :};

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :};
		
		

