package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal CHAR, BOOLEAN, BREAK, CLASS, ENUM, CONST, SWITCH, DO, WHILE, NEW,
		READ, EXTENDS, CONTINUE, CASE, MINUS, MUL, DIV, MOD, EQUAL_COMPARATION, 
		NOT_EQUAL_COMPARATION, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL,
		AND, OR, PLUS_PLUS, MINUS_MINUS, DOT, TERNARY, COLON, EQUAL;

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, RETURN, PLUS, COMMA, PRINT, VOID, LSQUARE_BRACKET, RSQUARE_BRACKET;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;

nonterminal Program Program;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal Type Type;
nonterminal MethodsOption MethodsOption;
nonterminal ExtendsOption ExtendsOption;
nonterminal MethodDecl MethodDecl;
nonterminal VarList VarList;
nonterminal Variable Variable;
nonterminal 
			GroupDeclList GroupDeclList;
nonterminal GroupDecl GroupDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstList ConstList;
nonterminal ConstVariable ConstVariable;
nonterminal ValueOptions ValueOptions;
nonterminal ReturnValue ReturnValue;
nonterminal PrintCommaNumber PrintCommaNumber;
			
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal AddOp AddOp;
nonterminal Factor Factor;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal OptionalDesignator OptionalDesignator;
nonterminal AssignOp AssignOp;
nonterminal RelOp RelOp;
nonterminal MulOp MulOp;
nonterminal FactorOptional FactorOptional;
nonterminal FactorOptionalSecond FactorOptionalSecond;
nonterminal TermOptionalList TermOptionalList;
nonterminal ExprOptionalList ExprOptionalList;
nonterminal CondFact CondFact;
nonterminal 
			CondFactOptional CondFactOptional;
nonterminal CondTerm CondTerm;
nonterminal CondTermOptional CondTermOptional;
nonterminal Condition Condition;
nonterminal ConditionOptional ConditionOptional;
nonterminal DesignatorStatementOptions DesignatorStatementOptions;
nonterminal SwitchStatementList SwitchStatementList;
nonterminal ExprNegative ExprNegative;
nonterminal ExprPositive ExprPositive;
nonterminal ExprOne ExprOne;

nonterminal PotentialError PotentialError;
nonterminal OptionalElse OptionalElse;		
	
precedence left ELSE;
			
Program ::= (Program) PROG IDENT:I1 GroupDeclList:G2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(I1, G2, M3); RESULT.setLine(I1left); :};

GroupDeclList ::= (GroupDeclarations) GroupDeclList:G1 GroupDecl:G2 {: RESULT=new GroupDeclarations(G1, G2); RESULT.setLine(G1left); :}
			  |
			  (NoGroupDecl) {: RESULT=new NoGroupDecl(); :} /* epsilon */
			  ;
			  
GroupDecl ::= (GroupDeclarationVars) VarDecl:V1 {: RESULT=new GroupDeclarationVars(V1); RESULT.setLine(V1left); :}
			  |
			  (GroupDeclarationClasses) ClassDecl:C1 {: RESULT=new GroupDeclarationClasses(C1); RESULT.setLine(C1left); :}
			  |
			  (GroupDeclarationsConsts) ConstDecl:C1 {: RESULT=new GroupDeclarationsConsts(C1); RESULT.setLine(C1left); :}
			  ;

ClassDecl ::= (ClassDeclClass) CLASS IDENT:className ExtendsOption:E1 LBRACE VarDeclList:V2 MethodsOption:M3 RBRACE {: RESULT=new ClassDeclClass(className, E1, V2, M3); RESULT.setLine(classNameleft); :};

ExtendsOption ::= (ExtendsClassName) EXTENDS Type:extendsClassType {: RESULT=new ExtendsClassName(extendsClassType); RESULT.setLine(extendsClassTypeleft); :}
				|
				(NoExtendsOption) {: RESULT=new NoExtendsOption(); :} /* epsilon */
				;

MethodsOption ::= (MethodsClassName) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new MethodsClassName(M1); RESULT.setLine(M1left); :}
				|
				(NoMethodsOption) {: RESULT=new NoMethodsOption(); :} /* epsilon */ 
				;
				

ConstDecl ::= (ConstDeclClass) CONST Type:constVarType ConstList:C1 SEMI {: RESULT=new ConstDeclClass(constVarType, C1); RESULT.setLine(constVarTypeleft); :};

ConstList ::= (ConstListClass) ConstList:C1 COMMA ConstVariable:C2 {: RESULT=new ConstListClass(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (ConstListSingle) ConstVariable:C1 {: RESULT=new ConstListSingle(C1); RESULT.setLine(C1left); :}
			  ;

ConstVariable ::= (ConstListNoArray) IDENT:constVarName EQUAL ValueOptions:V1 {: RESULT=new ConstListNoArray(constVarName, V1); RESULT.setLine(constVarNameleft); :};

ValueOptions ::= (ValuesNumber) NUMBER:N1 {: RESULT=new ValuesNumber(N1); RESULT.setLine(N1left); :}
				 |
 				 (ValuesBoolean) BOOLEAN {: RESULT=new ValuesBoolean(); :}
 				 |
 				 (ValuesChar) CHAR {: RESULT=new ValuesChar(); :}
 				 ;

VarDeclList ::= (VarDeclListClass) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListClass(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
				;

VarDecl ::= (VarDeclClass) Type:varType VarList:V1 SEMI {: RESULT=new VarDeclClass(varType, V1); RESULT.setLine(varTypeleft); :}
			|
			(VarDeclYesError) error:e SEMI
				{:
					parser.report_error("Successful error recovery by parser on line " + eleft + " -> Variable Declaration Semi", null);
				:} {: RESULT=new VarDeclYesError(); :}
			;

VarList ::= (VarListClass) VarList:V1 COMMA Variable:V2 {: RESULT=new VarListClass(V1, V2); RESULT.setLine(V1left); :}
			|
			(VarListSingle) Variable:V1 {: RESULT=new VarListSingle(V1); RESULT.setLine(V1left); :}
			|
			(ErrorVarList) error:e
			{:
				parser.report_error("Successful error recovery by parser on line " + eleft + " -> Variable Declaration Comma", null);
			:} {: RESULT=new ErrorVarList(); :}
			;
				
Variable ::= (VarClassNoArray) IDENT:varName {: RESULT=new VarClassNoArray(varName); RESULT.setLine(varNameleft); :}
		|
		(VarClassArray) IDENT:varName LSQUARE_BRACKET RSQUARE_BRACKET {: RESULT=new VarClassArray(varName); RESULT.setLine(varNameleft); :}
		;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) ReturnValue:R1 IDENT:methName LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(R1, methName, F2, V3, S4); RESULT.setLine(R1left); :};

ReturnValue ::= (ReturnValueClassNoVoid) Type:retType {: RESULT=new ReturnValueClassNoVoid(retType); RESULT.setLine(retTypeleft); :}
				|
				(ReturnValueClassVoid) VOID {: RESULT=new ReturnValueClassVoid(); :}
				; 
				
FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;
	
FormalParamDecl ::= (FormalParamDeclClassNoArray) Type:formalParamType IDENT:formalParamName {: RESULT=new FormalParamDeclClassNoArray(formalParamType, formalParamName); RESULT.setLine(formalParamTypeleft); :}
		|
		(FormalParamDeclClassArray) Type:formalParamType IDENT:formalParamName LSQUARE_BRACKET RSQUARE_BRACKET {: RESULT=new FormalParamDeclClassArray(formalParamType, formalParamName); RESULT.setLine(formalParamTypeleft); :}
		|
		(FormParYesError) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Formal function parameter", null);
		:} {: RESULT=new FormParYesError(); :}
		;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
		 	
Designator ::= (Designator) IDENT:name OptionalDesignator:O1 {: RESULT=new Designator(name, O1); RESULT.setLine(nameleft); :};

OptionalDesignator ::= (OptionalDesignatorClass) OptionalDesignator:O1 DOT IDENT:name {: RESULT=new OptionalDesignatorClass(O1, name); RESULT.setLine(O1left); :}
					|
					(OptionalDesignatorArray) OptionalDesignator:O1 LSQUARE_BRACKET Expr:E2 RSQUARE_BRACKET {: RESULT=new OptionalDesignatorArray(O1, E2); RESULT.setLine(O1left); :}
					|
					(NoOptionalDesignatorClass) {: RESULT=new NoOptionalDesignatorClass(); :} /* epsilon */
					;

DesignatorStatement ::= (DesignatorStatementClass) Designator:D1 DesignatorStatementOptions:D2 {: RESULT=new DesignatorStatementClass(D1, D2); RESULT.setLine(D1left); :};

DesignatorStatementOptions ::= (DesignatorStatementOptionsClassAssignExpression) AssignOp:A1 Expr:E2 {: RESULT=new DesignatorStatementOptionsClassAssignExpression(A1, E2); RESULT.setLine(A1left); :}
							|
							(DesignatorStatementActualParameters) LPAREN ActualPars:A1  RPAREN {: RESULT=new DesignatorStatementActualParameters(A1); RESULT.setLine(A1left); :}
							|
							(DesignatorStatementPlusPlus) PLUS_PLUS {: RESULT=new DesignatorStatementPlusPlus(); :}
							|
							(DesignatorStatementMinusMinus) MINUS_MINUS {: RESULT=new DesignatorStatementMinusMinus(); :}
							; 


Statement ::= (Assignment) DesignatorStatement:D1 SEMI {: RESULT=new Assignment(D1); RESULT.setLine(D1left); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 PrintCommaNumber:P2 RPAREN SEMI {: RESULT=new PrintStmt(E1, P2); RESULT.setLine(E1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :} 
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   |
		   (BreakClass) BREAK SEMI {: RESULT=new BreakClass(); :}
		   |
		   (ContinueClass) CONTINUE SEMI {: RESULT=new ContinueClass(); :}
		   |
		   (ReadClass) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadClass(D1); RESULT.setLine(D1left); :}
		   |
		   (IfStatement) IF LPAREN PotentialError:P1 RPAREN Statement:S2 OptionalElse:O3 {: RESULT=new IfStatement(P1, S2, O3); RESULT.setLine(P1left); :}
		   |
		   (DoWhileStatement) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhileStatement(S1, C2); RESULT.setLine(S1left); :}
		   |
		   (SwitchStatement) SWITCH LPAREN Expr:E1 RPAREN LBRACE SwitchStatementList:S2 RBRACE {: RESULT=new SwitchStatement(E1, S2); RESULT.setLine(E1left); :}
		   |
		   (StatementStatement) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementStatement(S1); RESULT.setLine(S1left); :}
		   ;

PotentialError ::=
		(IfConditionNoError) Condition:C1 {: RESULT=new IfConditionNoError(C1); RESULT.setLine(C1left); :}
		|
		(IfConditionYesError) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> If Statement Condition", null);
		:} {: RESULT=new IfConditionYesError(); :}
		;

OptionalElse ::=
		(YesOptionalStatement) ELSE Statement:S1 {: RESULT=new YesOptionalStatement(S1); RESULT.setLine(S1left); :}
		|
		(NoOptionalStatement) {: RESULT=new NoOptionalStatement(); :} /* epsilon */
		;




PrintCommaNumber ::= (CommaNumberClass) COMMA NUMBER:N1 {: RESULT=new CommaNumberClass(N1); RESULT.setLine(N1left); :}
					|
					(NoCommaNumberClass) {: RESULT=new NoCommaNumberClass(); :} /* epsilon */
					;

SwitchStatementList ::= (SwitchStatementListClass) SwitchStatementList:S1 CASE NUMBER:N2 COLON Statement:S3 {: RESULT=new SwitchStatementListClass(S1, N2, S3); RESULT.setLine(S1left); :}
					|
					(NoSwitchStatementList) {: RESULT=new NoSwitchStatementList(); :} /* epsilon */
					;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;

Condition ::= (ConditionClass) CondTerm:C1 ConditionOptional:C2 {: RESULT=new ConditionClass(C1, C2); RESULT.setLine(C1left); :};

ConditionOptional ::= (ConditionOptionalClass) ConditionOptional:C1 OR CondTerm:C2 {: RESULT=new ConditionOptionalClass(C1, C2); RESULT.setLine(C1left); :}
					|
					(NoConditionOptionalClass) {: RESULT=new NoConditionOptionalClass(); :} /* epsilon */
					;		
		
CondTerm ::= (CondTermClass) CondFact:C1 CondTermOptional:C2 {: RESULT=new CondTermClass(C1, C2); RESULT.setLine(C1left); :};

CondTermOptional ::= (CondTermOptionalClass) CondTermOptional:C1 AND CondFact:C2 {: RESULT=new CondTermOptionalClass(C1, C2); RESULT.setLine(C1left); :}
					|
					(NoCondTermOptionalClass) {: RESULT=new NoCondTermOptionalClass(); :} /* epsilon */
					;
		
CondFact ::= (CondFactClass) Expr:E1 CondFactOptional:C2 {: RESULT=new CondFactClass(E1, C2); RESULT.setLine(E1left); :};

CondFactOptional ::= (CondFactOptionalClass) RelOp:R1 Expr:E2 {: RESULT=new CondFactOptionalClass(R1, E2); RESULT.setLine(R1left); :}
					|
					(NoCondFactOptionalClass) {: RESULT=new NoCondFactOptionalClass(); :} /* epsion */
					;		
		
ExprNegative ::= (ExprNegativeClass) MINUS ExprPositive:E1 {: RESULT=new ExprNegativeClass(E1); RESULT.setLine(E1left); :};

ExprPositive ::= (ExprFirstOptionClassWithMinus) Term:T1 ExprOptionalList:E2 {: RESULT=new ExprFirstOptionClassWithMinus(T1, E2); RESULT.setLine(T1left); :};


ExprOne ::= (NormalExpressionClass) ExprPositive:E1 {: RESULT=new NormalExpressionClass(E1); RESULT.setLine(E1left); :}
		|
		(ExprSecondOptionClassMinus) ExprNegative:E1 {: RESULT=new ExprSecondOptionClassMinus(E1); RESULT.setLine(E1left); :}
		;	

Expr ::= (ClassOneClass) ExprOne:E1 {: RESULT=new ClassOneClass(E1); RESULT.setLine(E1left); :}
		|
		(ClassTwoClass) ExprOne:E1 TERNARY ExprOne:E2 COLON ExprOne:E3 {: RESULT=new ClassTwoClass(E1, E2, E3); RESULT.setLine(E1left); :}
		;
	
ExprOptionalList ::= (ExprOptionalListClass) ExprOptionalList:E1 AddOp:A2 Term:T3 {: RESULT=new ExprOptionalListClass(E1, A2, T3); RESULT.setLine(E1left); :}
					|
					(NoExprOptionalListClass) {: RESULT=new NoExprOptionalListClass(); :} /* epsilon */
					;
					
Term ::= (TermClass) Factor:F1 TermOptionalList:T2 {: RESULT=new TermClass(F1, T2); RESULT.setLine(F1left); :};

TermOptionalList ::= (TermOptionalListClass) TermOptionalList:T1 MulOp:M2 Factor:F3 {: RESULT=new TermOptionalListClass(T1, M2, F3); RESULT.setLine(T1left); :}
					|
					(NoTermOptionalListClass) {: RESULT=new NoTermOptionalListClass(); :} /* epsilon */
					; 				
				
Factor ::= (DesignatorClass) Designator:D1 FactorOptional:F2 {: RESULT=new DesignatorClass(D1, F2); RESULT.setLine(D1left); :}
			|
			(NumberConst) NUMBER:N1 {: RESULT=new NumberConst(N1); RESULT.setLine(N1left); :}
			|
			(CharConst) CHAR {: RESULT=new CharConst(); :}
			|
			(BooleanClassConstFactor) BOOLEAN {: RESULT=new BooleanClassConstFactor(); :}
			|
			(NewFactorClass) NEW IDENT:varType FactorOptionalSecond:F1 {: RESULT=new NewFactorClass(varType, F1); RESULT.setLine(varTypeleft); :}
			|
			(ParenFactorClass) LPAREN Expr:E1 RPAREN {: RESULT=new ParenFactorClass(E1); RESULT.setLine(E1left); :}
			;

FactorOptional ::= (FactorOptionalParams) LPAREN ActualPars:A1 RPAREN {: RESULT=new FactorOptionalParams(A1); RESULT.setLine(A1left); :}
				|
				(NoFactorOptional) {: RESULT=new NoFactorOptional(); :} /* epsilon */
				;

FactorOptionalSecond ::= (FactorOptionalSecondClass) LSQUARE_BRACKET Expr:E1 RSQUARE_BRACKET {: RESULT=new FactorOptionalSecondClass(E1); RESULT.setLine(E1left); :}
				|
				(NoFactorOptionalSecondClass) {: RESULT=new NoFactorOptionalSecondClass(); :} /* epsilon */
				;
				
AddOp ::= (PlusOperation) PLUS {: RESULT=new PlusOperation(); :}
		|
		(MinusOperation) MINUS {: RESULT=new MinusOperation(); :}
		;
		
AssignOp ::= (AssignOperationClass) EQUAL {: RESULT=new AssignOperationClass(); :};

RelOp ::= (RelationOperationClassEqualComparation) EQUAL_COMPARATION {: RESULT=new RelationOperationClassEqualComparation(); :} 
		|
		(RelationOperationClassNotEqualComparation) NOT_EQUAL_COMPARATION {: RESULT=new RelationOperationClassNotEqualComparation(); :}
		|
		(GreaterOperationClass) GREATER {: RESULT=new GreaterOperationClass(); :}
		|
		(LessOperationClass) LESS {: RESULT=new LessOperationClass(); :}
		|
		(GreaterOrEqualOperationClass) GREATER_OR_EQUAL {: RESULT=new GreaterOrEqualOperationClass(); :}
		|
		(LessOrEqualOperationClass) LESS_OR_EQUAL {: RESULT=new LessOrEqualOperationClass(); :}
		;

MulOp ::= (MultiplyOperationClass) MUL {: RESULT=new MultiplyOperationClass(); :}
		|
		(DivideOperationClass) DIV {: RESULT=new DivideOperationClass(); :}
		|
		(ModOperationClass) MOD {: RESULT=new ModOperationClass(); :}
		;