package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   	boolean greska = false; // da li je prijavljena greska u toku prevodjenja
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\n SYNTAX ERROR! ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error(" FATAL ERROR! CAN'T CONTINUE PARSING! ", cur_token);
    }

    public void report_error(String message, Object info) {
    	greska = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" ON LINE ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {: greska=false; :};

terminal PROG;
terminal BREAK, CONTINUE, VOID;
terminal CLASS, EXTENDS;
terminal ENUM, CONST;
terminal SWITCH, CASE;
terminal DO, WHILE;
terminal IF, ELSE;
terminal NEW;
terminal READ, PRINT;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL;
terminal EQUAL_COMPARATION, NOT_EQUAL_COMPARATION;
terminal GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL;
terminal AND, OR;
terminal PLUS_PLUS, MINUS_MINUS;
terminal DOT, COMMA, COLON, SEMI;
terminal TERNARY;
terminal LBRACE, RBRACE;
terminal LPAREN, RPAREN;
terminal LSQUARE_BRACKET, RSQUARE_BRACKET;
terminal RETURN;

terminal Integer NUMBER;
terminal String IDENT;
terminal Character CHAR;
terminal String BOOLEAN;

nonterminal GroupDeclList, MethodDeclList;
nonterminal GroupDecl;
nonterminal VarDecl, ClassDecl, ConstDecl;
nonterminal ExtendsOption, MethodsOption;
nonterminal ConstList;
nonterminal ConstVariable;
nonterminal VarDeclList, VarList;
nonterminal Variable;
nonterminal FormPars, StatementList;
nonterminal FormalParamList;
nonterminal FormalParamDecl;
nonterminal Statement;
nonterminal Matched, Unmatched;
nonterminal Condition;
nonterminal Designator, OptionalDesignator;
nonterminal DesignatorStatement, DesignatorStatementOptions;
nonterminal AssignOp, ActualPars;
nonterminal PrintCommaNumber, SwitchStatementList;
nonterminal ActualParamList;
nonterminal ConditionOptional, CondTerm;
nonterminal CondFact, CondTermOptional;
nonterminal CondFactOptional;
nonterminal RelOp;
nonterminal ExprPositive, ExprNegative;
nonterminal ExprOptionalList;
nonterminal ExprOne;
nonterminal FactorOptional, FactorOptionalSecond;
nonterminal TermOptionalList, MulOp, AddOp;
nonterminal PotentialError, OptionalElse;		
nonterminal ReturnNonTerminal, DoKeyWord, BreakKeyWord, ContinueKeyWord;

/********** PHASE 3 - SEMANTIC ANALYSIS **********/	

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName, MethodDecl, ReturnValue;
	
	
	
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, ValueOptions;	
	
	
	
precedence left ELSE;

/********** PROGRAM BASIC **********/



Program ::= (Program) PROG ProgramName GroupDeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programName;




/********** PROGRAM STUFF **********/



GroupDeclList ::= (GroupDeclarations) GroupDeclList GroupDecl
			  |
			  (NoGroupDecl) /* epsilon */
			  ;
			  
GroupDecl ::= (GroupDeclarationVars) VarDecl
			  |
			  (GroupDeclarationClasses) ClassDecl
			  |
			  (GroupDeclarationsConsts) ConstDecl
			  ;

ClassDecl ::= (ClassDeclClass) CLASS IDENT:className ExtendsOption LBRACE VarDeclList MethodsOption RBRACE;

ExtendsOption ::= (ExtendsClassName) EXTENDS Type:extendsClassType
				|
				(NoExtendsOption) /* epsilon */
				;

MethodsOption ::= (MethodsClassName) LBRACE MethodDeclList RBRACE
				|
				(NoMethodsOption) /* epsilon */ 
				;




/********** CONSTANTS **********/


				
ConstDecl ::= (ConstDeclClass) CONST Type:constVarType ConstList SEMI
				|
				(ConstDeclYesError) CONST error:e SEMI /* za primer -> int ; */
					{:
						parser.report_error("CONST DECLARATION SUCCESSFULL RECOVERY *** SEMI *** ON LINE " + eleft, null);
					:};

ConstList ::= (ConstListClass) ConstList COMMA ConstVariable:afterCommaConstVariable
			  |
			  (ConstListSingle) ConstVariable:singleConstVariable
			  ;

ConstVariable ::= (ConstListNoArray) IDENT:constVarName EQUAL ValueOptions:constValue
			|
			(ErrorConstVariableList) error:e /* za primer -> int a b, c, d, e f , g, po k; */
			{:
				parser.report_error("CONST DECLARATION SUCCESSFULL RECOVERY *** COMMA *** ON LINE " + eleft, null);
			:}
		;

ValueOptions ::= (ValuesNumber) NUMBER:numValue
				 |
 				 (ValuesBoolean) BOOLEAN:val
 				 |
 				 (ValuesChar) CHAR:val
 				 ;




/********** VARIABLES **********/





VarDeclList ::= (VarDeclListClass) VarDeclList VarDecl
				|
				(NoVarDeclList) /* epsilon */
				;

VarDecl ::= (VarDeclClass) Type:varType VarList SEMI
			|
			(VarDeclYesError) error:e SEMI /* za primer -> int ; */
				{:
					parser.report_error("VARIABLE DECLARATION SUCCESSFULL RECOVERY *** SEMI *** ON LINE " + eleft, null);
				:}
			;

VarList ::= (VarListClass) VarList COMMA Variable:afterCommaVariable
			|
			(VarListSingle) Variable:singleCommaVariable
			;
				
Variable ::= (VarClassNoArray) IDENT:varName
		|
		(VarClassArray) IDENT:varName LSQUARE_BRACKET RSQUARE_BRACKET
		|
		(ErrorVariable) error:e /* za primer -> int a b, c, d, e f , g, po k; */
			{:
				parser.report_error("VARIABLE DECLARATION SUCCESSFULL RECOVERY *** COMMA *** ON LINE " + eleft, null);
			:}
		;

Type ::= (Type) IDENT:typeName;



/********** METHODS -> ovde izmena bila, ako ne bude radilo **********/



MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) ReturnValue LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;

ReturnValue ::= (ReturnValueClassNoVoid) Type:retType IDENT:methName 
				|
				(ReturnValueClassVoid) VOID:retType IDENT:methName 
				; 



/********** FORMAL PARAMETERS **********/

				
				
FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
	
FormalParamDecl ::= (FormalParamDeclClassNoArray) Type:formalParamType IDENT:formalParamName
		|
		(FormalParamDeclClassArray) Type:formalParamType IDENT:formalParamName LSQUARE_BRACKET RSQUARE_BRACKET
		|
		(FormParYesError) error:error
		{:
			parser.report_error("FORMAL PARAMETERS SUCCESSFUL RECOVERY ON LINE " + errorleft , null);
		:}
		;



/********** DESIGNATORS **********/




Designator ::= (Designator) IDENT:name OptionalDesignator;

OptionalDesignator ::= (OptionalDesignatorClass) OptionalDesignator DOT IDENT:name
					|
					(OptionalDesignatorArray) OptionalDesignator LSQUARE_BRACKET Expr RSQUARE_BRACKET
					|
					(NoOptionalDesignatorClass) /* epsilon */
					;



/********** DESIGNATOR STATEMENTS **********/



DesignatorStatement ::= (DesignatorStatementClass) Designator:designatorName DesignatorStatementOptions;

DesignatorStatementOptions ::= (DesignatorStatementOptionsClassAssignExpression) AssignOp Expr
							|
							(DesignatorStatementActualParameters) LPAREN ActualPars  RPAREN
							|
							(DesignatorStatementPlusPlus) PLUS_PLUS
							|
							(DesignatorStatementMinusMinus) MINUS_MINUS
							; 




/********** STATEMENTS **********/




Statement ::= (Assignment) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("STATEMENT SUCCESSFULL RECOVERY ON LINE " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr PrintCommaNumber RPAREN SEMI
		   |
		   (ReturnExpr) ReturnNonTerminal Expr:t SEMI 
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (BreakClass) BreakKeyWord SEMI
		   |
		   (ContinueClass) ContinueKeyWord SEMI
		   |
		   (ReadClass) READ LPAREN Designator:designator RPAREN SEMI
		   |
		   (IfStatement) IF LPAREN PotentialError RPAREN Statement OptionalElse /* ako budes probao oporavak ceo za if, probaj da spustis RPAREN */
		   |
		   (DoWhileStatement) DoKeyWord Statement WHILE LPAREN Condition RPAREN SEMI
		   |
		   (SwitchStatement) SWITCH LPAREN Expr RPAREN LBRACE SwitchStatementList RBRACE
		   |
		   (StatementStatement) LBRACE StatementList RBRACE
		   ;
		   
DoKeyWord ::= (DoClass) DO;

BreakKeyWord ::= (BreakKeyWordClass) BREAK;

ContinueKeyWord ::= (ContinueKeyWord) CONTINUE;

ReturnNonTerminal ::= (ReturnNonTerminalClass) RETURN;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
PotentialError ::= (IfConditionNoError) Condition;

OptionalElse ::= (YesOptionalStatement) ELSE Statement
				|
				(NoOptionalStatement) /* epsilon */
				;

PrintCommaNumber ::= (CommaNumberClass) COMMA NUMBER
					|
					(NoCommaNumberClass) /* epsilon */
					;




/********** SWITCH **********/




SwitchStatementList ::= (SwitchStatementListClass) SwitchStatementList CASE NUMBER COLON Statement
					|
					(NoSwitchStatementList) /* epsilon */
					;



/********** ACTUAL PARAMETERS **********/




		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;




/********** CONDITIONS **********/




Condition ::= (ConditionClass) CondTerm ConditionOptional
					|
					(ConditionError) error:error /* greska koja brise sve iz zagrada za if; */
					{:
						parser.report_error("CONDITION SUCCESSFULL RECOVERY ON LINE " + errorleft, null);
					:}
					;		
		
ConditionOptional ::= (ConditionOptionalClass) ConditionOptional OR CondTerm
					|
					(NoConditionOptionalClass) /* epsilon */	
					;		
		
CondTerm ::= (CondTermClass) CondFact CondTermOptional;

CondTermOptional ::= (CondTermOptionalClass) CondTermOptional AND CondFact
					|
					(NoCondTermOptionalClass) /* epsilon */
					;
		
CondFact ::= (CondFactClass) Expr CondFactOptional;

CondFactOptional ::= (CondFactOptionalClass) RelOp Expr
					|
					(NoCondFactOptionalClass) /* epsion */
					;	




/********** EXPRETIONS **********/



		
ExprNegative ::= (ExprNegativeClass) MINUS ExprPositive;

ExprPositive ::= (ExprFirstOptionClassWithMinus) Term ExprOptionalList;


ExprOne ::= (NormalExpressionClass) ExprPositive
		|
		(ExprSecondOptionClassMinus) ExprNegative
		;	

Expr ::= (ClassOneClass) ExprOne
		|
		(ClassTwoClass) ExprOne TERNARY ExprOne COLON ExprOne
		;
	
ExprOptionalList ::= (ExprOptionalListClass) ExprOptionalList AddOp Term
					|
					(NoExprOptionalListClass) /* epsilon */
					;




/********** TERMS **********/



					
Term ::= (TermClass) Factor TermOptionalList;

TermOptionalList ::= (TermOptionalListClass) TermOptionalList MulOp Factor
					|
					(NoTermOptionalListClass) /* epsilon */
					; 				
				

				
				
/********** FACTORS **********/

			
				
				
Factor ::= 	(DesignatorClass) Designator FactorOptional
			|
			(NumberConst) NUMBER:val
			|
			(CharConst) CHAR:val
			|
			(BooleanClassConstFactor) BOOLEAN:val
			|
			(NewFactorClass) NEW IDENT:varType FactorOptionalSecond
			|
			(ParenFactorClass) LPAREN Expr RPAREN
			;

FactorOptional ::= (FactorOptionalParams) LPAREN ActualPars RPAREN
				|
				(NoFactorOptional) /* epsilon */
				;

FactorOptionalSecond ::= (FactorOptionalSecondClass) LSQUARE_BRACKET Expr RSQUARE_BRACKET
				|
				(NoFactorOptionalSecondClass) /* epsilon */
				;
				
				
				
				
/********** OPERATORS **********/




AddOp ::= (PlusOperation) PLUS
		|
		(MinusOperation) MINUS
		;
		
AssignOp ::= (AssignOperationClass) EQUAL;

RelOp ::= (RelationOperationClassEqualComparation) EQUAL_COMPARATION 
		|
		(RelationOperationClassNotEqualComparation) NOT_EQUAL_COMPARATION
		|
		(GreaterOperationClass) GREATER
		|
		(LessOperationClass) LESS
		|
		(GreaterOrEqualOperationClass) GREATER_OR_EQUAL
		|
		(LessOrEqualOperationClass) LESS_OR_EQUAL
		;

MulOp ::= (MultiplyOperationClass) MUL
		|
		(DivideOperationClass) DIV
		|
		(ModOperationClass) MOD
		;