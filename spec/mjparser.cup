package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   boolean greska=false; // da li je prijavljena greska u toku prevodjenja
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	greska = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

init with {: greska=false; :};

terminal CHAR, BOOLEAN, BREAK, CLASS, ENUM, CONST, SWITCH, DO, WHILE, NEW,
		READ, EXTENDS, CONTINUE, CASE, MINUS, MUL, DIV, MOD, EQUAL_COMPARATION, 
		NOT_EQUAL_COMPARATION, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL,
		AND, OR, PLUS_PLUS, MINUS_MINUS, DOT, TERNARY, COLON, EQUAL;

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, RETURN, PLUS, COMMA, PRINT, VOID, LSQUARE_BRACKET, RSQUARE_BRACKET;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;

nonterminal Program, ProgramName, VarDeclList, MethodDeclList, VarDecl, Type, MethodsOption, ExtendsOption, MethodDecl, VarList, Variable, 
			GroupDeclList, GroupDecl, ClassDecl, ConstDecl, ConstList, ConstVariable, ValueOptions, ReturnValue, PrintCommaNumber;
			
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, AddOp, Factor, ActualPars, ActualParamList;
nonterminal Matched, Unmatched;

nonterminal DesignatorStatement, OptionalDesignator, AssignOp, RelOp, MulOp, FactorOptional, FactorOptionalSecond, TermOptionalList, ExprOptionalList, CondFact, 
			CondFactOptional, CondTerm, CondTermOptional, Condition, ConditionOptional, DesignatorStatementOptions, SwitchStatementList, ExprNegative, ExprPositive, ExprOne;

nonterminal PotentialError, OptionalElse;		
	
precedence left ELSE;
			
Program ::= (Program) PROG ProgramName GroupDeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programName;

GroupDeclList ::= (GroupDeclarations) GroupDeclList GroupDecl
			  |
			  (NoGroupDecl) /* epsilon */
			  ;
			  
GroupDecl ::= (GroupDeclarationVars) VarDecl
			  |
			  (GroupDeclarationClasses) ClassDecl
			  |
			  (GroupDeclarationsConsts) ConstDecl
			  ;

ClassDecl ::= (ClassDeclClass) CLASS IDENT:className ExtendsOption LBRACE VarDeclList MethodsOption RBRACE;

ExtendsOption ::= (ExtendsClassName) EXTENDS Type:extendsClassType
				|
				(NoExtendsOption) /* epsilon */
				;

MethodsOption ::= (MethodsClassName) LBRACE MethodDeclList RBRACE
				|
				(NoMethodsOption) /* epsilon */ 
				;
				

ConstDecl ::= (ConstDeclClass) CONST Type:constVarType ConstList SEMI
				|
			(ConstDeclYesError) CONST error:e SEMI /* za primer -> int ; */
				{:
					parser.report_error("Successful error recovery by parser on line " + eleft + " -> Const Declaration Semi", null);
				:};

ConstList ::= (ConstListClass) ConstList COMMA ConstVariable
			  |
			  (ConstListSingle) ConstVariable
			  ;

ConstVariable ::= (ConstListNoArray) IDENT:constVarName EQUAL ValueOptions
			|
			(ErrorConstVariableList) error:e /* za primer -> int a b, c, d, e f , g, po k; */
			{:
				parser.report_error("Successful error recovery by parser on line " + eleft + " -> Const Declaration", null);
			:}
		;

ValueOptions ::= (ValuesNumber) NUMBER
				 |
 				 (ValuesBoolean) BOOLEAN
 				 |
 				 (ValuesChar) CHAR
 				 ;

VarDeclList ::= (VarDeclListClass) VarDeclList VarDecl
				|
				(NoVarDeclList) /* epsilon */
				;

VarDecl ::= (VarDeclClass) Type:varType VarList SEMI
			|
			(VarDeclYesError) error:e SEMI /* za primer -> int ; */
				{:
					parser.report_error("Successful error recovery by parser on line " + eleft + " -> Variable Declaration Semi", null);
				:}
			;

VarList ::= (VarListClass) VarList COMMA Variable
			|
			(VarListSingle) Variable
			
			;
				
Variable ::= (VarClassNoArray) IDENT:varName
		|
		(VarClassArray) IDENT:varName LSQUARE_BRACKET RSQUARE_BRACKET
		|
			(ErrorVariable) error:e /* za primer -> int a b, c, d, e f , g, po k; */
			{:
				parser.report_error("Successful error recovery by parser on line " + eleft + " -> Variable Declaration", null);
			:}
		;

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) ReturnValue IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;

ReturnValue ::= (ReturnValueClassNoVoid) Type:retType
				|
				(ReturnValueClassVoid) VOID
				; 
				
FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
	
FormalParamDecl ::= (FormalParamDeclClassNoArray) Type:formalParamType IDENT:formalParamName
		|
		(FormalParamDeclClassArray) Type:formalParamType IDENT:formalParamName LSQUARE_BRACKET RSQUARE_BRACKET
		|
		(FormParYesError) error:error
		{:
			parser.report_error("Successful error recovery by parser on line " + errorleft + " -> Formal function parameter", null);
		:}
		;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
		 	
Designator ::= (Designator) IDENT:name OptionalDesignator;

OptionalDesignator ::= (OptionalDesignatorClass) OptionalDesignator DOT IDENT:name
					|
					(OptionalDesignatorArray) OptionalDesignator LSQUARE_BRACKET Expr RSQUARE_BRACKET
					|
					(NoOptionalDesignatorClass) /* epsilon */
					;

DesignatorStatement ::= (DesignatorStatementClass) Designator DesignatorStatementOptions;

DesignatorStatementOptions ::= (DesignatorStatementOptionsClassAssignExpression) AssignOp Expr
							|
							(DesignatorStatementActualParameters) LPAREN ActualPars  RPAREN
							|
							(DesignatorStatementPlusPlus) PLUS_PLUS
							|
							(DesignatorStatementMinusMinus) MINUS_MINUS
							; 


Statement ::= (Assignment) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr PrintCommaNumber RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI 
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (BreakClass) BREAK SEMI
		   |
		   (ContinueClass) CONTINUE SEMI
		   |
		   (ReadClass) READ LPAREN Designator RPAREN SEMI
		   |
		   (IfStatement) IF LPAREN PotentialError RPAREN Statement OptionalElse /* ako budes probao oporavak ceo za if, probaj da spustis RPAREN */
		   |
		   (DoWhileStatement) DO Statement WHILE LPAREN Condition RPAREN SEMI
		   |
		   (SwitchStatement) SWITCH LPAREN Expr RPAREN LBRACE SwitchStatementList RBRACE
		   |
		   (StatementStatement) LBRACE StatementList RBRACE
		   ;

PotentialError ::=
		(IfConditionNoError) Condition;

OptionalElse ::=
		(YesOptionalStatement) ELSE Statement
		|
		(NoOptionalStatement) /* epsilon */
		;

PrintCommaNumber ::= (CommaNumberClass) COMMA NUMBER
					|
					(NoCommaNumberClass) /* epsilon */
					;

SwitchStatementList ::= (SwitchStatementListClass) SwitchStatementList CASE NUMBER COLON Statement
					|
					(NoSwitchStatementList) /* epsilon */
					;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;

Condition ::= (ConditionClass) CondTerm ConditionOptional
					|
					(IfConditionYesErrorTwo) error:error /* greska koja brise sve iz zagrada za if; */
					{:
						parser.report_error("Successful error recovery by parser on line " + errorleft + " -> ConditionOptional", null);
					:}
					;		
		
ConditionOptional ::= (ConditionOptionalClass) ConditionOptional OR CondTerm
					|
					(NoConditionOptionalClass) /* epsilon */	
					;		
		
CondTerm ::= (CondTermClass) CondFact CondTermOptional;

CondTermOptional ::= (CondTermOptionalClass) CondTermOptional AND CondFact
					|
					(NoCondTermOptionalClass) /* epsilon */
					;
		
CondFact ::= (CondFactClass) Expr CondFactOptional;

CondFactOptional ::= (CondFactOptionalClass) RelOp Expr
					|
					(NoCondFactOptionalClass) /* epsion */
					;	
		
ExprNegative ::= (ExprNegativeClass) MINUS ExprPositive;

ExprPositive ::= (ExprFirstOptionClassWithMinus) Term ExprOptionalList;


ExprOne ::= (NormalExpressionClass) ExprPositive
		|
		(ExprSecondOptionClassMinus) ExprNegative
		;	

Expr ::= (ClassOneClass) ExprOne
		|
		(ClassTwoClass) ExprOne TERNARY ExprOne COLON ExprOne
		;
	
ExprOptionalList ::= (ExprOptionalListClass) ExprOptionalList AddOp Term
					|
					(NoExprOptionalListClass) /* epsilon */
					;
					
Term ::= (TermClass) Factor TermOptionalList;

TermOptionalList ::= (TermOptionalListClass) TermOptionalList MulOp Factor
					|
					(NoTermOptionalListClass) /* epsilon */
					; 				
				
Factor ::= (DesignatorClass) Designator FactorOptional
			|
			(NumberConst) NUMBER
			|
			(CharConst) CHAR
			|
			(BooleanClassConstFactor) BOOLEAN
			|
			(NewFactorClass) NEW IDENT:varType FactorOptionalSecond
			|
			(ParenFactorClass) LPAREN Expr RPAREN
			;

FactorOptional ::= (FactorOptionalParams) LPAREN ActualPars RPAREN
				|
				(NoFactorOptional) /* epsilon */
				;

FactorOptionalSecond ::= (FactorOptionalSecondClass) LSQUARE_BRACKET Expr RSQUARE_BRACKET
				|
				(NoFactorOptionalSecondClass) /* epsilon */
				;
				
AddOp ::= (PlusOperation) PLUS
		|
		(MinusOperation) MINUS
		;
		
AssignOp ::= (AssignOperationClass) EQUAL;

RelOp ::= (RelationOperationClassEqualComparation) EQUAL_COMPARATION 
		|
		(RelationOperationClassNotEqualComparation) NOT_EQUAL_COMPARATION
		|
		(GreaterOperationClass) GREATER
		|
		(LessOperationClass) LESS
		|
		(GreaterOrEqualOperationClass) GREATER_OR_EQUAL
		|
		(LessOrEqualOperationClass) LESS_OR_EQUAL
		;

MulOp ::= (MultiplyOperationClass) MUL
		|
		(DivideOperationClass) DIV
		|
		(ModOperationClass) MOD
		;